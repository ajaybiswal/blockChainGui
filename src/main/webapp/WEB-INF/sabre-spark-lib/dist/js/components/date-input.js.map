{"version":3,"sources":["js/dist/components/node_modules/browser-pack/_prelude.js","js/dist/components/js/dist/components/base.js","js/dist/components/js/dist/components/date-input.js","js/dist/components/js/dist/components/date-select.js","js/dist/components/js/dist/components/date-typeahead.js","js/dist/components/js/dist/components/select-input.js","js/dist/components/js/dist/components/typeahead.js","js/dist/components/js/dist/helpers/animation/height.js","js/dist/components/js/dist/helpers/date/date.js","js/dist/components/js/dist/helpers/date/parse-format.js","js/dist/components/js/dist/helpers/dom/add-class.js","js/dist/components/js/dist/helpers/dom/has-class.js","js/dist/components/js/dist/helpers/dom/make-element.js","js/dist/components/js/dist/helpers/dom/outer-height.js","js/dist/components/js/dist/helpers/dom/parse-attribute.js","js/dist/components/js/dist/helpers/dom/remove-class.js","js/dist/components/js/dist/helpers/dom/toggle-class.js","js/dist/components/js/dist/helpers/dom/trigger-event.js","js/dist/components/js/dist/helpers/manipulation/append-children.js","js/dist/components/js/dist/helpers/manipulation/copy-attributes.js","js/dist/components/js/dist/helpers/util/each.js","js/dist/components/js/dist/helpers/util/mixin.js","js/dist/components/js/dist/helpers/util/pad.js","js/dist/components/js/dist/helpers/util/trim.js","js/dist/components/js/dist/mixins/messaging.js","js/dist/components/js/dist/mixins/validation.js"],"names":[],"mappingsxJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACljprjhjhpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvfile":"date-input.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _each = require('../helpers/util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * # Base Component\n                                                                                                                                                           * The base class for Spark JS components. This class should never be\n                                                                                                                                                           * instantiated directly.\n                                                                                                                                                           *\n                                                                                                                                                           * @param {Element} el\n                                                                                                                                                           * @param {Object} params\n                                                                                                                                                           *\n                                                                                                                                                           * @module components/base.js\n                                                                                                                                                           */\n\nvar noop = function noop() {};\n\nvar Base = function () {\n\n  /**\n   * Set parameters and cache elements.\n   */\n  function Base(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Base);\n\n    if (params.elRequired && !el) {\n      return;\n    }\n\n    this.setParams(this.defaults || {}, true);\n    this.setParams(params);\n    (this._cacheElements || noop).call(this, el, params);\n    (this._parseParams || noop).call(this);\n  }\n\n  /**\n   * Remove the component from the DOM and prepare for garbage collection by dereferencing values.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n\n\n  Base.prototype.remove = function remove(leaveElement) {\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    if (!leaveElement && this.el && this.el.parentNode) {\n      this.el.parentNode.removeChild(this.el);\n    }\n\n    this.unsetParams(this.defaults);\n\n    return this;\n  };\n\n  /**\n   * Update the component to use a new element or reparse from\n   * the existing element.\n   * @param {Element} el Optional\n   * @param {Object} params Optional\n   */\n\n\n  Base.prototype.update = function update(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    (this._cacheElements || noop).call(this, el || this.el, params);\n    (this._parseParams || noop).call(this);\n\n    if (this._addEventListeners) {\n      this._addEventListeners();\n    }\n\n    return this;\n  };\n\n  /**\n   * Set a hash of parameters if they're whitelisted or we're told to force the set.\n   * This is used to set initial values as well as set passed parameters.\n   * @param {Object} params\n   * @param {Boolean} force Force setting even if the param is not whitelisted.\n   */\n\n\n  Base.prototype.setParams = function setParams(params, force) {\n    var _this = this;\n\n    (0, _each2.default)(params, function (k, v) {\n      if (_this._whitelistedParams.indexOf(k) !== -1 || force) {\n        _this[k] = v;\n      }\n    });\n\n    return this;\n  };\n\n  /**\n   * Unset all parameters.\n   * @param {Array|Object} keys\n   * @param {Object} scope The object to unset the params from. Defaults to `this`.\n   */\n\n\n  Base.prototype.unsetParams = function unsetParams(keys, scope) {\n\n    keys = keys instanceof Array ? keys : Object.keys(keys);\n    scope = scope || this;\n    (0, _each2.default)(keys, function (k) {\n      delete scope[k];\n    });\n\n    return this;\n  };\n\n  return Base;\n}();\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nBase.prototype._whitelistedParams = [];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nBase.prototype.defaults = {};\n\nexports.default = Base;\nmodule.exports = exports['default'];\n//# sourceMappingURL=base.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _dateTypeahead = require('./date-typeahead');\n\nvar _dateTypeahead2 = _interopRequireDefault(_dateTypeahead);\n\nvar _dateSelect = require('./date-select');\n\nvar _dateSelect2 = _interopRequireDefault(_dateSelect);\n\nvar _parseFormat = require('../helpers/date/parse-format');\n\nvar _parseFormat2 = _interopRequireDefault(_parseFormat);\n\nvar _pad = require('../helpers/util/pad');\n\nvar _pad2 = _interopRequireDefault(_pad);\n\nvar _toggleClass = require('../helpers/dom/toggle-class');\n\nvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\nvar _removeClass = require('../helpers/dom/remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nvar _addClass = require('../helpers/dom/add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _hasClass = require('../helpers/dom/has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _appendChildren = require('../helpers/manipulation/append-children');\n\nvar _appendChildren2 = _interopRequireDefault(_appendChildren);\n\nvar _triggerEvent = require('../helpers/dom/trigger-event');\n\nvar _triggerEvent2 = _interopRequireDefault(_triggerEvent);\n\nvar _copyAttributes = require('../helpers/manipulation/copy-attributes');\n\nvar _copyAttributes2 = _interopRequireDefault(_copyAttributes);\n\nvar _date = require('../helpers/date/date');\n\nvar _date2 = _interopRequireDefault(_date);\n\nvar _each = require('../helpers/util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nvar _parseAttribute = require('../helpers/dom/parse-attribute');\n\nvar _mixin = require('../helpers/util/mixin');\n\nvar _mixin2 = _interopRequireDefault(_mixin);\n\nvar _messaging = require('../mixins/messaging');\n\nvar _messaging2 = _interopRequireDefault(_messaging);\n\nvar _makeElement = require('../helpers/dom/make-element');\n\nvar _makeElement2 = _interopRequireDefault(_makeElement);\n\nvar _validation = require('../mixins/validation');\n\nvar _validation2 = _interopRequireDefault(_validation);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\nateInput\ndate input container.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * new DateInput(el, {\nptional. Callback for when the input value changes.\nonChange(value, inputInstance) {}\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * });\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module components/date-input.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar domDateFormat = 'YYYY-MM-DD';\nvar parsedDomFormat = (0, _parseFormat2.default)(domDateFormat);\nvar noop = function noop() {};\n\nvar DateInput = function (_Base) {\n  _inherits(DateInput, _Base);\n\n  /**\n   * DateInput constructor.\n   * @param {Element} el\n   * @param {Object} params\n   */\n  function DateInput(el) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, DateInput);\n\n    params.elRequired = true;\n\n    if (!(_this = _possibleConstructorReturn(this, _Base.call(this, el, params)), _this)) {\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this._bindEventListenerCallbacks();\n    _this._convertLabel();\n    _this._initializeInputs();\n    _this._updateClass();\n    _this._addEventListeners();\n    return _possibleConstructorReturn(_this);\n  }\n\n  /**\n   * Show the input by adding the active state and setting character counts (if necessary).\n   */\n\n\n  DateInput.prototype.show = function show() {\n\n    if (!this.isActive) {\n      this._runTypeaheads();\n      this.isActive = true;\n      this._updateClass();\n    }\n\n    return this;\n  };\n\n  /**\n   * Hide the input by removing the active state.\n   */\n\n\n  DateInput.prototype.hide = function hide() {\n    if (!this.isActive) return this;\n    this.isActive = false;\n    this._updateClass();\n    return this;\n  };\n\n  /**\n   * Augment default remove call w/ helper cleanup.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n\n\n  DateInput.prototype.remove = function remove(leaveElement) {\n\n    this._removeTypeaheads(leaveElement);\n    this._removeSelects(leaveElement);\n    this._removeInputPieces();\n\n    _Base.prototype.remove.call(this, leaveElement);\n\n    return this;\n  };\n\n  /**\n   * Given an object with day, month and year, set the value of the input.\n   * @param {Object} values\n   */\n\n\n  DateInput.prototype.setValue = function setValue(values) {\n\n    values = values || {\n      day: '',\n      month: '',\n      year: ''\n    };\n    var i = void 0;\n    var hadValue = void 0;\n\n    for (i in this.typeaheads) {\n      if (values[i] !== undefined) {\n        this.typeaheads[i].setValue(values[i]);\n        hadValue = hadValue || (values[i] ? true : false);\n      }\n    }\n\n    for (i in this.selects) {\n      if (values[i] !== undefined) {\n        this.selects[i].setValue(values[i]);\n        hadValue = hadValue || (values[i] ? true : false);\n      }\n    }\n\n    if (!this.isActive && hadValue) {\n      this.isActive = true;\n    }\n\n    this._padTypeaheads();\n    this._updateClass();\n    this.updateInput();\n\n    return this;\n  };\n\n  /**\n   * Get the value of the input.\n   * @return {String}\n   */\n\n\n  DateInput.prototype.getValue = function getValue() {\n    return this.inputEl.value;\n  };\n\n  /**\n   * Clear the values.\n   */\n\n\n  DateInput.prototype.clearValue = function clearValue() {\n\n    (0, _each2.default)(this.isTypeahead ? this.typeaheads : this.selects, function (k, v) {\n      v.clearValue();\n    });\n\n    this.inputEl.value = '';\n\n    return this;\n  };\n\n  /**\n   * Set/reset error state\n   * @param {Boolean} true: set error state, false: reset\n   */\n\n\n  DateInput.prototype.setErrorState = function setErrorState(opt) {\n    if (opt) {\n      this.el.setAttribute('data-error', '');\n    } else {\n      this.el.removeAttribute('data-error');\n    }\n  };\n\n  /**\n   * Enable the inputs\n   */\n\n\n  DateInput.prototype.enable = function enable() {\n\n    (0, _each2.default)(this.isTypeahead ? this.typeaheads : this.selects, function (k, v) {\n      v.enable();\n    });\n\n    this.inputEl.removeAttribute('disabled');\n\n    (0, _toggleClass2.default)(this.el, 'disabled', false);\n\n    return this;\n  };\n\n  /**\n   * Clear the values.\n   */\n\n\n  DateInput.prototype.disable = function disable() {\n\n    (0, _each2.default)(this.isTypeahead ? this.typeaheads : this.selects, function (k, v) {\n      v.disable();\n    });\n\n    this.inputEl.setAttribute('disabled', '');\n\n    (0, _toggleClass2.default)(this.el, 'disabled', true);\n\n    return this;\n  };\n\n  /**\n   * Update the input values to match the typeaheads.\n   */\n\n\n  DateInput.prototype.updateInput = function updateInput() {\n\n    var inputs = void 0;\n\n    if (this.isTypeahead && this.typeaheads) {\n      inputs = this.typeaheads;\n    } else if (this.isSelect) {\n      inputs = this.selects;\n    }\n\n    if (inputs) {\n\n      var day = inputs.day && inputs.day.getValue(true) || 0;\n      var month = inputs.month && inputs.month.getValue(true) || 0;\n      var year = inputs.year && inputs.year.getValue(true) || 0;\n\n      var val = this.inputEl.value;\n\n      this.inputEl.value = [day, month, year].indexOf(0) === -1 ? (0, _pad2.default)(year, 4) + '-' + (0, _pad2.default)(month, 2) + '-' + (0, _pad2.default)(day, 2) : '';\n\n      if (val !== this.inputEl.value) {\n        this._pauseInputChange = true;\n        (0, _triggerEvent2.default)(this.inputEl, 'change');\n        (this.onChange || noop)(this.inputEl.value, this);\n        this._pauseInputChange = false;\n      }\n    }\n\n    this.currValue = this.inputEl.value;\n\n    return this;\n  };\n\n  /**\n   * Get current typing value\n   *\n   */\n\n\n  DateInput.prototype.getTypingValue = function getTypingValue() {\n\n    var inputs = void 0;\n    var result = '';\n\n    if (this.isTypeahead && this.typeaheads) {\n      inputs = this.typeaheads;\n    } else if (this.isSelect) {\n      inputs = this.selects;\n    }\n\n    if (inputs) {\n\n      var day = inputs.day && inputs.day.getValue(true);\n      var month = inputs.month && inputs.month.getValue(true);\n      var year = inputs.year && inputs.year.getValue(true);\n\n      result = month.toString() + day.toString() + year.toString();\n    }\n\n    return result;\n  };\n\n  /**\n   * Move the focus to a typeahead element.\n   * @param {Number} i\n   * @param {String} character Optional A character to add\n   */\n\n\n  DateInput.prototype.focus = function focus(i, character) {\n\n    if (!this.isActive || !this.inFocus) {\n      return this;\n    }\n\n    var index = this.typeaheadEls.indexOf(this.inFocus.typeahead.el);\n    var sib = this.typeaheadEls[index + i];\n    var typeahead = void 0;\n\n    // If we were passed a character to prepend, find the typeahead for this element\n    if (character) {\n      typeahead = this._getTypeaheadByElement(sib);\n      if (typeahead) {\n        typeahead.typeahead.addCharacterAtIndex(character, 0);\n      }\n    }\n\n    if (!sib) {\n      return false;\n    }\n\n    var sibInput = sib.querySelector('input');\n\n    if (sibInput) {\n      sibInput.focus();\n\n      // If we have a typeahead (because we needed to prepend a character), move the caret.\n      if (typeahead) {\n        typeahead.typeahead.moveCaret(1);\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Move the focus to the next element.\n   * @param {String} character Optional A character to add\n   */\n\n\n  DateInput.prototype.focusNext = function focusNext(character) {\n\n    if (this.focus(1, character)) {\n      if (this.inFocus && !character) this.inFocus.typeahead.moveCaretToStart();\n    }\n\n    return this;\n  };\n\n  /**\n   * Move the focus to the next element.\n   * @param {String} character Optional A character to add\n   */\n\n\n  DateInput.prototype.focusPrevious = function focusPrevious(character) {\n\n    if (this.focus(-1, character)) {\n      if (this.inFocus) this.inFocus.typeahead.moveCaretToEnd();\n    }\n\n    return this;\n  };\n\n  /**\n   * Do we have any values?\n   * @return {Boolean}\n   */\n\n\n  DateInput.prototype.hasPartialValue = function hasPartialValue() {\n\n    var i = void 0;\n\n    for (i in this.typeaheads) {\n      if (this.typeaheads[i].getValue()) {\n        return true;\n      }\n    }\n\n    for (i in this.selects) {\n      if (this.selects[i].getValue()) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  /**\n   * Resize the elements, to account for any changed display property.\n   * @param {Element} el Optional\n   */\n\n\n  DateInput.prototype.update = function update(el) {\n\n    if (el) {\n\n      this._removeTypeaheads();\n      this._removeSelects();\n      this._removeInputPieces();\n\n      this._removeEventListeners();\n\n      this._cacheElements(el);\n      this._convertLabel();\n      this._initializeInputs();\n      this._updateClass();\n\n      this._addEventListeners();\n    } else {\n      this._runTypeaheads();\n    }\n\n    return this;\n  };\n\n  /**\n   * Store a reference to the needed elements.\n   * @param {Element} el\n   */\n\n\n  DateInput.prototype._cacheElements = function _cacheElements(el) {\n\n    this.el = el;\n    this.inputEl = this.el.querySelector('[type=\"date\"]');\n    this.inputLabel = this.el.querySelector('.spark-label').innerHTML;\n    this.selectLabelPrefix = this.el.querySelector('.spark-label').getAttribute('id');\n\n    if (!this.inputEl) {\n      throw new Error('No <input type=\"date\"> element present in date input container!', this.el);\n    }\n\n    this.toggleEl = this.el.querySelector('.spark-date__toggle');\n\n    this.messageEl = this.el.querySelector('.spark-input__message') || (0, _makeElement2.default)('<span class=\"spark-input__message\"></span>');\n  };\n\n  /**\n   * Parse parameters from the elements.\n   */\n\n\n  DateInput.prototype._parseParams = function _parseParams() {\n\n    this.isActive = this.isActive !== null ? this.isActive : this.inputEl.value ? true : false;\n    this.isSelect = this.isSelect !== null ? this.isSelect : (0, _hasClass2.default)(this.el, 'spark-date--select') ? true : false;\n    this.isTypeahead = this.isTypeahead !== null ? this.isTypeahead : !this.isSelect ? true : false;\n    this.format = this.format !== null ? this.format : (0, _parseAttribute.string)(this.inputEl, 'data-format', 'MM-DD-YYYY');\n    this.textFormat = this.textFormat !== null ? this.textFormat : (0, _parseAttribute.string)(this.inputEl, 'data-text-format', 'MM DD YYYY');\n    this.showDateAsText = this.showDateAsText !== null ? this.showDateAsText : (0, _parseAttribute.boolean)(this.inputEl, 'data-show-date-as-text', false);\n\n    this.parsedFormat = (0, _parseFormat2.default)(this.format);\n    this.parsedTextFormat = (0, _parseFormat2.default)(this.textFormat);\n    this.min = this.min !== null ? this.min : this.inputEl.getAttribute('min');\n    this.max = this.max !== null ? this.max : this.inputEl.getAttribute('max');\n    this.min = this.min && parsedDomFormat.getValues(this.min);\n    this.max = this.max && parsedDomFormat.getValues(this.max);\n\n    this.currValue = this.inputEl.value !== null ? this.inputEl.value : null;\n  };\n\n  /**\n   * Setup the proper inputs. This could mean creating a typeahead, or creating selects.\n   */\n\n\n  DateInput.prototype._initializeInputs = function _initializeInputs() {\n\n    if (this.isTypeahead) {\n      this._initializeInputPieces();\n      this._runTypeaheads();\n    } else if (this.isSelect) {\n      (0, _removeClass2.default)(this.el, 'spark-input');\n      this._initializeInputPieces();\n    }\n  };\n\n  /**\n   * Replace the date input with a group of typeaheads or select inputs.\n   * Keep the date input around and store the typeahead data in there in an ISO date format.\n   */\n\n\n  DateInput.prototype._initializeInputPieces = function _initializeInputPieces() {\n\n    // Hide the original element. This will be updated as the typeahead values change\n    this.inputEl.style.display = 'none';\n\n    var els = [];\n    var label = void 0;\n\n    // Create a new typeahead for each part of the parsed format. Also add placeholder elements.\n    this.parsedFormat.parts.forEach(function (part) {\n      // Something weird with Node that makes us have to specify what `this` is here.\n      (this.isTypeahead ? this._initializeTypeaheadPiece : this._initializeSelectPiece).call(this, els, part);\n    }.bind(this));\n\n    // Create a holder for all the pieces\n    this.piecesEl = document.createElement('span');\n    this.piecesEl.className = this.isTypeahead ? 'spark-input__fields' : 'spark-select-group';\n\n    // Add all the necessary elements\n    (0, _appendChildren2.default)(this.piecesEl, els);\n\n    // If this is a select group, move the label element.\n    if (this.isSelect && (label = this.el.querySelector('.spark-label'))) {\n      this.piecesEl.appendChild(label);\n    }\n\n    // Add the pieces holder\n    this.el.insertBefore(this.piecesEl, this.inputEl);\n\n    // Set the value\n    if (this.inputEl.value) {\n      this.setValue(parsedDomFormat.getValues(this.inputEl.value));\n      this.isActive = true;\n    }\n  };\n\n  /**\n   * Remove the input pieces.\n   */\n\n\n  DateInput.prototype._removeInputPieces = function _removeInputPieces() {\n\n    this.inputEl.style.display = '';\n\n    // Remove elements we inserted into the DOM\n    if (this.piecesEl) {\n      this.piecesEl.parentNode.removeChild(this.piecesEl);\n    }\n  };\n\n  /**\n   * Remove typeaheads.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n\n\n  DateInput.prototype._removeTypeaheads = function _removeTypeaheads(leaveElement) {\n\n    // Remove typeaheads\n    if (this.typeaheads) {\n      for (var i in this.typeaheads) {\n        this.typeaheads[i].remove(leaveElement);\n      }\n    }\n  };\n\n  /**\n   * Remove selects.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n\n\n  DateInput.prototype._removeSelects = function _removeSelects(leaveElement) {\n\n    var label = void 0;\n\n    // Remove selects\n    if (this.selects) {\n\n      for (var i in this.selects) {\n        this.selects[i].remove(leaveElement);\n      }\n\n      // If this is a select group, move the label element.\n      if (label = this.piecesEl.querySelector('.spark-label')) {\n        this.el.appendChild(label);\n      }\n\n      (0, _addClass2.default)(this.el, 'spark-input');\n    }\n  };\n\n  /**\n   * Create a typeahead or placeholder piece.\n   * @param {Array} els\n   * @param {Object} part\n   */\n\n\n  DateInput.prototype._initializeTypeaheadPiece = function _initializeTypeaheadPiece(els, part) {\n\n    this.typeaheads = this.typeaheads || {};\n    this.typeaheadEls = this.typeaheadEls || [];\n\n    var el = void 0;\n\n    switch (part.name) {\n      case 'day':\n      case 'month':\n      case 'year':\n        this.typeaheads[part.name] = new _dateTypeahead2.default({\n          type: part.name,\n          ariaLabelPrefix: this.inputLabel,\n          len: part.length,\n          placeholder: part.value,\n          onFocus: this._onTypeaheadFocusBound,\n          onBlur: this._onTypeaheadBlurBound,\n          onChange: this._onPieceChangeBound,\n          onInput: this._onTypeaheadInputBound,\n          onBackspace: this._onTypeaheadBackspaceBound,\n          onEnd: this._onTypeaheadEndBound\n        });\n        el = this.typeaheads[part.name].typeahead.el;\n        this.typeaheadEls.push(el);\n        break;\n      default:\n        el = document.createElement('span');\n        el.innerHTML = part.value;\n        el.className = 'spark-input__divider';\n        break;\n    }\n\n    els.push(el);\n  };\n\n  /**\n   * Replace the date input with three date dropdowns. Keep the date input around and store the\n   * select data in there.\n   */\n\n\n  DateInput.prototype._initializeSelectPiece = function _initializeSelectPiece(els, part) {\n\n    this.selects = this.selects || {};\n    this.selectEls = this.selectEls || [];\n\n    if (['day', 'month', 'year'].indexOf(part.name) === -1) {\n      return;\n    }\n\n    var el = void 0;\n\n    switch (part.name) {\n      case 'day':\n      case 'month':\n        this.selects[part.name] = new _dateSelect2.default({\n          type: part.name,\n          ariaLabelPrefix: this.selectLabelPrefix,\n          onChange: this._onPieceChangeBound\n        });\n        el = this.selects[part.name].select.el;\n        break;\n      case 'year':\n        {\n          var minYear = this.inputEl.min ? parsedDomFormat.getValues(this.inputEl.min).year : null;\n          var maxYear = this.inputEl.max ? parsedDomFormat.getValues(this.inputEl.max).year : null;\n\n          this.selects[part.name] = new _dateSelect2.default({\n            min: minYear,\n            max: maxYear,\n            type: part.name,\n            ariaLabelPrefix: this.selectLabelPrefix,\n            onChange: this._onPieceChangeBound\n          });\n          el = this.selects[part.name].select.el;\n          break;\n        }\n    }\n\n    els.push(el);\n    this.selectEls.push(el);\n  };\n\n  /**\n   * If our element is a label, convert it to a div so that\n   * we are semantically correct. Can't have more than one\n   * input inside of a label!\n   */\n\n\n  DateInput.prototype._convertLabel = function _convertLabel() {\n\n    if (this.isTypeahead || this.el.nodeName.toLowerCase() !== 'label') {\n      return;\n    }\n\n    var newEl = document.createElement('fieldset');\n\n    (0, _copyAttributes2.default)(this.el, newEl);\n    (0, _appendChildren2.default)(newEl, this.el.children);\n\n    if (this.el.parentNode) {\n      this.el.parentNode.replaceChild(newEl, this.el);\n    }\n\n    this.el = newEl;\n  };\n\n  /**\n   * Validate the date values.\n   */\n\n\n  DateInput.prototype._validate = function _validate() {\n\n    if (this.isTypeahead) {\n      this._validateTypeaheads();\n    } else if (this.isSelect) {\n      this._validateSelects();\n    }\n  };\n\n  /**\n   * Validate the typeahead values.\n   */\n\n\n  DateInput.prototype._validateTypeaheads = function _validateTypeaheads() {\n\n    if (!this.typeaheads) {\n      return;\n    }\n\n    var month = this.typeaheads.month ? this.typeaheads.month.getValue(true) : null;\n    var year = this.typeaheads.year ? this.typeaheads.year.getValue(true) : null;\n    var day = this.typeaheads.day ? this.typeaheads.day.getValue(true) : null;\n    var maxDay = void 0;\n\n    if (this.format === 'DD-MM-YYYY') {\n      var selectedDate = new Date(this.inputEl.value); // this is in format YYYY-MM-DD\n      var selectedMonth = selectedDate.getMonth() + 1;\n\n      if (month === null || month === '') {\n        maxDay = this._getMaxDaysInMonth(selectedMonth);\n      } else {\n        var oldVal = new Date(this.currValue);\n        var oldMonth = oldVal.getMonth() + 1;\n\n        if (selectedMonth !== oldMonth) {\n          maxDay = this._getMaxDaysInMonth(selectedMonth);\n        } else {\n          maxDay = month && new Date(year !== null ? year : new Date().getFullYear(), month, 0).getDate() || this._getMaxDaysInMonth(month);\n        }\n      }\n    } else {\n      maxDay = month && new Date(year !== null ? year : new Date().getFullYear(), month, 0).getDate() || this._getMaxDaysInMonth(month);\n    }\n\n    if (maxDay < day) {\n      this.typeaheads.day.setValue(maxDay);\n      this.updateInput();\n    }\n  };\n\n  /**\n   * Validate the boundaries of the typeahead values relative to the min and max values.\n   */\n\n\n  DateInput.prototype._validateTypeaheadBounds = function _validateTypeaheadBounds() {\n\n    var year = this.typeaheads.year ? this.typeaheads.year.getValue(true) : null;\n    var month = this.typeaheads.month ? this.typeaheads.month.getValue(true) : null;\n    var day = this.typeaheads.day ? this.typeaheads.day.getValue(true) : null;\n\n    if (!year || !month || !day) {\n      return;\n    }\n\n    var date = new Date(year, month - 1, day);\n    var set = '';\n\n    if (this.min && date < new Date(this.min.year, this.min.month - 1, this.min.day)) {\n      set = 'min';\n    } else if (this.max && date > new Date(this.max.year, this.max.month - 1, this.max.day)) {\n      set = 'max';\n    }\n\n    if (set) {\n      this.typeaheads.year.setValue((0, _pad2.default)(this[set].year, this.typeaheads.year.typeahead.format.length));\n      this.typeaheads.month.setValue((0, _pad2.default)(this[set].month, this.typeaheads.month.typeahead.format.length));\n      this.typeaheads.day.setValue((0, _pad2.default)(this[set].day, this.typeaheads.day.typeahead.format.length));\n      this.updateInput();\n    }\n  };\n\n  /**\n   * Pad the typeahead input values.\n   */\n\n\n  DateInput.prototype._padTypeaheads = function _padTypeaheads() {\n\n    if (this._pauseInputChange) return;\n\n    this._pauseInputChange = true;\n\n    for (var i in this.typeaheads) {\n      this._padTypeahead(this.typeaheads[i]);\n    }\n\n    this._pauseInputChange = false;\n  };\n\n  /**\n   * Pad the typeahead input values.\n   * @param {Typeahead} typeahead\n   */\n\n\n  DateInput.prototype._padTypeahead = function _padTypeahead(typeahead) {\n\n    var value = typeahead.getValue();\n\n    if (value) {\n      var padded = (0, _pad2.default)(value, typeahead.typeahead.format.length);\n      if (value !== padded) typeahead.setValue((0, _pad2.default)(value, typeahead.typeahead.format.length));\n    }\n  };\n\n  /**\n   * Do any of the typeaheads have a value?\n   * @return {Boolean}\n   */\n\n\n  DateInput.prototype._hasTypeaheadValue = function _hasTypeaheadValue() {\n\n    for (var i in this.typeaheads) {\n      if (this.typeaheads[i].getValue(true)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  /**\n   * Validate select input values.\n   */\n\n\n  DateInput.prototype._validateSelects = function _validateSelects() {\n\n    if (!this.selects) {\n      return;\n    }\n\n    var month = this.selects.month ? this.selects.month.getValue(true) : null;\n    var year = this.selects.year ? this.selects.year.getValue(true) : null;\n\n    var maxDay = month && new Date(year !== null ? year : new Date().getFullYear(), month, 0).getDate() || this._getMaxDaysInMonth(month);\n    var day = this.selects.day ? this.selects.day.getValue(true) : null;\n\n    this.selects.day.setOptions({\n      max: maxDay\n    });\n    if (maxDay < day) {\n      this.selects.day.setValue(maxDay);\n    }\n\n    this.updateInput();\n  };\n\n  /**\n   * Get the maximum number of days for a given month.\n   * @param {Number} month The month's number. 1-12.\n   * @return {Number} The maximum number of days. 28-31.\n   */\n\n\n  DateInput.prototype._getMaxDaysInMonth = function _getMaxDaysInMonth(month) {\n    if (month === 2) return 29;else if ([4, 6, 9, 11].indexOf(month) !== -1) return 30;\n    return 31;\n  };\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because them.\n   */\n\n\n  DateInput.prototype._bindEventListenerCallbacks = function _bindEventListenerCallbacks() {\n    this._onTypeaheadBlurBound = this._onTypeaheadBlur.bind(this);\n    this._onTypeaheadInputBound = this._onTypeaheadInput.bind(this);\n    this._onTypeaheadFocusBound = this._onTypeaheadFocus.bind(this);\n    this._onPieceChangeBound = this._onPieceChange.bind(this);\n    this._onTypeaheadBackspaceBound = this._onTypeaheadBackspace.bind(this);\n    this._onTypeaheadEndBound = this._onTypeaheadEnd.bind(this);\n    this._onInputChangeBound = this._onInputChange.bind(this);\n    this._onVisibleChildrenBound = this._onVisibleChildren.bind(this);\n  };\n\n  /**\n   * Add event listeners.\n   */\n\n\n  DateInput.prototype._addEventListeners = function _addEventListeners() {\n    this.el.addEventListener('click', this._onClickBound);\n    this.inputEl.addEventListener('change', this._onInputChangeBound);\n    document.addEventListener('spark.visible-children', this._onVisibleChildrenBound, true);\n  };\n\n  /**\n   * Remove event listeners.\n   */\n\n\n  DateInput.prototype._removeEventListeners = function _removeEventListeners() {\n    this.el.removeEventListener('click', this._onClickBound);\n    this.inputEl.removeEventListener('change', this._onInputChangeBound);\n    document.removeEventListener('spark.visible-children', this._onVisibleChildrenBound, true);\n  };\n\n  /**\n   * Handle the spark.visible-children event\n   * @param {Object} e\n   */\n\n\n  DateInput.prototype._onVisibleChildren = function _onVisibleChildren(e) {\n    if (e.target.contains(this.el)) {\n      window.setTimeout(function () {\n        this.update();\n      }.bind(this), 0);\n    }\n  };\n\n  /**\n   * Run all typeaheads so they have placeholder values.\n   */\n\n\n  DateInput.prototype._runTypeaheads = function _runTypeaheads() {\n\n    // Make sure we don't get into an infinite loop. Even though the logic\n    // in the typeaheads should be stopping this from happening, there is\n    // something in Safari where the focus and blur events fire in different\n    // order than other browsers so those failsafes do not work.\n    if (this.runningTypeaheads) {\n      return;\n    }\n\n    this.runningTypeaheads = true;\n\n    if (this.inFocus) {\n      this.inFocus.pause();\n    }\n\n    for (var i in this.typeaheads) {\n      if (this.typeaheads[i] !== this.inFocus) {\n        this.typeaheads[i].run();\n      }\n    }\n\n    if (this.inFocus) {\n      this.inFocus.resume();\n      this.inFocus.run();\n    }\n\n    this.runningTypeaheads = false;\n  };\n\n  /**\n   * Update the active and focus classes.\n   */\n\n\n  DateInput.prototype._updateClass = function _updateClass() {\n    (0, _toggleClass2.default)(this.el, 'active', this.isActive);\n    (0, _toggleClass2.default)(this.el, 'has-partial-value', this.hasPartialValue());\n    (0, _toggleClass2.default)(this.el, 'focus', this.inFocus ? true : false);\n  };\n\n  /**\n   * Get the typeahead that corresponds to the given element.\n   * @param {Element} el\n   * @return {Object}\n   */\n\n\n  DateInput.prototype._getTypeaheadByElement = function _getTypeaheadByElement(el) {\n    for (var i in this.typeaheads) {\n      if (this.typeaheads[i].typeahead.el === el) {\n        return this.typeaheads[i];\n      }\n    }\n  };\n\n  /**\n   * Show the date as text.\n   */\n\n\n  DateInput.prototype._showDateText = function _showDateText() {\n\n    var text = this._getDateText();\n\n    if (!text || !this.showDateAsText) {\n      return;\n    }\n\n    if (!this.dateTextEl) {\n      this._createDateTextEl();\n    }\n\n    this.dateTextEl.innerHTML = text;\n    this.dateTextEl.style.display = '';\n  };\n\n  /**\n   * Hide the date as text.\n   */\n\n\n  DateInput.prototype._hideDateText = function _hideDateText() {\n\n    if (!this.showDateAsText || !this.dateTextEl) {\n      return;\n    }\n\n    this.dateTextEl.style.display = 'none';\n  };\n\n  /**\n   * Create the date text element.\n   */\n\n\n  DateInput.prototype._createDateTextEl = function _createDateTextEl() {\n\n    var el = document.createElement('div');\n    el.className = 'spark-input__overlay';\n    el.style.display = 'none';\n\n    this.el.appendChild(el);\n    this.dateTextEl = el;\n  };\n\n  /**\n   * Get the date as text.\n   */\n\n\n  DateInput.prototype._getDateText = function _getDateText() {\n\n    var parts = this.parsedTextFormat.parts;\n    var i = 0;\n    var len = parts.length;\n    var str = '';\n    var isValid = true;\n    var val;\n\n    for (; i < len; i++) {\n\n      val = this.typeaheads[parts[i].name] && this.typeaheads[parts[i].name].getValue();\n\n      switch (parts[i].name) {\n        case 'month':\n          str += _date2.default.getMonthNameShort(val);\n          if (!val) {\n            isValid = false;\n            break;\n          }\n          break;\n        case 'day':\n        case 'year':\n          str += val;\n          if (!val) {\n            isValid = false;\n            break;\n          }\n          break;\n        default:\n          str += parts[i].value;\n          break;\n      }\n    }\n\n    return isValid ? str : false;\n  };\n\n  /**\n   * When the value of a typeahead or select changes, validate.\n   * @param {Number} val\n   * @param {Object} typeahead\n   */\n\n\n  DateInput.prototype._onPieceChange = function _onPieceChange() {\n\n    this._validate();\n\n    if (this.isTypeahead && this.showDateAsText && !this._hasFocus) {\n\n      if (this._showTextTimer) {\n        clearTimeout(this._showTextTimer);\n      }\n\n      this._showTextTimer = setTimeout(function () {\n        this._showDateText();\n      }.bind(this), 0);\n    }\n  };\n\n  /**\n   * When the typeahead gains focus.\n   * @param {Number} val\n   * @param {Object} typeahead\n   */\n\n\n  DateInput.prototype._onTypeaheadFocus = function _onTypeaheadFocus(val, typeahead) {\n\n    if (this.runningTypeaheads) return;\n\n    this._hideDateText();\n\n    if (!this._hasFocus) {\n      this._hasFocus = true;\n      (this.onFocus || noop)(this.inputEl.value, this);\n    }\n\n    (0, _triggerEvent2.default)(this.inputEl, 'focus');\n    this.inFocus = typeahead;\n    this.show();\n    this._updateClass();\n\n    if (this._blurTimer) {\n      clearTimeout(this._blurTimer);\n      this._blurTimer = null;\n    }\n  };\n\n  /**\n   * When the typeahead loses focus, make sure numbers are padded properly.\n   * @param {Number} val\n   * @param {Object} typeahead\n   */\n\n\n  DateInput.prototype._onTypeaheadBlur = function _onTypeaheadBlur(val, typeahead) {\n\n    if (this.runningTypeaheads) return;\n\n    this.inFocus = null;\n\n    this._padTypeahead(typeahead);\n    this.updateInput();\n    this._updateClass();\n\n    if (!this.inputEl.value && !this._hasTypeaheadValue()) {\n      this.hide();\n    } else {\n      this._validateTypeaheadBounds();\n    }\n\n    this._blurTimer = setTimeout(function () {\n      this._hasFocus = false;\n      (this.onBlur || noop)(this.inputEl.value, this);\n      this._showDateText();\n    }.bind(this), 1);\n  };\n\n  /**\n   * `input` event callback for typeahead\n   */\n\n\n  DateInput.prototype._onTypeaheadInput = function _onTypeaheadInput() {\n    (this.onInput || noop)(this.getTypingValue(), this);\n  };\n\n  /**\n   * When the typeahead fires a backspace event, move back to the previous input.\n   * @param {Number} val\n   * @param {Object} typeahead\n   */\n\n\n  DateInput.prototype._onTypeaheadBackspace = function _onTypeaheadBackspace() {\n    this.focusPrevious();\n  };\n\n  /**\n   * When the typeahead is at its maximum length and the caret is at the end,\n   * focus on the next input field.\n   * @param {Object} typeahead\n   * @param {String} character Optional\n   */\n\n\n  DateInput.prototype._onTypeaheadEnd = function _onTypeaheadEnd(typeahead, character) {\n    this.focusNext(character);\n  };\n\n  /**\n   * When the input that corresponds to this instance changes. Allows us to listen\n   * and respond to changes made by other components (Calendar Popover, for example).\n   * @param {Object} e\n   */\n\n\n  DateInput.prototype._onInputChange = function _onInputChange(e) {\n\n    if (this.isTypeahead) {\n      this.isActive = e.target.value ? true : false;\n      this._updateClass();\n    }\n\n    if (this._pauseInputChange) return;\n    this.setValue(parsedDomFormat.getValues(e.target.value));\n    (this.onChange || noop)(this.inputEl.value, this);\n  };\n\n  /**\n   * When the input group is clicked, focus on the first typeahead\n   * if we don't already have focus.\n   * @todo : we should still replace the label on typeaheads and use this,\n   * but we need a way to focus on the closest element to a click.\n   * @param {Object} e\n   */\n\n\n  DateInput.prototype._onClick = function _onClick() /*e*/{\n\n    /*if (this.isTypeahead || this.inFocus || this.isActive || getParent(e.target, '.spark-input__addon')) {\n      return;\n    }\n     let input = this.typeaheadEls[0].querySelector('input');\n     if (input) {\n      input.focus();\n    }*/\n  };\n\n  return DateInput;\n}(_base2.default);\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nDateInput.prototype._whitelistedParams = ['validate', 'onValidate', 'onChange', 'onInput', 'onFocus', 'onBlur', 'isTypeahead', 'isSelect', 'format', 'textFormat', 'showDateAsText', 'min', 'max'];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nDateInput.prototype.defaults = {\n  el: null,\n  inputEl: null,\n  messageEl: null,\n  piecesEl: null,\n  toggleEl: null,\n  inFocus: null,\n  isActive: null,\n  isSelect: null,\n  isTypeahead: null,\n  typeaheads: null,\n  typeaheadEls: null,\n  selects: null,\n  selectEls: null,\n  format: null,\n  parsedFormat: null,\n  showDateAsText: null,\n  textFormat: null,\n  runningTypeaheads: false,\n  onValidate: null,\n  onChange: null,\n  onInput: null,\n  onFocus: null,\n  onBlur: null,\n  _hasFocus: false,\n  _pauseInputChange: false,\n  _onClickBound: null,\n  _onPieceChangeBound: null,\n  _onTypeaheadFocusBound: null,\n  _onTypeaheadBlurBound: null,\n  _onTypeaheadInputBound: null,\n  _onTypeaheadBackspaceBound: null,\n  _onTypeaheadEndBound: null,\n  _onInputChangeBound: null\n};\n\n(0, _mixin2.default)(DateInput.prototype, _messaging2.default, _validation2.default);\n\nexports.default = DateInput;\nmodule.exports = exports['default'];\n//# sourceMappingURL=date-input.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _selectInput = require('./select-input');\n\nvar _selectInput2 = _interopRequireDefault(_selectInput);\n\nvar _date = require('../helpers/date/date');\n\nvar _date2 = _interopRequireDefault(_date);\n\nvar _parseAttribute = require('../helpers/dom/parse-attribute');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\nateSelect\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Create a select list of days, months or years.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * new DateSelect(el);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module components/date-select.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar noop = function noop() {};\n\nfunction createDefaultElement() {\n  var el = document.createElement('span');\n  el.className = 'spark-select';\n  el.innerHTML = '<select class=\"spark-select__input\"></select><span class=\"spark-label\"></span>';\n  return el;\n}\n\nvar DateSelect = function (_BaseComponent) {\n  _inherits(DateSelect, _BaseComponent);\n\n  /**\n   * DateSelect constructor\n   * @param {Element} el Optional\n   * @param {Object} params Optional\n   */\n  function DateSelect(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, DateSelect);\n\n    // If the first argument is a plain object, create a default element\n    // since the user MUST provide additional params but the element\n    // is optional. Doing it this way to keep the arity the same\n    // as other components.\n    if (!(el instanceof HTMLElement)) {\n      params = el || {};\n      el = createDefaultElement();\n    }\n\n    var _this = _possibleConstructorReturn(this, _BaseComponent.call(this, el, params));\n\n    _this._bindEventListenerCallbacks();\n    _this._createSelect(el);\n    return _this;\n  }\n\n  /**\n   * Get the value.\n   * @param {Boolean} asInt Get the value as a parsed integer.\n   * @return {Mixed}\n   */\n\n\n  DateSelect.prototype.getValue = function getValue(asInt) {\n    return asInt ? parseInt(this.select.getValue(), 10) : this.select.getValue();\n  };\n\n  /**\n   * Set the value.\n   * @param {Mixed} val\n   */\n\n\n  DateSelect.prototype.setValue = function setValue(val) {\n    return this.select.setValue(val);\n  };\n\n  /**\n   * Clear the value.\n   */\n\n\n  DateSelect.prototype.clearValue = function clearValue() {\n    return this.select.clearValue();\n  };\n\n  /**\n   * Enable the input.\n   */\n\n\n  DateSelect.prototype.enable = function enable() {\n    return this.select.enable();\n  };\n\n  /**\n   * Disable the input.\n   */\n\n\n  DateSelect.prototype.disable = function disable() {\n    return this.select.disable();\n  };\n\n  /**\n   * Update the date select's options.\n   * @param {Object|Array} params\n   */\n\n\n  DateSelect.prototype.setOptions = function setOptions(params) {\n\n    params = params || {};\n\n    this.min = params.min || this.min;\n    this.max = params.max || this.max;\n    this.monthNames = params.monthNames || this.monthNames;\n    this.numericMonth = params.numericMonth || this.numericMonth;\n\n    if (this.type === 'year') {\n      if (params.min && !params.max) {\n        this.max = this.min + 100;\n      } else if (params.max && !params.min) {\n        this.min = this.max - 100;\n      }\n    }\n\n    var i = this.min ? this.min - 1 : 0;\n    var len = this.max || this.monthNames.length;\n    var opts = [{}];\n\n    for (; i < len; i++) {\n      opts.push({\n        value: i + 1,\n        text: this.monthNames ? this.monthNames[i] : i + 1\n      });\n    }\n\n    this.select.setOptions(opts);\n\n    return this;\n  };\n\n  /**\n   * Set the label text for the select input.\n   * @param {String} text Optional\n   */\n\n\n  DateSelect.prototype.setLabel = function setLabel(text) {\n    this.select.setLabel(text !== undefined ? text : this._getTypeText());\n    return this;\n  };\n\n  /**\n   * Create a select input helper.\n   * @param {Object} el\n   */\n\n\n  DateSelect.prototype._createSelect = function _createSelect(el) {\n\n    this.select = new _selectInput2.default(el, {\n      onChange: this._onSelectChangeBound,\n      onFocus: this._onSelectFocusBound,\n      onBlur: this._onSelectBlurBound\n    });\n\n    this.setOptions();\n    this.setLabel();\n\n    // Ensure we have an ARIA labelledby attribute\n    var select = el.querySelector('select');\n    if (select && !select.getAttribute('aria-labelledby')) {\n      var selectLabel = el.querySelector('.spark-label');\n      var labelID = 'spark-aria__' + this.ariaLabelPrefix + '--suffix-' + this.type;\n\n      if (selectLabel !== null && labelID !== null) {\n        selectLabel.setAttribute('id', labelID);\n        select.setAttribute('aria-labelledby', this.ariaLabelPrefix + ' ' + labelID);\n      }\n    }\n  };\n\n  /**\n   * Cache elements.\n   * @param {Element} el\n   */\n\n\n  DateSelect.prototype._cacheElements = function _cacheElements(el) {\n    this.el = el;\n    this.selectEl = this.el.querySelector('select');\n  };\n\n  /**\n   * Parse parameters from the elements.\n   */\n\n\n  DateSelect.prototype._parseParams = function _parseParams() {\n\n    this.type = this.type !== null ? this.type : (0, _parseAttribute.string)(this.selectEl, 'data-type', 'day');\n\n    this.ariaLabelPrefix = this.ariaLabelPrefix !== null ? this.ariaLabelPrefix : null;\n\n    if (this.type === 'year') {\n      var date = new Date();\n      this.min = this.min !== null ? this.min : (0, _parseAttribute.number)(this.selectEl, 'min', date.getFullYear() - 100);\n      this.max = this.max !== null ? this.max : (0, _parseAttribute.number)(this.selectEl, 'max', (this.min || date.getFullYear()) + 100);\n    } else if (this.type === 'month') {\n\n      this.monthNames = this.monthNames !== null ? this.monthNames : (0, _parseAttribute.string)(this.selectEl, 'data-month-names', null);\n      this.numericMonth = this.numericMonth !== null ? this.numericMonth : (0, _parseAttribute.boolean)(this.selectEl, 'data-numeric-month', false);\n      this.min = this.min !== null ? this.min : (0, _parseAttribute.number)(this.selectEl, 'min', null);\n      this.max = this.max !== null ? this.max : (0, _parseAttribute.number)(this.selectEl, 'max', null);\n\n      // No monthNames yet and no min or max\n      if (!this.monthNames && !this.numericMonth && !this.min && !this.max) {\n        this.monthNames = this._getDefaultMonthNames();\n      } else if (!this.min && !this.max) {\n        this.min = 1;\n        this.max = 12;\n      }\n\n      if (typeof this.monthNames === 'string') {\n        this.monthNames = this.monthNames.split(',');\n      }\n    } else {\n      this.min = this.min !== null ? this.min : (0, _parseAttribute.number)(this.selectEl, 'min', 1);\n      this.max = this.max !== null ? this.max : (0, _parseAttribute.number)(this.selectEl, 'max', 31);\n    }\n  };\n\n  /**\n   * Make a list of month options.\n   * @return {Array}\n   */\n\n\n  DateSelect.prototype._getDefaultMonthNames = function _getDefaultMonthNames() {\n    return _date2.default.getMonthNamesShort();\n  };\n\n  /**\n   * Get the text for this type of date select.\n   * @return {String}\n   */\n\n\n  DateSelect.prototype._getTypeText = function _getTypeText() {\n    return this.type.charAt(0).toUpperCase() + this.type.slice(1);\n  };\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n\n\n  DateSelect.prototype._bindEventListenerCallbacks = function _bindEventListenerCallbacks() {\n    this._onSelectChangeBound = this._onSelectChange.bind(this);\n    this._onSelectFocusBound = this._onSelectFocus.bind(this);\n    this._onSelectBlurBound = this._onSelectBlur.bind(this);\n  };\n\n  /**\n   * When the select changes, run the callback.\n   * @param {String} val The value of the input\n   */\n\n\n  DateSelect.prototype._onSelectChange = function _onSelectChange(val) {\n    (this.onChange || noop)(val, this);\n  };\n\n  /**\n   * When the select changes, run the callback.\n   * @param {String} val The value of the input\n   */\n\n\n  DateSelect.prototype._onSelectFocus = function _onSelectFocus(val) {\n    (this.onFocus || noop)(val, this);\n  };\n\n  /**\n   * When the select changes, run the callback.\n   * @param {String} val The value of the input\n   */\n\n\n  DateSelect.prototype._onSelectBlur = function _onSelectBlur(val) {\n    (this.onBlur || noop)(val, this);\n  };\n\n  return DateSelect;\n}(_base2.default);\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nDateSelect.prototype._whitelistedParams = ['type', 'ariaLabelPrefix', 'monthNames', 'numericMonth', 'min', 'max', 'onChange', 'onFocus', 'onBlur'];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nDateSelect.prototype.defaults = {\n  el: null,\n  selectEl: null,\n  type: null,\n  monthNames: null,\n  min: null,\n  max: null,\n  select: null,\n  numericMonth: null,\n  onChange: null,\n  onFocus: null,\n  onBlur: null,\n  _onChangeBound: null,\n  _onFocusBound: null,\n  _onBlurBound: null\n};\n\nexports.default = DateSelect;\nmodule.exports = exports['default'];\n//# sourceMappingURL=date-select.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _typeahead = require('./typeahead');\n\nvar _typeahead2 = _interopRequireDefault(_typeahead);\n\nvar _parseAttribute = require('../helpers/dom/parse-attribute');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\nateTypeahead\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Listen to an input element and format it as the user types.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * new DateTypeahead(el);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module components/date-typeahead.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar noop = function noop() {};\n\nfunction createDefaultElement() {\n  var el = document.createElement('span');\n  el.className = 'spark-input';\n  return el;\n}\n\nvar DateTypeahead = function (_BaseComponent) {\n  _inherits(DateTypeahead, _BaseComponent);\n\n  /**\n   * DateTypeahead constructor\n   * @param {Element} el Optional\n   * @param {Object} params Optional\n   */\n  function DateTypeahead(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, DateTypeahead);\n\n    // If only one arg passed, assume it was a parameters\n    // object since the user MUST provide those but the element\n    // is optional. Doing it this way to keep the arity the same\n    // as other components.\n    if (arguments.length < 2) {\n      params = el || {};\n      el = createDefaultElement();\n    }\n\n    var _this = _possibleConstructorReturn(this, _BaseComponent.call(this, el, params));\n\n    _this._bindEventListenerCallbacks();\n    _this._createTypeahead(el, params);\n    return _this;\n  }\n\n  /**\n   * Get the value.\n   * @param {Boolean} asInt Get the value as a parsed integer.\n   * @return {Mixed}\n   */\n\n\n  DateTypeahead.prototype.getValue = function getValue(asInt) {\n    return this.typeahead.getValue(asInt);\n  };\n\n  /**\n   * Set the value.\n   * @param {Mixed} val\n   */\n\n\n  DateTypeahead.prototype.setValue = function setValue(val) {\n    return this.typeahead.setValue(val);\n  };\n\n  /**\n   * Clear the value.\n   */\n\n\n  DateTypeahead.prototype.clearValue = function clearValue() {\n    return this.typeahead.clearValue();\n  };\n\n  /**\n   * Enable the input.\n   */\n\n\n  DateTypeahead.prototype.enable = function enable() {\n    return this.typeahead.enable();\n  };\n\n  /**\n   * Disable the input.\n   */\n\n\n  DateTypeahead.prototype.disable = function disable() {\n    return this.typeahead.disable();\n  };\n\n  /**\n   * Run the typeahead calculations.\n   */\n\n\n  DateTypeahead.prototype.run = function run() {\n    return this.typeahead.run();\n  };\n\n  /**\n   * Pause the typeahead events.\n   */\n\n\n  DateTypeahead.prototype.pause = function pause() {\n    return this.typeahead.pause();\n  };\n\n  /**\n   * Reseume typeahead events.\n   */\n\n\n  DateTypeahead.prototype.resume = function resume() {\n    return this.typeahead.resume();\n  };\n\n  /**\n   * Augment default remove call w/ helper cleanup.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n\n\n  DateTypeahead.prototype.remove = function remove(leaveElement) {\n    this.typeahead.remove(leaveElement);\n    _BaseComponent.prototype.remove.call(this, leaveElement);\n    return this;\n  };\n\n  /**\n   * Cache elements.\n   * @param {Element} el\n   */\n\n\n  DateTypeahead.prototype._cacheElements = function _cacheElements(el) {\n    this.el = el;\n  };\n\n  /**\n   * Parse parameters from the elements.\n   */\n\n\n  DateTypeahead.prototype._parseParams = function _parseParams() {\n\n    this.type = this.type !== null ? this.type : (0, _parseAttribute.string)(this.el, 'data-type', 'day');\n    this.format = this.format !== null ? this.format : (0, _parseAttribute.string)(this.el, 'data-format', null);\n    this.placeholder = this.placeholder !== null ? this.placeholder : (0, _parseAttribute.string)(this.el, 'data-placeholder', null);\n    this.len = this.len !== null ? this.len : (0, _parseAttribute.number)(this.el, 'length', null);\n    this.ariaLabelPrefix = this.ariaLabelPrefix !== null ? this.ariaLabelPrefix : null;\n\n    if (!this.placeholder) {\n      throw new Error('You must provide a placeholder value for a DateTypeahead.');\n    }\n\n    if (this.len !== null) {\n      this.format = this._lengthToFormat(this.len);\n    }\n\n    if (!this.format) {\n      throw new Error('You must provide a format value for a DateTypeahead.');\n    }\n  };\n\n  /**\n   * Create a typeahead with the given format.\n   * @param {Object} el\n   */\n\n\n  DateTypeahead.prototype._createTypeahead = function _createTypeahead(el) {\n\n    this.typeahead = new _typeahead2.default(el, {\n      placeholder: this.placeholder,\n      format: this.format,\n      matchPlaceholderSize: true,\n      onChange: this._onTypeaheadChangeBound,\n      onInput: this._onTypeaheadInputBound,\n      onFocus: this._onTypeaheadFocusBound,\n      onBlur: this._onTypeaheadBlurBound,\n      onBackspace: this._onTypeaheadBackspaceBound,\n      onEnd: this._onTypeaheadEndBound\n    });\n\n    // Ensure we have an ARIA label\n    var input = el.querySelector('input');\n    if (input && !input.getAttribute('aria-label')) {\n      input.setAttribute('aria-label', this.ariaLabelPrefix + ' ' + this.type);\n    }\n  };\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n\n\n  DateTypeahead.prototype._bindEventListenerCallbacks = function _bindEventListenerCallbacks() {\n    this._onTypeaheadChangeBound = this._onTypeaheadChange.bind(this);\n    this._onTypeaheadInputBound = this._onTypeaheadInput.bind(this);\n    this._onTypeaheadFocusBound = this._onTypeaheadFocus.bind(this);\n    this._onTypeaheadBlurBound = this._onTypeaheadBlur.bind(this);\n    this._onTypeaheadBackspaceBound = this._onTypeaheadBackspace.bind(this);\n    this._onTypeaheadEndBound = this._onTypeaheadEnd.bind(this);\n  };\n\n  /**\n   * Take a length and return a format string with that many digits.\n   * @param {Number} length\n   * @return {String}\n   */\n\n\n  DateTypeahead.prototype._lengthToFormat = function _lengthToFormat(length) {\n\n    var i = 0;\n    var ret = '';\n\n    for (; i < length; i++) {\n      ret += '\\\\d';\n    }\n\n    return ret;\n  };\n\n  /**\n   * Check to see if an input value is valid.\n   * @param {Mixed} val\n   * @param {Boolean} allowEmpty All the value to be empty instead of 0.\n   */\n\n\n  DateTypeahead.prototype._checkValidity = function _checkValidity(val, allowEmpty) {\n\n    val = parseInt(val, 10);\n\n    var origVal = val;\n    var isNumber = !isNaN(val);\n\n    // If we were passed an empty string or something, don't try to validate.\n    // Treat zeros as a non-entry for days and months.\n    if (isNumber) {\n\n      if (this.type === 'year') {\n        val = val === 0 ? allowEmpty ? '' : 0 : Math.max(val, 0);\n      } else if (this.type === 'month') {\n        val = val ? Math.min(Math.max(val, 1), 12) : allowEmpty ? '' : 0;\n      } else {\n        val = val ? Math.min(Math.max(val, 1), 31) : allowEmpty ? '' : 0;\n      }\n    }\n\n    // Need to make sure we aren't looping forever on these updates.\n    if (isNumber && val !== origVal) {\n      this.typeahead.setValue(val + '');\n      return false;\n    }\n\n    return true;\n  };\n\n  /**\n   * When the typeahead changes, make sure the value is valid. This\n   * is very basic validation. More complex validation like the number\n   * of days in a specific month should be handled by the callback.\n   * And run our callback.\n   * @param {String} val The value of the input\n   * @param {String} oldVal The previous value\n   */\n\n\n  DateTypeahead.prototype._onTypeaheadChange = function _onTypeaheadChange(val) {\n    if (this._checkValidity(val)) {\n      (this.onChange || noop)(val, this);\n    }\n  };\n\n  /**\n   * Callback for `input` event\n   * @param {String} val The value of the input\n   * @param {String} oldVal The previous value\n   *\n   */\n\n\n  DateTypeahead.prototype._onTypeaheadInput = function _onTypeaheadInput(val) {\n    (this.onInput || noop)(val, this);\n  };\n\n  /**\n   * When the typeahead gains focus, let anyone who is interested know.\n   * @param {String} val\n   */\n\n\n  DateTypeahead.prototype._onTypeaheadFocus = function _onTypeaheadFocus(val) {\n    (this.onFocus || noop)(val, this);\n  };\n\n  /**\n   * When the typeahead loses focus, let anyone who is interested know.\n   * @param {String} val\n   */\n\n\n  DateTypeahead.prototype._onTypeaheadBlur = function _onTypeaheadBlur(val) {\n    this._checkValidity(val, true);\n    (this.onBlur || noop)(val, this);\n  };\n\n  /**\n   * When the typeahead fires a backspace event because it's empty and\n   * the user is hitting backspace, let anyone who is interested know.\n   * @param {String} val\n   */\n\n\n  DateTypeahead.prototype._onTypeaheadBackspace = function _onTypeaheadBackspace(val) {\n    (this.onBackspace || noop)(val, this);\n  };\n\n  /**\n   * When the typeahead is full and at its end, let anyone who is interested know.\n   * @param {Object} typeahead\n   * @param {String} character Optional The character to pass to the next input.\n   */\n\n\n  DateTypeahead.prototype._onTypeaheadEnd = function _onTypeaheadEnd(typeahead, character) {\n    (this.onEnd || noop)(this, character);\n  };\n\n  return DateTypeahead;\n}(_base2.default);\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nDateTypeahead.prototype._whitelistedParams = ['type', 'format', 'ariaLabelPrefix', 'placeholder', 'len', 'onChange', 'onInput', 'onFocus', 'onBlur', 'onBackspace', 'onEnd'];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nDateTypeahead.prototype.defaults = {\n  el: null,\n  type: null,\n  ariaLabelPrefix: null,\n  typeahead: null,\n  format: null,\n  placeholder: null,\n  len: null,\n  onChange: null,\n  onInput: null,\n  onFocus: null,\n  onBlur: null,\n  onBackspace: null,\n  onEnd: null,\n  _onTypeaheadChangeBound: null,\n  _onTypeaheadInputBound: null,\n  _onTypeaheadFocusBound: null,\n  _onTypeaheadBlurBound: null,\n  _onTypeaheadBackspaceBound: null,\n  _onTypeaheadEndBound: null\n};\n\nexports.default = DateTypeahead;\nmodule.exports = exports['default'];\n//# sourceMappingURL=date-typeahead.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _toggleClass = require('../helpers/dom/toggle-class');\n\nvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\nvar _mixin = require('../helpers/util/mixin');\n\nvar _mixin2 = _interopRequireDefault(_mixin);\n\nvar _messaging = require('../mixins/messaging');\n\nvar _messaging2 = _interopRequireDefault(_messaging);\n\nvar _validation = require('../mixins/validation');\n\nvar _validation2 = _interopRequireDefault(_validation);\n\nvar _makeElement = require('../helpers/dom/make-element');\n\nvar _makeElement2 = _interopRequireDefault(_makeElement);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\nelectInput\nselect input container.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * new SelectInput(el);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module components/select-input.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar noop = function noop() {};\n\nvar SelectInput = function (_BaseComponent) {\n  _inherits(SelectInput, _BaseComponent);\n\n  /**\n   * SelectInput constructor.\n   * @param {Element} el\n   * @param {Object} params\n   */\n  function SelectInput(el) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, SelectInput);\n\n    params.elRequired = true;\n\n    if (!(_this = _possibleConstructorReturn(this, _BaseComponent.call(this, el, params)), _this)) {\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this._bindEventListenerCallbacks();\n    _this._addEventListeners();\n    return _possibleConstructorReturn(_this);\n  }\n\n  /**\n   * Get the value.\n   * @return {String}\n   */\n\n\n  SelectInput.prototype.getValue = function getValue() {\n    return this.selectEl.value;\n  };\n\n  /**\n   * Set the value.\n   * @param {String|Number} val\n   */\n\n\n  SelectInput.prototype.setValue = function setValue(val) {\n\n    // Cast to a string for comparison\n    val = val + '';\n\n    var i = 0;\n    var len = this.selectEl.children.length;\n\n    for (; i < len; i++) {\n      if (this.selectEl.children[i].value === val) {\n        this.selectEl.children[i].selected = true;\n        this._updateClass();\n        (this.onChange || noop)(val, this);\n        return this;\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Clear the selected value.\n   */\n\n\n  SelectInput.prototype.clearValue = function clearValue() {\n\n    var i = 0;\n    var len = this.selectEl.children.length;\n\n    for (; i < len; i++) {\n      if (this.selectEl.children[i].selected === true) {\n        this.selectEl.children[i].selected = false;\n        this._updateClass();\n        (this.onChange || noop)('', this);\n        return this;\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Set the options.\n   * @param {Array} opts\n   */\n\n\n  SelectInput.prototype.setOptions = function setOptions(opts) {\n\n    var i = 0;\n    var len = opts.length;\n    var str = '';\n\n    // Store the index of the currently selected option so we can set\n    // it when we're all done.\n    var curIndex = this.selectEl.selectedIndex;\n\n    for (; i < len; i++) {\n      str += '<option ' + (opts[i].value !== undefined ? 'value=\"' + (opts[i].value || '') + '\"' : '') + '>' + (opts[i].text || '') + '</option>';\n    }\n\n    this.selectEl.innerHTML = str;\n    this.selectEl.selectedIndex = Math.min(len - 1, curIndex);\n\n    return this;\n  };\n\n  /**\n   * Set the value of the label.\n   * @param {String} text\n   */\n\n\n  SelectInput.prototype.setLabel = function setLabel(text) {\n    if (!this.labelEl) return this;\n    this.labelEl.innerHTML = text;\n    return this;\n  };\n\n  /**\n   * Disable entry into the input.\n   */\n\n\n  SelectInput.prototype.disable = function disable() {\n    this.selectEl.setAttribute('disabled', '');\n    return this;\n  };\n\n  /**\n   * Enable entry into the input.\n   */\n\n\n  SelectInput.prototype.enable = function enable() {\n    this.selectEl.removeAttribute('disabled');\n    return this;\n  };\n\n  /**\n   * Store a reference to the needed elements.\n   * @param {Element} el\n   */\n\n\n  SelectInput.prototype._cacheElements = function _cacheElements(el) {\n\n    this.el = el;\n    this.selectEl = this.el.querySelector('select');\n    this.labelEl = this.el.querySelector('.spark-label');\n\n    this.messageEl = this.el.querySelector('.spark-select__message') || (0, _makeElement2.default)('<span class=\"spark-select__message\"></span>');\n\n    if (!this.selectEl) {\n      throw new Error('A <select> element must be present!', this.el);\n    }\n\n    this._updateClass();\n  };\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n\n\n  SelectInput.prototype._bindEventListenerCallbacks = function _bindEventListenerCallbacks() {\n    this._onFocusBound = this._onFocus.bind(this);\n    this._onBlurBound = this._onBlur.bind(this);\n    this._onInputBound = this._onInput.bind(this);\n  };\n\n  /**\n   * Add event listeners for focus, blur and input.\n   */\n\n\n  SelectInput.prototype._addEventListeners = function _addEventListeners() {\n    this.selectEl.addEventListener('focus', this._onFocusBound);\n    this.selectEl.addEventListener('blur', this._onBlurBound);\n    this.selectEl.addEventListener('input', this._onInputBound);\n  };\n\n  /**\n   * Remove event listeners for focus, blur and input.\n   */\n\n\n  SelectInput.prototype._removeEventListeners = function _removeEventListeners() {\n    this.selectEl.removeEventListener('focus', this._onFocusBound);\n    this.selectEl.removeEventListener('blur', this._onBlurBound);\n    this.selectEl.removeEventListener('input', this._onInputBound);\n  };\n\n  /**\n   * Update the active class.\n   */\n\n\n  SelectInput.prototype._updateClass = function _updateClass() {\n    this.hasValue = this.selectEl.value ? true : false;\n    (0, _toggleClass2.default)(this.el, 'has-value', this.hasValue);\n    (0, _toggleClass2.default)(this.el, 'active', this.isActive);\n  };\n\n  /**\n   * When the input element gains focus.\n   * @param {Object} e\n   */\n\n\n  SelectInput.prototype._onFocus = function _onFocus() {\n    this.isActive = true;\n    this._updateClass();\n    var value = this.getValue();\n    (this.onFocus || noop)(value, this);\n  };\n\n  /**\n   * When the input element loses focus.\n   * @param {Object} e\n   */\n\n\n  SelectInput.prototype._onBlur = function _onBlur() {\n    this.isActive = false;\n    this._updateClass();\n    var value = this.getValue();\n    (this.onBlur || noop)(value, this);\n  };\n\n  /**\n   * When the value is about to change, run the validation, set the characters count\n   * and resize if we're a textarea.\n   * @param {Object} e\n   */\n\n\n  SelectInput.prototype._onInput = function _onInput() {\n\n    this._updateClass();\n\n    var value = this.getValue();\n\n    if (value !== this.previousValue) {\n      this.previousValue = value;\n      (this.onChange || noop)(value, this);\n    }\n  };\n\n  return SelectInput;\n}(_base2.default);\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nSelectInput.prototype._whitelistedParams = ['validate', 'onValidate', 'onChange', 'onFocus', 'onBlur'];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nSelectInput.prototype.defaults = {\n  el: null,\n  messageEl: null,\n  selectEl: null,\n  labelEl: null,\n  hasValue: false,\n  isActive: false,\n  onChange: null,\n  onFocus: null,\n  onBlur: null,\n  previousValue: null,\n  _onFocusBound: null,\n  _onBlurBound: null,\n  _onInputBound: null\n};\n\n(0, _mixin2.default)(SelectInput.prototype, _messaging2.default, _validation2.default);\n\nexports.default = SelectInput;\nmodule.exports = exports['default'];\n//# sourceMappingURL=select-input.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _triggerEvent = require('../helpers/dom/trigger-event');\n\nvar _triggerEvent2 = _interopRequireDefault(_triggerEvent);\n\nvar _parseAttribute = require('../helpers/dom/parse-attribute');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\nypeahead\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Listen to an input element and format it as the user types.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * new Typeahead(el);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module components/typeahead.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar noop = function noop() {};\n\nvar Typeahead = function (_BaseComponent) {\n  _inherits(Typeahead, _BaseComponent);\n\n  /**\n   * Typeahead constructor\n   * @param {Element} el\n   * @param {Object} params\n   */\n  function Typeahead(el) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Typeahead);\n\n    params.elRequired = true;\n\n    if (!(_this = _possibleConstructorReturn(this, _BaseComponent.call(this, el, params)), _this)) {\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this._maintainFocus(function () {\n      this._parseParams();\n      this._bindEventListenerCallbacks();\n      this._addEventListeners();\n    });\n    return _possibleConstructorReturn(_this);\n  }\n\n  /**\n   * Run the formatting.\n   * @param {Number} cursorIndex\n   */\n\n\n  Typeahead.prototype.run = function run(cursorIndex) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\n    if (this.isRunning) return this;\n\n    this.isRunning = true;\n\n    var oldVal = this.inputEl.value;\n    var val = '';\n    var placeholder = '';\n    var i = 0;\n    var len = this.format.length;\n    var skipCount = 0;\n    var valDone = false;\n\n    for (; i < len; i++) {\n\n      // Add numbers\n      if (this.format[i] === '\\\\d') {\n\n        if (this.characters[i - skipCount]) {\n          val += this.characters[i - skipCount];\n        } else {\n          valDone = true;\n        }\n\n        placeholder += valDone ? this.placeholder[i] : '&nbsp;';\n      }\n      // Placeholder characters\n      else {\n\n          if (!valDone) {\n            val += this.format[i];\n          }\n\n          placeholder += this.format[i];\n\n          skipCount++;\n        }\n    }\n\n    if (this.isFocused) {\n      cursorIndex = cursorIndex === undefined ? this._getCaretEnd() : cursorIndex;\n    }\n\n    // If there are no characters, set the cursorIndex to be the last placeholder entry.\n    if (this.isFocused && !this.characters.length) {\n      cursorIndex = val.length;\n    }\n\n    // No characters and we shouldn't use just placeholder values\n    if (!this.characters.length && params.notOnlyPlaceholders) {\n      val = '';\n    }\n\n    this.inputEl.value = val;\n    this.placeholderEl.innerHTML = placeholder;\n\n    this._updateWidth();\n\n    if (this.isFocused) {\n      this._setCaretPositionTranslated(cursorIndex);\n    }\n\n    if (val !== oldVal) {\n      (0, _triggerEvent2.default)(this.inputEl, 'input');\n    }\n\n    this.isRunning = false;\n\n    if (val !== oldVal) {\n      (this.onChange || noop)(val, oldVal, this);\n    }\n\n    if (!this._atEnd && this.isFocused && this.characters.length === this.maxLength && this._caretIsAtEnd()) {\n      this._atEnd = true;\n      (this.onEnd || noop)(this);\n    } else {\n      this._atEnd = false;\n    }\n\n    return this;\n  };\n\n  /**\n   * Add a character to the characters array at a given index.\n   * @param {String} character\n   * @param {Number} start\n   * @param {Number} end\n   * @param {Boolean} skipCheck\n   */\n\n\n  Typeahead.prototype.addCharacterAtIndex = function addCharacterAtIndex(character, start, end, skipCheck) {\n\n    // Don't add at an index beyond what we can support.\n    if (this.maxLength && start >= this.maxLength) {\n      return this;\n    }\n\n    if (!skipCheck) {\n\n      var re;\n\n      // Try to build a regex for this format character.\n      try {\n        re = new RegExp(this.format[start]);\n      } catch (e) {\n        //\n      }\n\n      if (!re || !re.exec(character)) {\n        return this;\n      }\n    }\n\n    this.characters.splice(start, end - start, character);\n\n    // If we've added at an index that pushes the length beyond what we support,\n    // remove the trailing characters.\n    if (this.maxLength && this.characters.length > this.maxLength) {\n      this.characters.splice(this.maxLength, this.characters.length);\n    }\n\n    this.run(start + 1);\n\n    return this;\n  };\n\n  /**\n   * Add a character at the position of the caret.\n   * @param {String} character\n   */\n\n\n  Typeahead.prototype.addCharacterAtCaret = function addCharacterAtCaret(character) {\n\n    var pos = this._getCaretStart();\n    var re;\n\n    // If we're beyond the bounds of the format, stop.\n    if (this.format[pos] === undefined) {\n      (this.onEnd || noop)(this, character);\n      return this;\n    }\n\n    // Try to build a regex for this format character.\n    try {\n      re = new RegExp(this.format[pos]);\n    } catch (e) {}\n    //\n\n\n    // We couldn't build a regex (so it's invalid) or the regex failed (so it's invalid)\n    if (!re || !re.exec(character)) {\n      if (this._moveCaret('right')) {\n        this.addCharacterAtCaret(character);\n      }\n      return this;\n    }\n\n    this.addCharacterAtIndex(character, this._getCaretStartTranslated(), this._getCaretEndTranslated(), true);\n\n    return this;\n  };\n\n  /**\n   * Remove a character from the character array by index.\n   * @param {Number} index\n   * @param {Number} length Optional\n   * @param {Number} offset Optional\n   */\n\n\n  Typeahead.prototype.removeCharacterAtIndex = function removeCharacterAtIndex(index, length, offset) {\n\n    // Don't want a negative splice length or else we start\n    // removing characters from the end.\n    if (index + offset < 0) {\n      return this;\n    }\n\n    length = length !== undefined ? length : 1;\n    this.characters.splice(index + offset, length);\n    this.run(index + (offset || 1));\n\n    return this;\n  };\n\n  /**\n   * Remove the character at the caret.\n   * @param {Number} offset Optional An offset from the current position.\n   */\n\n\n  Typeahead.prototype.removeCharacterAtCaret = function removeCharacterAtCaret(offset) {\n\n    var start = this._getCaretStartTranslated();\n    var end = this._getCaretEndTranslated();\n    var length = 1;\n    var tmp;\n\n    if (start !== end) {\n\n      // If the end is less than the start, the user dragged from right to left.\n      // Just swap them to make it easier to handle.\n      if (end < start) {\n        tmp = start;\n        start = end;\n        end = tmp;\n      }\n\n      // The length of characters removed\n      length = end - start;\n\n      // Bump the start position @todo: haven't thought through why this is, but it's needed.\n      start++;\n    }\n\n    this.removeCharacterAtIndex(start, length, offset);\n\n    return this;\n  };\n\n  /**\n   * Remove the character in the current range.\n   */\n\n\n  Typeahead.prototype.removeCharactersInRange = function removeCharactersInRange() {\n    this.removeCharacterAtIndex(this._getCaretStartTranslated(), this._getCaretEndTranslated());\n    return this;\n  };\n\n  /**\n   * Set the value of the typeahead. Maintain the position of the caret.\n   * @param {String} value\n   */\n\n\n  Typeahead.prototype.setValue = function setValue(value) {\n\n    this.settingValue = true;\n    this.pause();\n\n    this.characters = (value + '').split('');\n    this.run();\n\n    if (this.isFocused) this._setCaretPosition(this._getCaretStart());\n\n    this.resume();\n    this.settingValue = false;\n\n    return this;\n  };\n\n  /**\n   * Get the value of the typeahead.\n   * @param {Boolean} asInt Get the value as a parsed integer.\n   * @return {String|Number}\n   */\n\n\n  Typeahead.prototype.getValue = function getValue(asInt) {\n    return asInt && this.inputEl.value ? parseInt(this.inputEl.value, 10) : this.inputEl.value;\n  };\n\n  /**\n   * Clear the selected value.\n   */\n\n\n  Typeahead.prototype.clearValue = function clearValue() {\n    this.pause();\n    this.characters = [];\n    this.run(0, { notOnlyPlaceholders: true });\n    return this.resume();\n  };\n\n  /**\n   * Take the date values from the inputs and set them as dates on the calendar.\n   */\n\n\n  Typeahead.prototype.updateValue = function updateValue() {\n    return this.setValue(this.inputEl.value);\n  };\n\n  /**\n   * Move the caret position.\n   * @param {Number} pos\n   */\n\n\n  Typeahead.prototype.moveCaret = function moveCaret(pos) {\n    this._setCaretPositionTranslated(pos);\n    return this;\n  };\n\n  /**\n   * Move the caret to the end of the input.\n   */\n\n\n  Typeahead.prototype.moveCaretToEnd = function moveCaretToEnd() {\n    return this.moveCaret(this.characters.length);\n  };\n\n  /**\n   * Move the caret to the start of the input.\n   */\n\n\n  Typeahead.prototype.moveCaretToStart = function moveCaretToStart() {\n    return this.moveCaret(0);\n  };\n\n  /**\n   * Pause events.\n   */\n\n\n  Typeahead.prototype.pause = function pause() {\n    this.pauseBlurFocus++;\n    return this;\n  };\n\n  /**\n   * Resume events.\n   */\n\n\n  Typeahead.prototype.resume = function resume() {\n    this.pauseBlurFocus--;\n    return this;\n  };\n\n  /**\n   * Disable entry into the input.\n   */\n\n\n  Typeahead.prototype.disable = function disable() {\n    this.inputEl.setAttribute('disabled', '');\n    return this;\n  };\n\n  /**\n   * Enable entry into the input.\n   */\n\n\n  Typeahead.prototype.enable = function enable() {\n    this.inputEl.removeAttribute('disabled');\n    return this;\n  };\n\n  /**\n   * Clear the value.\n   * Changed to clearValue in v2.0.0.\n   */\n\n\n  Typeahead.prototype.clear = function clear() {\n    return this.clearValue();\n  };\n\n  /**\n   * Augment default remove call w/ helper cleanup.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n\n\n  Typeahead.prototype.remove = function remove(leaveElement) {\n    _BaseComponent.prototype.remove.call(this, leaveElement);\n    return this;\n  };\n\n  /**\n   * Store a reference to the needed elements.\n   * @param {Object} el\n   */\n\n\n  Typeahead.prototype._cacheElements = function _cacheElements(el) {\n    this.el = el;\n    this.inputEl = this.el.querySelector('[type=\"text\"], [type=\"email\"], [type=\"phone\"], textarea') || this._createDefaultInputElement();\n    this.placeholderEl = this.el.querySelector('.spark-input__placeholder') || this._createDefaultPlaceholderElement();\n  };\n\n  /**\n   * Parse parameters from the elements.\n   */\n\n\n  Typeahead.prototype._parseParams = function _parseParams() {\n\n    // Store the value characters\n    this.characters = this._parseCharacters(this.inputEl.value);\n\n    // Store format\n    this.format = this._parseFormat(this.format ? this.format : this.inputEl.getAttribute('data-typeahead-format'));\n\n    // Store the original placeholder\n    this.placeholder = this.placeholder ? this.placeholder : this.inputEl.getAttribute('placeholder').split('');\n\n    // Get the total number of characters we can have\n    this.maxLength = this._getCharactersAllowedCount(this.format);\n\n    this.matchPlaceholderSize = this.matchPlaceholderSize !== null ? this.matchPlaceholderSize : (0, _parseAttribute.boolean)(this.inputEl, 'data-match-placeholder-size', false);\n  };\n\n  /**\n   * Parse the format string into an array.\n   * @param  {String} format\n   * @return {Array}\n   */\n\n\n  Typeahead.prototype._parseFormat = function _parseFormat(format) {\n\n    var i = 0;\n    var len = format.length;\n    var arr = [];\n    var lastWasEscape = false;\n\n    for (; i < len; i++) {\n      if (format[i] === '\\\\' && !lastWasEscape) {\n        lastWasEscape = true;\n      } else {\n        arr.push((lastWasEscape ? '\\\\' : '') + format[i]);\n        lastWasEscape = false;\n      }\n    }\n\n    return arr;\n  };\n\n  /**\n   * Parse the characters string into an array, ignoring characters which don't\n   * match the format requirements.\n   * @param {String} characters\n   * @return {Array}\n   */\n\n\n  Typeahead.prototype._parseCharacters = function _parseCharacters(characters) {\n\n    var chars = characters.split('');\n    var i = 0;\n    var len = characters.length;\n    var regexes = [];\n    var arr = [];\n\n    for (; i < len; i++) {\n\n      // Try to build a regex for this format character.\n      try {\n        // Make sure this format starts with an escape character.\n        regexes[i] = this.format[i][0] === '\\\\' ? new RegExp(this.format[i]) : null;\n      } catch (e) {}\n      //\n\n\n      // If we were able to create a regex and our char passes, add it to the array\n      // of characters to return.\n      if (regexes[i] && regexes[i].exec(chars[i])) {\n        arr.push(chars[i]);\n      }\n    }\n\n    return arr;\n  };\n\n  /**\n   * Create the default input element.\n   * @return {Element}\n   */\n\n\n  Typeahead.prototype._createDefaultInputElement = function _createDefaultInputElement() {\n\n    var el = document.createElement('input');\n    el.className = 'spark-input__field';\n    el.setAttribute('data-typeahead', '');\n    el.setAttribute('type', 'tel');\n\n    this.el.appendChild(el);\n\n    return el;\n  };\n\n  /**\n   * Create the default input element.\n   * @return {Element}\n   */\n\n\n  Typeahead.prototype._createDefaultPlaceholderElement = function _createDefaultPlaceholderElement() {\n    var el = document.createElement('span');\n    el.className = 'spark-input__placeholder';\n    this.el.appendChild(el);\n    return el;\n  };\n\n  /**\n   * Get the maximum number of characters allowed.\n   * @param {Array} format\n   * @return {Number}\n   */\n\n\n  Typeahead.prototype._getCharactersAllowedCount = function _getCharactersAllowedCount(format) {\n\n    var i = 0;\n    var len = format.length;\n    var allowed = 0;\n\n    for (; i < len; i++) {\n      if (format[i] === '\\\\d') {\n        allowed++;\n      }\n    }\n\n    return allowed;\n  };\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n\n\n  Typeahead.prototype._bindEventListenerCallbacks = function _bindEventListenerCallbacks() {\n    this._onKeydownBound = this._onKeydown.bind(this);\n    this._onKeypressBound = this._onKeypress.bind(this);\n    this._onFocusBound = this._onFocus.bind(this);\n    this._onBlurBound = this._onBlur.bind(this);\n    this._onPlaceholderClickBound = this._onPlaceholderClick.bind(this);\n  };\n\n  /**\n   * Add event listeners to keypress and keydown.\n   */\n\n\n  Typeahead.prototype._addEventListeners = function _addEventListeners() {\n    this.inputEl.addEventListener('keydown', this._onKeydownBound, false);\n    this.inputEl.addEventListener('keypress', this._onKeypressBound, false);\n    this.inputEl.addEventListener('focus', this._onFocusBound, false);\n    this.placeholderEl.addEventListener('click', this._onPlaceholderClickBound, false);\n  };\n\n  /**\n   * Add event listeners to keypress and keydown.\n   */\n\n\n  Typeahead.prototype._removeEventListeners = function _removeEventListeners() {\n\n    this.inputEl.removeEventListener('keydown', this._onKeydownBound);\n    this.inputEl.removeEventListener('keypress', this._onKeypressBound);\n    this.inputEl.removeEventListener('focus', this._onFocusBound);\n    this.placeholderEl.removeEventListener('click', this._onPlaceholderClickBound);\n\n    window.removeEventListener('blur', this._onBlurBound);\n    this.inputEl.removeEventListener('blur', this._onBlurBound);\n  };\n\n  /**\n   * Get the position of the caret in the element.\n   * @return {Number} The index\n   */\n\n\n  Typeahead.prototype._getCaretStart = function _getCaretStart() {\n\n    return this._maintainFocus(function () {\n\n      var caretPosition;\n\n      // IE support\n      if (document.selection) {\n        this.inputEl.focus();\n        var sel = document.selection.createRange();\n        sel.moveStart('character', -this.inputEl.value.length);\n        caretPosition = sel.text.length;\n      } else if (this.inputEl.selectionStart || this.inputEl.selectionStart === 0) {\n        caretPosition = this.inputEl.selectionStart;\n      }\n\n      return caretPosition;\n    });\n  };\n\n  /**\n   * Get the end position of the caret in the element.\n   * @return {Number} The index\n   */\n\n\n  Typeahead.prototype._getCaretEnd = function _getCaretEnd() {\n\n    return this._maintainFocus(function () {\n\n      var caretPosition;\n\n      // IE support\n      if (document.selection) {\n        this.inputEl.focus();\n        var sel = document.selection.createRange();\n        sel.moveStart('character', -this.inputEl.value.length);\n        caretPosition = sel.text.length;\n      } else if (this.inputEl.selectionEnd || this.inputEl.selectionEnd === 0) {\n        caretPosition = this.inputEl.selectionEnd;\n      }\n\n      return caretPosition;\n    });\n  };\n\n  /**\n   * Is the caret at the end of the input?\n   * @return {Boolean}\n   */\n\n\n  Typeahead.prototype._caretIsAtEnd = function _caretIsAtEnd() {\n    return this._getCaretStart() === this.maxLength;\n  };\n\n  /**\n   * Set the position of the caret in the element.\n   * @return {Number} The index\n   */\n\n\n  Typeahead.prototype._setCaretPosition = function _setCaretPosition(pos) {\n\n    return this._maintainFocus(function () {\n\n      // IE support\n      if (document.selection) {\n        this.inputEl.focus();\n        var sel = document.selection.createRange();\n        sel.moveStart('character', -this.inputEl.value.length);\n        sel.moveStart('character', pos);\n        sel.moveEnd('character', 0);\n        sel.select();\n      } else if (this.inputEl.selectionStart || this.inputEl.selectionStart === 0) {\n        this.inputEl.selectionStart = pos;\n        this.inputEl.selectionEnd = pos;\n      }\n    });\n  };\n\n  /**\n   * Get the position of the caret translated to the corresponding index in the\n   * characters array. This means ignoring format characters.\n   * @param {Number} pos\n   * @return {Number}\n   */\n\n\n  Typeahead.prototype._getCaretPositionTranslated = function _getCaretPositionTranslated(pos) {\n\n    var i = 0;\n    var skipCount = 0;\n\n    for (; i < pos; i++) {\n\n      // Count non-numbers as a skip.\n      // @todo: this needs to work with more than numbers.\n      if (this.format[i] !== '\\\\d') {\n        skipCount++;\n      }\n    }\n\n    return pos - skipCount;\n  };\n\n  /**\n   * Get the starting position of the caret translated.\n   * @return {Number}\n   */\n\n\n  Typeahead.prototype._getCaretStartTranslated = function _getCaretStartTranslated() {\n    return this._getCaretPositionTranslated(this._getCaretStart());\n  };\n\n  /**\n   * Get the ending position of the caret translated.\n   * @return {Number}\n   */\n\n\n  Typeahead.prototype._getCaretEndTranslated = function _getCaretEndTranslated() {\n    return this._getCaretPositionTranslated(this._getCaretEnd());\n  };\n\n  /**\n   * Set the position of the caret translated to the corresponding index in the\n   * characters array. This means ignoring format characters.\n   * @param {Number} pos\n   */\n\n\n  Typeahead.prototype._setCaretPositionTranslated = function _setCaretPositionTranslated(pos) {\n\n    var i = 0;\n    var skipCount = 0;\n\n    for (; i < pos + skipCount; i++) {\n\n      // Count non-numbers as a skip.\n      // @todo: this needs to work with more than numbers.\n      if (this.format[i] !== undefined && this.format[i] !== '\\\\d') {\n        skipCount++;\n      }\n    }\n\n    this._setCaretPosition(pos + skipCount);\n  };\n\n  /**\n   * Move the caret position\n   * @param  {String} direction The direction of the movement\n   * @return {Boolean}           Was the caret actually moved?\n   */\n\n\n  Typeahead.prototype._moveCaret = function _moveCaret(direction) {\n\n    var curPos = this._getCaretStart();\n\n    if (direction === 'left') {\n      this._setCaretPosition(curPos - 1);\n    } else if (direction === 'right') {\n      this._setCaretPosition(curPos + 1);\n    }\n\n    return curPos !== this._getCaretStart();\n  };\n\n  /**\n   * Empty the input when we only have placeholders.\n   */\n\n\n  Typeahead.prototype._emptyWhenOnlyPlaceholders = function _emptyWhenOnlyPlaceholders() {\n    if (!this.characters.length) {\n      this.clear();\n    }\n  };\n\n  /**\n   * Run a callback function that may change the focus of the document, but\n   * make sure focus goes back to where it needs to be. Also, set the state\n   * so that blur/focus events don't fire from this instance.\n   * @param {Function} callback\n   */\n\n\n  Typeahead.prototype._maintainFocus = function _maintainFocus(callback) {\n\n    this.pause();\n\n    var originalActiveElement = document.activeElement;\n\n    //For IE\n    if (!originalActiveElement) {\n      originalActiveElement = document.body;\n    }\n\n    var output = (callback || noop).call(this);\n\n    // If we didn't have focus, go back to focusing on the original\n    if (originalActiveElement !== this.inputEl) {\n      this.inputEl.blur();\n      originalActiveElement ? originalActiveElement.focus() : null;\n    }\n\n    this.resume();\n\n    return output;\n  };\n\n  /**\n   * Update the width of the typeahead. If we should be matching the width\n   * of the placeholder, do so. Otherwise, take no action.\n   */\n\n\n  Typeahead.prototype._updateWidth = function _updateWidth() {\n\n    if (this.matchPlaceholderSize) {\n      this.placeholderEl.style.width = 'auto';\n      // Add 2px to account for caret width in IE...\n      this.inputEl.style.width = 'auto';\n      this.inputEl.style.width = this.placeholderEl.offsetWidth + 2 + 'px';\n      this.placeholderEl.style.width = '';\n    }\n  };\n\n  /**\n   * Listen for delete and arrows.\n   * @param  {Object} e\n   */\n\n\n  Typeahead.prototype._onKeydown = function _onKeydown(e) {\n\n    var code = e.keyCode || e.which;\n\n    if (code === this.pasteCode && (e.metaKey || e.ctrlKey)) {\n      return;\n    }\n\n    if (code === this.actionCodes.BACKSPACE) {\n      this.removeCharacterAtCaret(-1);\n      this._onBackspace();\n      e.preventDefault();\n    } else if (code === this.actionCodes.DELETE) {\n      this.removeCharacterAtCaret(0);\n      e.preventDefault();\n    } else if (code === this.actionCodes.LEFT) {\n      if (!this._getCaretStart()) {\n        (this.onBackspace || noop)();\n      }\n    } else if (code === this.actionCodes.RIGHT) {\n      if (this._getCaretStart() === this.characters.length) {\n        (this.onEnd || noop)();\n      }\n    } else {\n      if (this.ignoreCodes.indexOf(code) === -1) {\n        e.preventDefault();\n\n        // Account for Numpad keys\n        if (code >= 96 && code <= 105) {\n          code -= 48;\n        }\n\n        this.addCharacterAtCaret(String.fromCharCode(code));\n      }\n    }\n  };\n\n  /**\n   * When the keypress event fires, validate.\n   * @param {Object} e\n   */\n\n\n  Typeahead.prototype._onKeypress = function _onKeypress(e) {\n    var code = e.keyCode || e.which;\n\n    if (this.ignoreCodes.indexOf(code) === -1) {\n      e.preventDefault();\n      this.characters = this._parseCharacters(this.inputEl.value);\n      this.run();\n      (this.onChange || noop)(this.getValue(), this);\n    }\n  };\n\n  /**\n   * When the input event fires, validate. This happens\n   * with a copy+paste.\n   * @param {Object} e\n   */\n\n\n  Typeahead.prototype._onInput = function _onInput(e) {\n    e.preventDefault();\n    this.characters = this._parseCharacters(this.inputEl.value);\n    this.run();\n    (this.onInput || noop)(this.getValue(), this);\n  };\n\n  /**\n   * When we focus, run the formatting.\n   * @param {Object} e\n   */\n\n\n  Typeahead.prototype._onFocus = function _onFocus() {\n\n    window.removeEventListener('blur', this._onBlurBound);\n    window.addEventListener('blur', this._onBlurBound, false);\n    this.inputEl.removeEventListener('blur', this._onBlurBound);\n    this.inputEl.addEventListener('blur', this._onBlurBound, false);\n\n    if (this.isFocused || this.pauseBlurFocus || this.isRunning) return;\n\n    this.run();\n    (this.onFocus || noop)(this.getValue(), this);\n    this.isFocused = true;\n    this._oldVal = this.inputEl.value;\n  };\n\n  /**\n   * When we blur, if we have no characters, remove the placeholders.\n   * @param {Object} e\n   */\n\n\n  Typeahead.prototype._onBlur = function _onBlur() {\n\n    window.removeEventListener('blur', this._onBlurBound);\n    this.inputEl.removeEventListener('blur', this._onBlurBound);\n\n    this.isFocused = false;\n\n    if (this.pauseBlurFocus || this.isRunning) return;\n\n    this._emptyWhenOnlyPlaceholders();\n\n    if (this._oldVal !== this.inputEl.value) {\n      (0, _triggerEvent2.default)(this.inputEl, 'change');\n    }\n\n    (this.onBlur || noop)(this.getValue(), this);\n  };\n\n  /**\n   * When the placeholder receives a click event, focus on the input. This happens in IE10 for some\n   * reason that I cannot fully fathom, but it has something to do with the explicit width being\n   * set on an empty element.\n   * @param {Object} e\n   */\n\n\n  Typeahead.prototype._onPlaceholderClick = function _onPlaceholderClick(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.inputEl.focus();\n  };\n\n  /**\n   * When we backspace, if we have no characters left let listeners know.\n   * @param {Object} e\n   */\n\n\n  Typeahead.prototype._onBackspace = function _onBackspace() {\n    if (!this._getCaretStart()) (this.onBackspace || noop)();\n  };\n\n  return Typeahead;\n}(_base2.default);\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nTypeahead.prototype._whitelistedParams = ['format', 'placeholder', 'matchPlaceholderSize', 'onChange', 'onFocus', 'onBlur', 'onInput', 'onBackspace', 'onEnd'];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nTypeahead.prototype.defaults = {\n  el: null,\n  inputEl: null,\n  placeholderEl: null,\n  placeholder: null,\n  characters: null,\n  format: null,\n  ignoreCodes: [9, // Tab\n  16, // Shift\n  17, // Ctrl\n  18, // Alt\n  20, // CAPS\n  91, // Meta\n  93, // Alt\n  112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123 // F1-F12\n  ],\n  actionCodes: {\n    BACKSPACE: 8,\n    DELETE: 46,\n    LEFT: 37,\n    RIGHT: 39\n  },\n  pasteCode: 86, // v\n  pauseBlurFocus: 0,\n  matchPlaceholderSize: null,\n  maxLength: null,\n  isFocused: false,\n  isRunning: false,\n  onChange: null,\n  onFocus: null,\n  onBlur: null,\n  onInput: null,\n  onBackspace: null,\n  onEnd: null,\n  _atEnd: false,\n  _oldVal: null,\n  _onKeydownBound: null,\n  _onKeypressBound: null,\n  _onFocusBound: null,\n  _onBlurBound: null,\n  _onPlaceholderClickBound: null\n};\n\nexports.default = Typeahead;\nmodule.exports = exports['default'];\n//# sourceMappingURL=typeahead.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _outerHeight = require('../dom/outer-height');\n\nvar _outerHeight2 = _interopRequireDefault(_outerHeight);\n\nvar _addClass = require('../dom/add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('../dom/remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nvar _hasClass = require('../dom/has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _toggleClass = require('../dom/toggle-class');\n\nvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar noop = function noop() {}; /**\n                                * # Animate Height\n                                * Animate the height of an element since we can't do this w/ pure CSS. Sigh.\n                                *\n                                * @example\n                                * animateHeight({\n                                *   el: ...,\n                                *   toggleEl: ...,\n                                *   // Optional params\n                                *   action: 'collapse'|'expand',\n                                *   heightAnimationClass: 'spark-animate-height',\n                                *   opacityAnimationClass: 'spark-animate-opacity',\n                                *   toggleProperty: 'display'|'overflow'|'visibility',\n                                *   toggleValue: 'block'|'none'|'visible'|'hidden',\n                                *   animationDuration: 250\n                                * });\n                                *\n                                * @module helpers/animation/height.js\n                                */\n\nvar runningAnimations = {\n  els: [],\n  completeCallbacks: []\n};\n\n/**\n * Get the inverse toggle value\n * @param  {String} property\n * @param  {String} originalValue\n * @return {String}\n */\nfunction getInverseToggleValue(el, property, originalValue) {\n\n  // Get the value to toggle to for the given property\n  switch (property) {\n    case 'overflow':\n    case 'visibility':\n      return originalValue === 'visible' ? 'hidden' : 'visible';\n    default:\n      return originalValue === 'block' || originalValue === 'inline-block' ? 'none' : 'block';\n  }\n}\n\n/**\n * When an animation is complete, clean up and run the callback.\n * @param  {Object} params\n */\nfunction onComplete(params) {\n\n  // Reset toggle el visibility\n  if (params.toggleClassName) {\n    (0, _toggleClass2.default)(params.el, params.toggleClassName, !params.collapse);\n  } else {\n    params.toggleEl.style[params.toggleProperty] = '';\n  }\n\n  // Remove the height property\n  params.el.style.height = '';\n  params.toggleEl.style.height = '';\n  params.toggleEl.style.marginBottom = '';\n  params.toggleEl.style.marginTop = '';\n\n  // Remove the spark-animate-height class so the transitions no longer apply\n  (0, _removeClass2.default)(params.el, params.heightAnimationClass);\n  (0, _removeClass2.default)(params.toggleEl, params.heightAnimationClass);\n\n  // Run the callback\n  params.onComplete();\n\n  // Remove the element and callback from their respective arrays\n  var runningIndex = runningAnimations.els.indexOf(params.el);\n  runningAnimations.els.splice(runningIndex, 1);\n  runningAnimations.completeCallbacks.splice(runningIndex, 1);\n}\n\n/**\n * @param {Object} params\n */\nfunction animateHeight(params) {\n\n  params = params || {};\n\n  var el = params.el;\n\n  if (!el) {\n    return;\n  }\n\n  var collapse = params.action && params.action === 'collapse';\n  var heightAnimationClass = params.heightAnimationClass || 'spark-animate-height';\n\n  // Allow for elements to be passed or selector strings\n  var toggleEl = typeof params.toggleEl === 'string' ? el.querySelector(params.toggleEl) : params.toggleEl;\n\n  // No element to be switching with toggling so we can't determine the desired height to animate to.\n  if (!toggleEl || (0, _hasClass2.default)(el, 'spark-no-animate')) {\n    return;\n  }\n\n  var toggleClassName = params.toggleClass;\n\n  // The style property to use when toggling visibility\n  var toggleProperty = params.toggleProperty || 'display';\n  var toggleStyles = window.getComputedStyle(toggleEl);\n  var originalToggleValue = toggleStyles[toggleProperty];\n  var toggleValue = params.toggleValue || getInverseToggleValue(toggleProperty, originalToggleValue);\n\n  // If we are already animating, stop now.\n  var runningIndex = runningAnimations.els.indexOf(el);\n  if (runningIndex !== -1) {\n\n    var completeCallback = runningAnimations.completeCallbacks[runningIndex];\n    if (completeCallback) {\n      clearTimeout(completeCallback);\n    }\n\n    onComplete({\n      el: el,\n      toggleEl: toggleEl,\n      onComplete: params.onComplete || noop,\n      collapse: collapse,\n      toggleProperty: toggleProperty,\n      toggleClassName: toggleClassName,\n      toggleValue: toggleValue,\n      heightAnimationClass: heightAnimationClass\n    });\n  }\n\n  // Store the current height\n  var originalHeight = (0, _outerHeight2.default)(el);\n\n  // Toggle the visible property\n  if (toggleClassName) {\n    (0, _toggleClass2.default)(el, toggleClassName, !collapse);\n  } else {\n    toggleEl.style[toggleProperty] = toggleValue;\n  }\n\n  // When measuring the size for a collapse, we have to wait a tic for it to be\n  // accurate. Not sure why. Ugh.\n  if (collapse) {\n    setTimeout(runAnimation, 0);\n  } else {\n    runAnimation();\n  }\n\n  function runAnimation() {\n\n    // Now that the toggle el is taking up space, get the new height which we will be animating to\n    var targetElHeight = (0, _outerHeight2.default)(el);\n\n    // We need to store the original and target toggle element heights. They differ depending on\n    // whether we are going to expand or collapse.\n    var targetToggleElHeight = void 0;\n    var originalToggleElHeight = void 0;\n\n    // If we are collapsing, reset the toggle style and set it when we're done. Set the height so\n    // that we can animate down to 0 or up to the target height.\n    if (collapse) {\n\n      if (toggleClassName) {\n        (0, _removeClass2.default)(el, toggleClassName);\n      } else {\n        toggleEl.style[toggleProperty] = originalToggleValue;\n      }\n\n      originalToggleElHeight = (0, _outerHeight2.default)(toggleEl, toggleStyles);\n      targetToggleElHeight = 0;\n    } else {\n      targetToggleElHeight = (0, _outerHeight2.default)(toggleEl, toggleStyles);\n      originalToggleElHeight = 0;\n    }\n\n    // Set the original height\n    el.style.height = originalHeight + 'px';\n    toggleEl.style.height = originalToggleElHeight + 'px';\n    toggleEl.style.marginBottom = '0px';\n    toggleEl.style.marginTop = '0px';\n\n    // Add the spark-animate-height class which will setup the transition-property and duration\n    (0, _addClass2.default)(el, heightAnimationClass);\n    (0, _addClass2.default)(toggleEl, heightAnimationClass);\n\n    runningAnimations.els.push(el);\n\n    // We need to wait a tick to toggle the height or else the animation class won't function\n    setTimeout(function () {\n\n      // Set the height to the target height\n      el.style.height = targetElHeight + 'px';\n      toggleEl.style.height = targetToggleElHeight + 'px';\n\n      // Remove inline styles after the animation is complete\n      runningAnimations.completeCallbacks.push(setTimeout(function () {\n        onComplete({\n          el: el,\n          toggleEl: toggleEl,\n          onComplete: params.onComplete || noop,\n          collapse: collapse,\n          toggleProperty: toggleProperty,\n          toggleClassName: toggleClassName,\n          toggleValue: toggleValue,\n          heightAnimationClass: heightAnimationClass\n        });\n      }, params.animationDuration !== undefined ? params.animationDuration : 201));\n    }, 0);\n  }\n}\n\nexports.default = animateHeight;\nmodule.exports = exports['default'];\n//# sourceMappingURL=height.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Date helper\n * General helpers for working with dates.\n *\n * @module helpers/date/date.js\n */\n\nvar monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\nvar monthNamesShort = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];\nvar dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nvar dayNamesShort = ['Sun', 'Mon', 'Tues', 'Wed', 'Thur', 'Fri', 'Sat'];\nvar adjustedDayNames = [];\nvar adjustedDayNamesShort = [];\nvar weekStartsOn = 0;\n\nvar dateHelper = {\n\n  /**\n   * Transform a date into an object of date values.\n   * @param {Date} date\n   * @return {Object}\n   */\n  create: function create(date) {\n\n    date = date instanceof Date ? date : new Date(date.year, date.month - 1, date.day);\n\n    var inst = Object.create(dateHelper);\n    inst._date = date;\n    inst._cache = {};\n\n    return inst;\n  },\n\n  /**\n   * Get a year.\n   * @return {Number}\n   */\n  get year() {\n    this._instanceCheck('year');\n    return this._date.getFullYear();\n  },\n\n  /**\n   * Set a year.\n   * @param {Number} y\n   */\n  set year(y) {\n    this._instanceCheck('year');\n    this._clearCache();\n    return this._date.setFullYear(y);\n  },\n\n  /**\n   * Get a month.\n   * @return {Number} 1-12\n   */\n  get month() {\n    this._instanceCheck('month');\n    return this._date.getMonth() + 1;\n  },\n\n  /**\n   * Set a month.\n   * @param {Number} m 1-12\n   */\n  set month(m) {\n    this._instanceCheck('month');\n    this._clearCache();\n    return this._date.setMonth(m - 1);\n  },\n\n  /**\n   * Get a day.\n   * @return {Number} 1-31\n   */\n  get day() {\n    this._instanceCheck('day');\n    return this._date.getDate();\n  },\n\n  /**\n   * Set a day.\n   * @param {Number} d 1-31\n   */\n  set day(d) {\n    this._instanceCheck('day');\n    this._clearCache();\n    return this._date.setDate(d);\n  },\n\n  /**\n   * Sets the day, month and year values at once.\n   * @param {Object} params\n   */\n  set: function set(params) {\n    params = params || {};\n    this.year = params.year || this.year;\n    this.month = params.month || this.month;\n    this.day = params.day || this.day;\n  },\n\n  /**\n   * Get the full name of the month.\n   * @param {Number} num\n   * @return {String}\n   */\n  getMonthName: function getMonthName(num) {\n    return monthNames[num - 1];\n  },\n\n  /**\n   * Get the month name.\n   * @return {String}\n   */\n  get monthName() {\n    this._instanceCheck('monthName');\n    return dateHelper.getMonthName(this.month);\n  },\n\n  /**\n   * Get the list of month names.\n   * @return {Array}\n   */\n  getMonthNames: function getMonthNames() {\n    return monthNames;\n  },\n\n  /**\n   * Get the short name of the month.\n   * @param {Number} num\n   * @return {String}\n   */\n  getMonthNameShort: function getMonthNameShort(num) {\n    return monthNamesShort[num - 1];\n  },\n\n  /**\n   * Get the month name.\n   * @return {String}\n   */\n  get monthNameShort() {\n    this._instanceCheck('monthName');\n    return dateHelper.getMonthNameShort(this.month);\n  },\n\n  /**\n   * Get the list of short month names.\n   * @return {Array}\n   */\n  getMonthNamesShort: function getMonthNamesShort() {\n    return monthNamesShort;\n  },\n\n  /**\n   * Set the month names.\n   * @param {Array} names\n   */\n  setMonthNames: function setMonthNames(names) {\n    if (names.length === 12) monthNames = names;\n  },\n\n  /**\n   * Set the short month names.\n   * @param {Array} names\n   */\n  setMonthNamesShort: function setMonthNamesShort(names) {\n    if (names.length === 12) monthNamesShort = names;\n  },\n\n  /**\n   * Get the day of the week for a given day.\n   * @param {Object} date\n   * @return {Number} 1-7\n   */\n  getDayOfWeek: function getDayOfWeek(date) {\n    var day = (date instanceof Date ? date : new Date(date.year, date.month - 1, date.day)).getDay() - weekStartsOn;\n    return (day < 0 ? 7 - Math.abs(day) : day) + 1;\n  },\n\n  /**\n   * Get the day of the week.\n   * @return {Number}\n   */\n  get dayOfWeek() {\n    return dateHelper.getDayOfWeek(this._date);\n  },\n\n  /**\n   * Get the full name of a day of the week.\n   * @param {Number} num\n   * @return {String}\n   */\n  getDayName: function getDayName(num) {\n    return dayNames[num - 1 + weekStartsOn] || dayNames[dayNames.length - num - 1 + weekStartsOn];\n  },\n\n  /**\n   * Get the day name.\n   * @return {String}\n   */\n  get dayName() {\n    this._instanceCheck('dayName');\n    return dateHelper.getDayName(this.dayOfWeek);\n  },\n\n  /**\n   * Get the full name of the days of the week.\n   * @return {Array}\n   */\n  getDayNames: function getDayNames() {\n    return adjustedDayNames.length ? adjustedDayNames : dayNames;\n  },\n\n  /**\n   * Get the short name of the day.\n   * @param {Number} num\n   * @return {String}\n   */\n  getDayNameShort: function getDayNameShort(num) {\n    return dayNamesShort[num - 1 + weekStartsOn] || dayNames[dayNames.length - num - 1 + weekStartsOn];\n  },\n\n  /**\n   * Get the short day name.\n   * @return {String}\n   */\n  get dayNameShort() {\n    this._instanceCheck('dayNameShort');\n    return dateHelper.getDayNameShort(this.dayOfWeek);\n  },\n\n  /**\n   * Get the full name of the days of the week.\n   * @return {Array}\n   */\n  getDayNamesShort: function getDayNamesShort() {\n    return adjustedDayNamesShort.length ? adjustedDayNamesShort : dayNamesShort;\n  },\n\n  /**\n   * Set the day names.\n   * @param {Array} names\n   */\n  setDayNames: function setDayNames(names) {\n    if (names.length === 7) dayNames = names;\n  },\n\n  /**\n   * Set the short day names.\n   * @param {Array} names\n   */\n  setDayNamesShort: function setDayNamesShort(names) {\n    if (names.length === 7) dayNamesShort = names;\n  },\n\n  /**\n   * Get the index of the first day of the week.\n   * @return {Number}\n   */\n  getWeekStartsOn: function getWeekStartsOn() {\n    return weekStartsOn;\n  },\n\n  /**\n   * Set the index of the first day of the week.\n   * @param {Number} index\n   * @return {String}\n   */\n  setWeekStartsOn: function setWeekStartsOn(number) {\n\n    weekStartsOn = number;\n\n    if (number) {\n      adjustedDayNames = dayNames.slice(weekStartsOn);\n      adjustedDayNames = adjustedDayNames.concat(dayNames.slice(0, weekStartsOn));\n      adjustedDayNamesShort = dayNamesShort.slice(weekStartsOn);\n      adjustedDayNamesShort = adjustedDayNamesShort.concat(dayNamesShort.slice(0, weekStartsOn));\n    } else {\n      adjustedDayNames = [];\n      adjustedDayNamesShort = [];\n    }\n  },\n\n  /**\n   * Get the current date.\n   * @return {Object}\n   */\n  now: function now() {\n    return dateHelper.create(new Date());\n  },\n\n  /**\n   * Get the next year after the given date.\n   * This obviously isn't very complicated, but it exists\n   * for parity with how we get the week, day and month.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getNextYear: function getNextYear(date) {\n    return dateHelper.create(new Date(date.year + 1, date.month - 1, date.day));\n  },\n\n  /**\n   * Get the year following this.\n   * @return {Object}\n   */\n  get nextYear() {\n    this._instanceCheck('nextYear');\n    return this._cache.nextYear || (this._cache.nextYear = dateHelper.getNextYear(this));\n  },\n\n  /**\n   * Get the first day of the week for a given date.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getWeekStart: function getWeekStart(date) {\n    var inst = dateHelper.create(new Date(date.year, date.month - 1, date.day - dateHelper.getDayOfWeek(date) + 1));\n    inst.weekStartsOn = weekStartsOn;\n    return inst;\n  },\n\n  /**\n   * Get the start of the week for this date.\n   * @return {Object}\n   */\n  get weekStart() {\n    this._instanceCheck('weekStart');\n    return this._cache.weekStart && this._cache.weekStart.weekStartsOn === weekStartsOn ? this._cache.weekStart : this._cache.weekStart = dateHelper.getWeekStart(this);\n  },\n\n  /**\n   * Get the first day of the month for a given date.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getMonthStart: function getMonthStart(date) {\n    var inst = dateHelper.create(new Date(date.year, date.month - 1, 1));\n    return inst;\n  },\n\n  /**\n   * Get the start of the month for this date.\n   * @return {Object}\n   */\n  get monthStart() {\n    this._instanceCheck('monthStart');\n    return this._cache.monthStart || (this._cache.monthStart = dateHelper.getMonthStart(this));\n  },\n\n  /**\n   * Get the next week after the given date.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getNextWeek: function getNextWeek(date) {\n    var start = dateHelper.getWeekStart(date);\n    return dateHelper.create(new Date(start.year, start.month - 1, start.day + 7));\n  },\n\n  /**\n   * Get the week following this.\n   * @return {Object}\n   */\n  get nextWeek() {\n    this._instanceCheck('nextWeek');\n    return this._cache.nextWeek || (this._cache.nextWeek = dateHelper.getNextWeek(this));\n  },\n\n  /**\n   * Get the next day after the given date.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getNextDay: function getNextDay(date) {\n    return dateHelper.create(new Date(date.year, date.month - 1, date.day + 1));\n  },\n\n  /**\n   * Get the day following this.\n   * @return {Object}\n   */\n  get nextDay() {\n    this._instanceCheck('nextDay');\n    return this._cache.nextDay || (this._cache.nextDay = dateHelper.getNextDay(this));\n  },\n\n  /**\n   * Get the next month after the given date.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getNextMonth: function getNextMonth(date) {\n    // Date() has a *bug/feature* if last day of month is 31 when calculating the next month.\n    // Need to account for that so that it doesn't round up the date/month.\n\n    if (date.day === 31 && date.month !== 1 && date.month !== 7 && date.month !== 12) {\n      // Adjust for months ending in 31 followed by months ending in 30\n      return dateHelper.create(new Date(date.year, date.month, date.day - 1));\n    } else if (date.day > 28 && date.month === 1) {\n      // fix for last day of February\n      return dateHelper.create(new Date(date.year, date.month + 1, 0));\n    } else {\n      return dateHelper.create(new Date(date.year, date.month, date.day));\n    }\n  },\n\n  /**\n   * Get the month following this.\n   * @return {Object}\n   */\n  get nextMonth() {\n    this._instanceCheck('nextMonth');\n    return this._cache.nextMonth || (this._cache.nextMonth = dateHelper.getNextMonth(this));\n  },\n\n  /**\n   * Get the previous year after the given date.\n   * This obviously isn't very complicated, but it exists\n   * for parity with how we get the week, day and month.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getPreviousYear: function getPreviousYear(date) {\n    return dateHelper.create(new Date(date.year - 1, date.month - 1, date.day));\n  },\n\n  /**\n   * Get the year preceding this.\n   * @return {Object}\n   */\n  get previousYear() {\n    this._instanceCheck('previousYear');\n    return this._cache.previousYear || (this._cache.previousYear = dateHelper.getPreviousYear(this));\n  },\n\n  /**\n   * Get the previous week after the given date.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getPreviousWeek: function getPreviousWeek(date) {\n    var start = dateHelper.getWeekStart(date);\n    var inst = dateHelper.create(new Date(start.year, start.month - 1, start.day - 7));\n    inst.weekStartsOn = weekStartsOn;\n    return inst;\n  },\n\n  /**\n   * Get the week preceding this.\n   * @return {Object}\n   */\n  get previousWeek() {\n    this._instanceCheck('previousWeek');\n    return this._cache.previousWeek || (this._cache.previousWeek = dateHelper.getPreviousWeek(this));\n  },\n\n  /**\n   * Get the previous day after the given date.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getPreviousDay: function getPreviousDay(date) {\n    return dateHelper.create(new Date(date.year, date.month - 1, date.day - 1));\n  },\n\n  /**\n   * Get the day preceding this.\n   * @return {Object}\n   */\n  get previousDay() {\n    this._instanceCheck('previousDay');\n    return this._cache.previousDay || (this._cache.previousDay = dateHelper.getPreviousDay(this));\n  },\n\n  /**\n   * Get the previous month after the given date.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getPreviousMonth: function getPreviousMonth(date) {\n    // Date() has a *bug/feature* if last day of month is 31 when calculating the previous month.\n    // Need to account for that so that it doesn't round up the date/month.\n\n    if (date.day === 31 && date.month !== 1 && date.month !== 3 && date.month !== 8) {\n      // Adjust for months ending in 31 that follow months ending in 30\n      return dateHelper.create(new Date(date.year, date.month - 2, date.day - 1));\n    } else if (date.day > 28 && date.month === 3) {\n      // Adjust for last day of February\n      return dateHelper.create(new Date(date.year, date.month - 1, 0));\n    } else {\n      return dateHelper.create(new Date(date.year, date.month - 2, date.day));\n    }\n  },\n\n  /**\n   * Get the month preceding this.\n   * @return {Object}\n   */\n  get previousMonth() {\n    this._instanceCheck('previousMonth');\n    return this._cache.previousMonth || (this._cache.previousMonth = dateHelper.getPreviousMonth(this));\n  },\n\n  /**\n   * Get the last day of the month.\n   * @param {Object} date\n   * @return {Object}\n   */\n  getMonthEnd: function getMonthEnd(date) {\n    return dateHelper.create(new Date(date.year, date.month, 0));\n  },\n\n  /**\n   * Get the last day of the month.\n   * @return {Object}\n   */\n  get monthEnd() {\n    this._instanceCheck('monthEnd');\n    return this._cache.monthEnd || (this._cache.monthEnd = dateHelper.getMonthEnd(this));\n  },\n\n  /**\n   * Does a given day equal another? Or is it present in a list of others?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  equal: function equal(date, compare, full) {\n    return this.equalDay(date, compare, full);\n  },\n\n  /**\n   * Does a given day equal another? Or is it present in a list of others?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  equalDay: function equalDay(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (compare[i] && date.year === compare[i].year && date.month === compare[i].month && date.day === compare[i].day) matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a week equal to another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  equalWeek: function equalWeek(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || !date.weekStart.equalDay(compare[i].weekStart)) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a month equal to another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  equalMonth: function equalMonth(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || date.year !== compare[i].year || date.year === compare[i].year && date.month !== compare[i].month) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a year equal to another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  equalYear: function equalYear(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || date.year !== compare[i].year) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a date before another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  before: function before(date, compare, full) {\n    return this.beforeDay(date, compare, full);\n  },\n\n  /**\n   * Is a given date before another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  beforeDay: function beforeDay(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || date._date >= compare[i]._date) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a week before another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  beforeWeek: function beforeWeek(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || !date.weekStart.beforeDay(compare[i].weekStart)) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a month before another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  beforeMonth: function beforeMonth(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || date.year > compare[i].year || date.year === compare[i].year && date.month >= compare[i].month) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a year before another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  beforeYear: function beforeYear(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || date.year >= compare[i].year) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a date after another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  after: function after(date, compare, full) {\n    return this.afterDay(date, compare, full);\n  },\n\n  /**\n   * Is a given date after another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  afterDay: function afterDay(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || date._date <= compare[i]._date) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a week after another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  afterWeek: function afterWeek(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || !date.weekStart.afterDay(compare[i].weekStart)) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a month after another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  afterMonth: function afterMonth(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || date.year < compare[i].year || date.year === compare[i].year && date.month <= compare[i].month) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Is a year after another?\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full Return a successful match only if all matches are found.\n   * @return {Boolean}\n   */\n  afterYear: function afterYear(date, compare, full) {\n\n    var args = this._checkComparisonArgs(date, compare, full);\n    date = args[0];\n    compare = args[1];\n    full = args[2];\n\n    var i = 0;\n    var len = compare.length;\n    var matches = 0;\n\n    for (; i < len; i++) {\n      if (!compare[i] || date.year <= compare[i].year) continue;else matches++;\n    }\n\n    return full ? matches === len : !!matches;\n  },\n\n  /**\n   * Get the earliest date in an array.\n   * @return {Object}\n   */\n  earliest: function earliest(arr) {\n\n    var i = 0;\n    var len = arr.length;\n    var e = void 0;\n\n    for (; i < len; i++) {\n      if (!e || arr[i].before(e)) e = arr[i];\n    }\n\n    return e;\n  },\n\n  /**\n   * Get the latest date in an array.\n   * @return {Object}\n   */\n  latest: function latest(arr) {\n\n    var i = 0;\n    var len = arr.length;\n    var l = void 0;\n\n    for (; i < len; i++) {\n      if (!l || arr[i].after(l)) l = arr[i];\n    }\n\n    return l;\n  },\n\n  /**\n   * Clone a date instance.\n   * @param {Object} date\n   * @return {Object}\n   */\n  clone: function clone(date) {\n\n    // If we weren't passed a date, use this instance.\n    if (!date && this._date && this._date instanceof Date && dateHelper.isPrototypeOf(this)) {\n      date = this;\n    }\n\n    // No date, can't clone.\n    if (!date) {\n      throw new Error('Must pass a date to clone or call on an instance.');\n    }\n\n    return dateHelper.create(new Date(date._date.valueOf()));\n  },\n\n  /**\n   * If a comparison function is called on an instance, properly\n   * assign the vars.\n   * @param {Object} date\n   * @param {Object|Array} compare\n   * @param {Boolean} full\n   */\n  _checkComparisonArgs: function _checkComparisonArgs(date, compare, full) {\n\n    if (compare === undefined || typeof compare === 'boolean') {\n\n      if (!dateHelper.isPrototypeOf(this)) {\n        throw new Error('Cannot compare only one date!');\n      }\n\n      full = compare;\n      compare = date;\n      date = this;\n    }\n\n    compare = compare instanceof Array ? compare : [compare];\n\n    return [date, compare, full];\n  },\n\n  /**\n   * Check to see if we have an instance of the date object.\n   * @param  {String} prop\n   */\n  _instanceCheck: function _instanceCheck(prop) {\n    if (!this._date || !(this._date instanceof Date) || !dateHelper.isPrototypeOf(this)) throw new Error('Cannot access the property \"' + prop + '\" of the date helper with creating an instance!');\n  },\n\n  /**\n   * Clear the cache.\n   */\n  _clearCache: function _clearCache() {\n    this._instanceCheck('clearCache');\n    this._cache = {};\n  }\n};\n\nexports.default = dateHelper;\nmodule.exports = exports['default'];\n//# sourceMappingURL=date.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _pad = require('../util/pad');\n\nvar _pad2 = _interopRequireDefault(_pad);\n\nvar _date = require('./date');\n\nvar _date2 = _interopRequireDefault(_date);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Map characters to their special meanings.\n * @type {Object}\n */\n/**\n * # Parse Date Format\n * Given a date format string, break it down into pieces.\n *\n * @example\n * parseDateFormat('MM-DD-YYYY');\n *\n * @module helpers/date/parse-format.js\n */\n\nvar map = {\n  d: 'day',\n  m: 'month',\n  y: 'year',\n  '-': 'divider',\n  '/': 'divider',\n  ' ': 'space'\n};\n\n/**\n * Given a format and a string, get the day, month and year values from that string.\n * @param {Object} format\n * @return {Function}\n */\nfunction getValues(format) {\n\n  return function (value) {\n\n    var i = 0;\n    var index = 0;\n    var len = format.length;\n    var values = {};\n\n    // Loop through all format pieces\n    for (; i < len; i++) {\n\n      // Only worry about date values\n      if (['day', 'month', 'year'].indexOf(format[i].name) !== -1) {\n\n        // If the passed value doesn't contain a format piece, it's invalid.\n        if (value.length < index + format[i].length) return;\n\n        values[format[i].name] = parseInt(value.substr(index, format[i].length), 10);\n      }\n      index += format[i].length;\n    }\n\n    return _date2.default.create(values);\n  };\n}\n\n/**\n * Create a formatted date string given an object of values.\n * @param {Object} format\n * @return {Function}\n */\nfunction getString(format) {\n\n  /**\n   * @param {Object} vals\n   * @return {String}\n   */\n  return function (vals) {\n\n    var i = 0;\n    var len = format.length;\n    var str = '';\n\n    for (; i < len; i++) {\n\n      // Numbers\n      if (vals[format[i].name]) {\n        str += (0, _pad2.default)(vals[format[i].name], format[i].length);\n      }\n      // Dividers\n      else {\n          str += format[i].value;\n        }\n    }\n\n    return str;\n  };\n}\n\n/**\n * @param {String} format\n * @return {Object}\n */\nfunction parseDateFormat(format) {\n\n  var f = format.toLowerCase();\n  var i = 0;\n  var len = f.length;\n\n  var obj = {\n    parts: []\n  };\n\n  for (; i < len; i++) {\n\n    // If there is a matching character mapping and the last part was of the same name, increment its length\n    // and add to its content.\n    if (map[f[i]] && obj.parts.length && obj.parts[obj.parts.length - 1].name === map[f[i]]) {\n      obj.parts[obj.parts.length - 1].length++;\n      obj.parts[obj.parts.length - 1].value += format[i];\n      continue;\n    }\n\n    obj.parts.push({\n      name: map[f[i]] ? map[f[i]] : '',\n      value: format[i],\n      length: 1\n    });\n  }\n\n  // Add a way to convert the parsed date into a regex-ish string that works with the Typeahead implementation.\n  obj.getValues = getValues(obj.parts);\n  obj.getString = getString(obj.parts);\n\n  return obj;\n}\n\nexports.default = parseDateFormat;\nmodule.exports = exports['default'];\n//# sourceMappingURL=parse-format.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _trim = require('../util/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nvar _hasClass = require('./has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * # Add Class\n * Add a class on an element.\n *\n * @param {Element|Array} el An element or array of elements to update.\n * @param {String} name\n * @return {Element}\n *\n * @module helpers/dom/add-class.js\n */\n\nvar ws = /\\s+/;\nvar cleanup = /\\s{2,}/g;\n\nfunction addClass(el, name) {\n\n  if (arguments.length === 2 && typeof name === 'string') {\n    name = (0, _trim2.default)(name).split(ws);\n  } else {\n    name = name instanceof Array ? name : Array.prototype.slice.call(arguments, 1);\n  }\n\n  // optimize for best, most common case\n  if (name.length === 1 && el.classList) {\n    if (name[0]) {\n      el.classList.add(name[0]);\n    }\n    return el;\n  }\n\n  var toAdd = [];\n  var i = 0;\n  var l = name.length;\n  var item = void 0;\n  var clsName = typeof el.className === 'string' ? el.className : el.getAttribute ? el.getAttribute('class') : '';\n\n  // see if we have anything to add\n  for (; i < l; i++) {\n    item = name[i];\n    if (item && !(0, _hasClass2.default)(clsName, item)) {\n      toAdd.push(item);\n    }\n  }\n\n  if (toAdd.length) {\n    if (typeof el.className === 'string') {\n      el.className = (0, _trim2.default)((clsName + ' ' + toAdd.join(' ')).replace(cleanup, ' '));\n    } else if (el.setAttribute) {\n      el.setAttribute('class', (0, _trim2.default)((clsName + ' ' + toAdd.join(' ')).replace(cleanup, ' ')));\n    }\n  }\n\n  return el;\n}\n\nexports.default = addClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=add-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * # Has Class\n * See if an element has a class.\n *\n * @param {Element|String} el\n * @param {String} name\n * @return {Boolean}\n *\n * @module helpers/dom/has-class.js\n */\nfunction hasClass(el, name) {\n  var cName = ((typeof el === 'undefined' ? 'undefined' : _typeof(el)) === 'object' ? el.className || el.getAttribute && el.getAttribute('class') || '' : el || '').replace(/[\\t\\r\\n\\f]/g, ' ');\n  return (' ' + cName + ' ').indexOf(' ' + name + ' ') !== -1;\n}\n\nexports.default = hasClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=has-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (html) {\n\n  if (!html) {\n    throw new Error('Cannot create element with no HTML!');\n  }\n\n  var el = document.createElement('div');\n  el.innerHTML = html;\n  var el2 = el.children[0];\n  el2.parentNode.removeChild(el2);\n  return el2;\n};\n\nmodule.exports = exports['default']; /**\n                                      * # Make Element\n                                      * Make en element using a string of HTML.\n                                      *\n                                      * @example\n                                      * makeElement('<div></div>');\n                                      *\n                                      * @module helpers/make-element.js\n                                      *\n                                      * @param {String} html\n                                      * @return {Element}\n                                      */\n//# sourceMappingURL=make-element.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _each = require('../util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar props = ['marginTop', 'marginBottom', 'borderTop', 'borderBottom']; /**\n                                                                         * # Outer Height\n                                                                         * Get the outer height of an element (including margin and border)\n                                                                         *\n                                                                         * @param {Element} el\n                                                                         * @param {Object} styles Optional Already have computed styles? Pass them in.\n                                                                         *\n                                                                         * @example\n                                                                         * outerHeight(el, computedStyles);\n                                                                         *\n                                                                         * @module helpers/outer-height.js\n                                                                         */\n\n\nfunction outerHeight(el, styles) {\n\n  styles = styles || window.getComputedStyle(el);\n\n  var height = el.clientHeight;\n\n  (0, _each2.default)(props, function (prop) {\n    height += parseInt(styles[prop] || 0, 10);\n  });\n\n  return height;\n}\n\nexports.default = outerHeight;\nmodule.exports = exports['default'];\n//# sourceMappingURL=outer-height.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Parse DOM attributes\n * Given an element and an attribute name, parse that attribute\n * if it exists or return a default.\n *\n * @module helpers/dom/parse-attribute.js\n */\n\n/**\n * Get the boolean value of an attribute on an element,\n * falling back to the default value.\n * @param  {Element} el\n * @param  {String} name\n * @param  {Boolean} def\n * @return {Boolean}\n */\nfunction boolean(el, name, def) {\n  var val = el.getAttribute(name);\n  if (val === null) return def;\n  return val === 'true' || val === '' ? true : false;\n}\n\n/**\n * Get the numeric value of an attribute on an element,\n * falling back to the default value.\n * @param  {Element} el\n * @param  {String} name\n * @param  {Boolean} def\n * @return {Boolean}\n */\nfunction number(el, name, def) {\n  var val = el.getAttribute(name);\n  if (val === null) return def;\n  return parseInt(val, 10);\n}\n\n/**\n * Get the boolean value of an attribute on an element,\n * falling back to the default value.\n * @param  {Element} el\n * @param  {String} name\n * @param  {Boolean} def\n * @return {Boolean}\n */\nfunction string(el, name, def) {\n  var val = el.getAttribute(name);\n  if (val === null) return def;\n  return val;\n}\n\nexports.boolean = boolean;\nexports.number = number;\nexports.string = string;\n//# sourceMappingURL=parse-attribute.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _trim = require('../util/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ws = /\\s+/; /**\n                 * # Remove Class\n                 * Remove a class on an element.\n                 *\n                 * @param {Element|Array} el An element or array of elements to update.\n                 * @param {String} name\n                 * @return {Element}\n                 *\n                 * @module helpers/dom/remove-class.js\n                 */\n\nvar cleanup = /\\s{2,}/g;\n\nfunction removeClass(el, name) {\n\n  if (arguments.length === 2 && typeof name === 'string') {\n    name = (0, _trim2.default)(name).split(ws);\n  } else {\n    name = name instanceof Array ? name : Array.prototype.slice.call(arguments, 1);\n  }\n\n  // optimize for best, most common case\n  if (name.length === 1 && el.classList) {\n    if (name[0]) el.classList.remove(name[0]);\n    return el;\n  }\n\n  // store two copies\n  var clsName = ' ' + (typeof el.className === 'string' ? el.className : el.getAttribute ? el.getAttribute('class') : '') + ' ';\n  var result = clsName;\n  var current = void 0;\n  var start = void 0;\n  for (var i = 0, l = name.length; i < l; i++) {\n    current = name[i];\n    start = current ? result.indexOf(' ' + current + ' ') : -1;\n    if (start !== -1) {\n      start += 1;\n      result = result.slice(0, start) + result.slice(start + current.length);\n    }\n  }\n\n  // only write if modified\n  if (clsName !== result) {\n    if (typeof el.className === 'string') {\n      el.className = (0, _trim2.default)(result.replace(cleanup, ' '));\n    } else if (el.setAttribute) {\n      el.setAttribute('class', (0, _trim2.default)(result.replace(cleanup, ' ')));\n    }\n  }\n\n  return el;\n}\n\nexports.default = removeClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=remove-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _hasClass = require('./has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _addClass = require('./add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('./remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction toggleClass(el, name, enable) {\n\n  if (!el) {\n    return;\n  }\n\n  // If we're passed an array, toggle the class on each.\n  if (el instanceof NodeList || el instanceof Array) {\n\n    for (var i = 0, len = el.length; i < len; i++) {\n      toggleClass(el[i], name, enable);\n    }\n\n    return;\n  }\n\n  var action = void 0;\n  if (enable !== undefined) {\n    enable = typeof enable === 'function' ? enable.call(null, el) : enable;\n    action = enable ? 'add' : 'remove';\n  } else {\n    action = (0, _hasClass2.default)(el, name) ? 'remove' : 'add';\n  }\n\n  return (action === 'add' ? _addClass2.default : _removeClass2.default)(el, name);\n} /**\n   * # Toggle Class\n   * Toggle a class on an element given a condition.\n   *\n   * @param {Element|Array} el An element or array of elements to update.\n   * @param {String} name\n   * @param {Boolean} enable\n   * @return {Element}\n   *\n   * @module  helpers/dom/toggle-class.js\n   */\n\nexports.default = toggleClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=toggle-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Trigger Event\n * Trigger a DOM event on an element.\n *\n * @param {Element} el\n * @param {String} name\n *\n * @module helpers/dom/trigger-event.js\n */\nfunction triggerEvent(el, name) {\n\n  var event = void 0;\n\n  if (document.createEvent) {\n    event = document.createEvent('HTMLEvents');\n    event.initEvent(name, true, true);\n    event.eventName = name;\n    el.dispatchEvent(event);\n  } else {\n    event = document.createEventObject();\n    event.eventType = name;\n    event.eventName = name;\n    el.fireEvent('on' + event.eventType, event);\n  }\n}\n\nexports.default = triggerEvent;\nmodule.exports = exports['default'];\n//# sourceMappingURL=trigger-event.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _each = require('../util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction appendChildren(el, children, empty) {\n\n  empty = empty === undefined ? false : empty;\n\n  if (empty) {\n    el.textContent = '';\n  }\n\n  var domList = children instanceof window.HTMLCollection;\n\n  if (domList) {\n    while (children.length) {\n      el.appendChild(children[0]);\n    }\n  } else {\n    (0, _each2.default)(children, function (c) {\n      if (c) {\n        el.appendChild(c);\n      }\n    });\n  }\n} /**\n   * # Append Children\n   * Append an array of children to a node.\n   *\n   * @param {Element} el\n   * @param {Array} children\n   * @param {Boolean} empty Empty the node before adding children?\n   *\n   * @module helpers/manipulation/append-children.js\n   */\n\nexports.default = appendChildren;\nmodule.exports = exports['default'];\n//# sourceMappingURL=append-children.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _each = require('../util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction copyAttributes(a, b) {\n  (0, _each2.default)(a.attributes, function (attr) {\n    b.setAttribute(attr.name, attr.value);\n  });\n} /**\n   * # Copy Attributes\n   * Copy all of the attributes from one element to another.\n   *\n   * @param {Element} a\n   * @param {Element} b\n   *\n   * @module helpers/manipulation/copy-attributes.js\n   */\n\nexports.default = copyAttributes;\nmodule.exports = exports['default'];\n//# sourceMappingURL=copy-attributes.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Each\n * Apply a callback function to a list of any kind: Array, NodeList, HTMLCollection or Object.\n *\n * @param {Array|NodeList|HTMLCollection|Object} list\n * @param {Function} cb\n *\n * @example\n * each([], callback);\n * each(el.children, callback);\n * each(el.childNodes, callback);\n * each({}, callback);\n *\n * @module helpers/util/each.js\n */\nfunction each(list, cb) {\n\n  if (!list) {\n    return;\n  }\n\n  if (typeof cb !== 'function') {\n    throw new Error('Cannot invoke `each` without a callback!');\n  }\n\n  var i = 0;\n  var len = list.length;\n\n  // Object\n  if (len === undefined) {\n    for (i in list) {\n      if (i !== 'prototype' && list.hasOwnProperty(i)) {\n        cb(i, list[i]);\n      }\n    }\n  }\n  // Array-like\n  else {\n      for (; i < len; i++) {\n        cb(list[i]);\n      }\n    }\n}\n\nexports.default = each;\nmodule.exports = exports['default'];\n//# sourceMappingURL=each.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (proto) {\n  for (var _len = arguments.length, mixins = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    mixins[_key - 1] = arguments[_key];\n  }\n\n  (0, _each2.default)(mixins, function (mixin) {\n    for (var i in mixin) {\n      if (mixin.hasOwnProperty(i) && !proto[i]) proto[i] = mixin[i];\n    }\n  });\n};\n\nvar _each = require('./each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * # Mixin\n * Apply a mixin, or mixins, to an Object\n *\n * @example\n * mixin(proto, mix, mix2)\n *\n * @module helpers/util/mixin.js\n */\nmodule.exports = exports['default'];\n//# sourceMappingURL=mixin.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Pad\n * Pad a number with leading zeros\n *\n * @param {Number} n\n * @param {Number} w\n * @param {String} c Optional String to pad with\n *\n * @example\n * pad(4, 2);\n *\n * @module helpers/util/pad.js\n */\nfunction pad(n, w, c) {\n  c = c || '0';\n  n = n + '';\n  return n.length >= w ? n : new Array(w - n.length + 1).join(c) + n;\n}\n\nexports.default = pad;\nmodule.exports = exports['default'];\n//# sourceMappingURL=pad.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Trim\n * Trim whitespace on a string.\n *\n * @param {String} str\n *\n * @module helpers/util/trim.js\n */\n\nvar trimRE = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\nfunction trim(str) {\n  return str.replace(trimRE, '');\n}\n\nexports.default = trim;\nmodule.exports = exports['default'];\n//# sourceMappingURL=trim.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _height = require('../helpers/animation/height');\n\nvar _height2 = _interopRequireDefault(_height);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n\n  /**\n   * Set the error state.\n   * @param {String} message Optional\n   */\n  setError: function setError(message) {\n\n    // Animate down\n    if (!this._isMessageVisible()) {\n      this._showMessage();\n    }\n\n    this.clearWarning();\n    this.clearSuccess();\n\n    this.el.setAttribute('data-error', true);\n\n    if (message) {\n      this.setMessage(message);\n    }\n\n    return this;\n  },\n\n\n  /**\n   * Set the error state.\n   */\n  clearError: function clearError() {\n    this.el.removeAttribute('data-error', true);\n    return this;\n  },\n\n\n  /**\n   * Set the warning state.\n   * @param {String} message Optional\n   */\n  setWarning: function setWarning(message) {\n\n    // Animate down\n    if (!this._isMessageVisible()) {\n      this._showMessage();\n    }\n\n    this.clearError();\n    this.clearSuccess();\n\n    this.el.setAttribute('data-warning', true);\n\n    if (message) {\n      this.setMessage(message);\n    }\n\n    return this;\n  },\n\n\n  /**\n   * Set the error state.\n   */\n  clearWarning: function clearWarning() {\n    this.el.removeAttribute('data-warning', true);\n    return this;\n  },\n\n\n  /**\n   * Set the success state.\n   * @param {String} message Optional\n   */\n  setSuccess: function setSuccess(message) {\n\n    // Animate down\n    if (!this._isMessageVisible()) {\n      this._showMessage();\n    }\n\n    this.clearError();\n    this.clearWarning();\n\n    this.el.setAttribute('data-success', true);\n\n    if (message) {\n      this.setMessage(message);\n    }\n\n    return this;\n  },\n\n\n  /**\n   * Set the success state.\n   */\n  clearSuccess: function clearSuccess() {\n    this.el.removeAttribute('data-success', true);\n    return this;\n  },\n\n\n  /**\n   * Clear all messages.\n   */\n  clearMessages: function clearMessages() {\n    this._hideMessage(function () {\n      this.clearError();\n      this.clearWarning();\n      this.clearSuccess();\n    }.bind(this));\n    return this;\n  },\n\n\n  /**\n   * Set the message text.\n   * @param {String} message\n   */\n  setMessage: function setMessage(message) {\n    this.messageEl.innerHTML = message;\n    return this;\n  },\n\n\n  /**\n   * Show the message\n   */\n  _showMessage: function _showMessage() {\n\n    if (!this.messageEl.parentNode) {\n      this.el.appendChild(this.messageEl);\n    }\n\n    (0, _height2.default)({\n      el: this.el,\n      toggleEl: this.messageEl\n    });\n  },\n\n\n  /**\n   * Hide the message.\n   * @param {Function} callback\n   */\n  _hideMessage: function _hideMessage(callback) {\n\n    (0, _height2.default)({\n      el: this.el,\n      toggleEl: this.messageEl,\n      toggleValue: 'none',\n      action: 'collapse',\n      onComplete: callback\n    });\n  },\n\n\n  /**\n   * Is the message currently visible?\n   * @return {Boolean}\n   */\n  _isMessageVisible: function _isMessageVisible() {\n    return this.el.getAttribute('data-error') || this.el.getAttribute('data-warning') || this.el.getAttribute('data-success');\n  }\n}; /**\n    * # Messaging Mixin\n    * Add functionality for showing messages related to a form field.\n    *\n    * @example\n    * mixin(Component, messaging);\n    *\n    * @module mixin/messaging.js\n    */\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=messaging.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Validation Mixin\n * Add functionality for validating a form field's value.\n *\n * @example\n * mixin(Component, validation);\n *\n * @module mixin/validation.js\n */\n\nexports.default = {\n\n  /**\n   * Default validate function. This can be overridden by passing a\n   * custom validate method as a parameter. This really only helps out\n   * of the box for text inputs.\n   */\n  validate: function validate() {\n\n    var validate = this.validatePattern;\n\n    // Nothing to validate.\n    if (!this.onValidate || !validate) {\n      return this;\n    }\n\n    var re = new RegExp(validate);\n\n    this.onValidate(re.test(this.getValue()), this.getValue(), this);\n\n    return this;\n  }\n};\nmodule.exports = exports[\"default\"];\n//# sourceMappingURL=validation.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}