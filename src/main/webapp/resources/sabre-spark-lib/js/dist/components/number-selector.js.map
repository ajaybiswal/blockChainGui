{"version":3,"sources":["components/number-selector.js"],"names":["noop","NumberSelector","el","params","elRequired","_bindEventListenerCallbacks","_addEventListeners","getValue","parseFloat","inputEl","value","setValue","val","isNaN","_getMin","newVal","_getConformedNumber","onChange","setErrorState","opt","setAttribute","removeAttribute","clearValue","increment","_getStep","decrement","_countDecimals","Math","floor","toString","split","length","enable","btns","querySelectorAll","i","len","disable","_cacheElements","querySelector","messageEl","Error","_onClickBound","_onClick","bind","_onInputChangeBound","_onInputChange","_onInputFocusBound","_onInputFocus","_onInputBlurBound","_onInputBlur","_onInputInputBound","_onInputInput","addEventListener","_removeEventListeners","removeEventListener","_getInputPropAsNumber","_getMax","key","getAttribute","num","max","min","step","diff","halfStep","overHalf","stepFractional","absNum","abs","integral","precisionValue","Number","isInteger","toPrecision","undefined","e","target","hasAttribute","preventDefault","onFocus","onBlur","onInput","prototype","_whitelistedParams","defaults","onValidate"],"mappings":"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","file":"number-selector.js","sourcesContent":["/**\n * # NumberSelector\n * An increment/decrement for number inputs.\n *\n * @example\n * new NumberSelector(el);\n *\n * @module components/number-selector.js\n */\nimport BaseComponent from './base';\nimport getParent from '../helpers/traversal/get-parent';\nimport messaging from '../mixins/messaging';\nimport mixin from '../helpers/util/mixin';\nimport validation from '../mixins/validation';\nimport makeElement from '../helpers/dom/make-element';\n\nconst noop = function() {};\n\nclass NumberSelector extends BaseComponent {\n\n  /**\n   * NumberSelector constructor.\n   * @param {Element} el\n   * @param {Object} params\n   */\n  constructor(el, params = {}) {\n\n    params.elRequired = true;\n\n    if (!super(el, params)) {\n      return;\n    }\n\n    this._bindEventListenerCallbacks();\n    this._addEventListeners();\n  }\n\n\n  /**\n   * Get the current value of the number selector.\n   * @return {Number} The current value\n   */\n  getValue() {\n    return parseFloat(this.inputEl.value);\n  }\n\n\n  /**\n   * Set the current value of the number selector.\n   * @param {Number} val\n   */\n  setValue(val) {\n    if ( isNaN(val) ) {\n      val = this._getMin();\n    }\n\n    let newVal = this._getConformedNumber(val);\n    if (newVal !== this.inputEl.value) {\n      this.inputEl.value = newVal;\n      (this.onChange || noop)(newVal, this);\n    }\n    return this;\n  }\n\n  /**\n   * Set/reset error state\n   * @param {Boolean} true: set error state, false: reset\n   */\n  setErrorState(opt) {\n    if(opt){\n      this.el.setAttribute('data-error', '');\n    }\n    else {\n      this.el.removeAttribute('data-error');\n    }\n  }\n\n  /**\n   * Clear the value.\n   */\n  clearValue() {\n    return this.setValue(0);\n  }\n\n\n  /**\n   * Increment by the step value.\n   */\n  increment() {\n    return this.setValue( this.getValue() + this._getStep() );\n  }\n\n\n  /**\n   * Decrement by the step value.\n   */\n  decrement() {\n    return this.setValue( this.getValue() - this._getStep() );\n  }\n\n\n  /**\n   * Get number of digits after the decimal point (fractional part)\n   * @param {Number} val\n   * @return {Number}\n   */\n  _countDecimals(val) {\n    return (!val || isNaN(val) || Math.floor(val) === val) ? 0 : (val.toString().split(\".\")[1].length || 0);\n  }\n\n\n  /**\n   * Enable the input and buttons.\n   */\n  enable() {\n\n    let btns = this.el.querySelectorAll('.spark-number-selector__up, .spark-number-selector__down');\n    let i = 0;\n    let len = btns.length;\n\n    for(; i < len; i++) {\n      btns[i].removeAttribute('disabled');\n    }\n\n    this.inputEl.removeAttribute('disabled');\n\n    return this;\n  }\n\n\n  /**\n   * Disable the input and buttons.\n   */\n  disable() {\n\n    let btns = this.el.querySelectorAll('.spark-number-selector__up, .spark-number-selector__down');\n    let i = 0;\n    let len = btns.length;\n\n    for(; i < len; i++) {\n      btns[i].setAttribute('disabled', '');\n    }\n\n    this.inputEl.setAttribute('disabled', '');\n\n    return this;\n  }\n\n\n  /**\n   * Store a reference to the whole number-selector, as well as the\n   * input element. Also, get some default values from the input\n   * element (min, max, steps).\n   * @param {Element} el\n   */\n  _cacheElements(el) {\n\n    this.el = el;\n    this.inputEl = el.querySelector('input');\n\n    this.messageEl = this.el.querySelector('.spark-number-selector__message') || makeElement('<span class=\"spark-number-selector__message\"></span>');\n\n    if (!this.inputEl) {\n      throw new Error('NumberSelector must include an `<input>` element!');\n    }\n  }\n\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n  _bindEventListenerCallbacks() {\n    this._onClickBound = this._onClick.bind(this);\n    this._onInputChangeBound = this._onInputChange.bind(this);\n    this._onInputFocusBound = this._onInputFocus.bind(this);\n    this._onInputBlurBound = this._onInputBlur.bind(this);\n    this._onInputInputBound = this._onInputInput.bind(this);\n  }\n\n\n  /**\n   * Add event listeners for touchstart and mouse click.\n   */\n  _addEventListeners() {\n    this.el.addEventListener('click', this._onClickBound);\n    this.el.addEventListener('change', this._onInputChangeBound);\n    this.el.addEventListener('focus', this._onInputFocusBound);\n    this.el.addEventListener('blur', this._onInputBlurBound);\n    this.inputEl.addEventListener('input', this._onInputInputBound);\n  }\n\n\n  /**\n   * Remove event listeners for touchstart and mouse click.\n   */\n  _removeEventListeners() {\n    this.el.removeEventListener('click', this._onClickBound);\n    this.el.removeEventListener('change', this._onInputChangeBound);\n    this.el.removeEventListener('focus', this._onInputFocusBound);\n    this.el.removeEventListener('blur', this._onInputBlurBound);\n    this.inputEl.removeEventListener('input', this._onInputInputBound);\n  }\n\n\n  /**\n   * Get the current value of the min property.\n   * @return {Number}\n   */\n  _getMin() {\n    return this._getInputPropAsNumber('min');\n  }\n\n\n  /**\n   * Get the current value of the max property.\n   * @return {Number}\n   */\n  _getMax() {\n    return this._getInputPropAsNumber('max');\n  }\n\n\n  /**\n   * Get the current value of the step property.\n   * @return {Number}\n   */\n  _getStep() {\n    return this._getInputPropAsNumber('step') || 1;\n  }\n\n\n  /**\n   * Get a property as a number.\n   * @param {String} key\n   * @return {Number}\n   */\n  _getInputPropAsNumber(key) {\n    return parseFloat(this.inputEl.getAttribute(key));\n  }\n\n\n  /**\n   * Get the given number within the min/max range of the input element.\n   * @param {Number} num\n   * @return {Number}\n   */\n  _getConformedNumber(num) {\n    let max = this._getMax();\n    let min = this._getMin();\n    let step = this._getStep();\n\n    // Move in increments if we have a defined step size\n    if (step) {\n      let diff = num % step;\n      let halfStep = step / 2;\n      let overHalf = diff >= halfStep;\n      num = overHalf ? (num + (step - diff)) : (num - diff);\n\n      // only use toPrecision if we have fractions\n      let stepFractional = this._countDecimals(this._getStep());\n\n      if (stepFractional > 0) {\n        // get number of digits to left of decimal in num if it is greater than 1\n        let absNum = Math.abs(num);\n\n        let integral = absNum > 1 ? absNum.toString().split(\".\")[0].length : 0;\n\n        // number of significant digits is sum of integral and step fraction\n        let precisionValue = stepFractional + integral;\n\n        num = Number.isInteger(num) ? num : num.toPrecision(precisionValue);\n      }\n    }\n\n    return max !== undefined && num > max ? max : (min !== undefined && num < min ? min : num);\n  }\n\n\n  /**\n   * When either of the buttons are clicked, update the value.\n   * @param {Object} e\n   */\n  _onClick(e) {\n    // IE 11 has a bug where click events for disabled buttons still propagate.\n    // Add a check to ensure that we are not incrementing/decrementing in this scenario\n    if (!e.target.hasAttribute('disabled')) {\n      // The increment button is clicked\n      if (getParent(e.target, '.spark-number-selector__up', this.el)) {\n        e.preventDefault();\n        this.increment();\n      }\n      // The decrement button is clicked\n      else if (getParent(e.target, '.spark-number-selector__down', this.el)) {\n        e.preventDefault();\n        this.decrement();\n      }\n    }\n  }\n\n\n  /**\n   * When the input value changes, max sure we are in bounds.\n   * @param {Object} e\n   */\n  _onInputChange() {\n    this.setValue(parseFloat(this.inputEl.value));\n  }\n\n\n  /**\n   * When the input gains focus.\n   * @param {Object} e\n   */\n  _onInputFocus() {\n    if (this.onFocus) this.onFocus(this.getValue(), this);\n  }\n\n\n  /**\n   * When the input loses focus.\n   * @param {Object} e\n   */\n  _onInputBlur() {\n    if (this.onBlur) this.onBlur(this.getValue(), this);\n  }\n\n  /**\n   * When the input loses focus.\n   * @param {Object} e\n   */\n  _onInputInput() {\n    if (this.onInput) this.onInput(this.getValue(), this);\n  }\n}\n\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\nNumberSelector.prototype._whitelistedParams = ['validate', 'onValidate', 'onChange', 'onFocus', 'onBlur', 'onInput'];\n\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nNumberSelector.prototype.defaults = {\n  el: null,\n  inputEl: null,\n  onValidate: null,\n  onChange: null,\n  onFocus: null,\n  onBlur: null,\n  onInput: null,\n  _onInputChangeBound: null,\n  _onClickBound: null\n};\n\nmixin(NumberSelector.prototype, messaging, validation);\n\nexport default NumberSelector;\n"]}