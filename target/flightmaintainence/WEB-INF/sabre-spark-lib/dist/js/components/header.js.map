{"version":3,"sources":["js/dist/components/node_modules/browser-pack/_prelude.js","js/dist/components/js/dist/components/base.js","js/dist/components/js/dist/components/header.js","js/dist/components/js/dist/components/menu.js","js/dist/components/js/dist/helpers/animation/height.js","js/dist/components/js/dist/helpers/css/transform.js","js/dist/components/js/dist/helpers/dom/add-class.js","js/dist/components/js/dist/helpers/dom/breakpoint.js","js/dist/components/js/dist/helpers/dom/has-class.js","js/dist/components/js/dist/helpers/dom/outer-height.js","js/dist/components/js/dist/helpers/dom/parse-attribute.js","js/dist/components/js/dist/helpers/dom/remove-class.js","js/dist/components/js/dist/helpers/dom/toggle-class.js","js/dist/components/js/dist/helpers/manipulation/append-children.js","js/dist/components/js/dist/helpers/manipulation/insert-before.js","js/dist/components/js/dist/helpers/manipulation/wrap-element.js","js/dist/components/js/dist/helpers/traversal/get-child.js","js/dist/components/js/dist/helpers/traversal/get-index.js","js/dist/components/js/dist/helpers/traversal/get-parent.js","js/dist/components/js/dist/helpers/traversal/get-parents.js","js/dist/components/js/dist/helpers/traversal/has-parent.js","js/dist/components/js/dist/helpers/traversal/matches.js","js/dist/components/js/dist/helpers/util/each.js","js/dist/components/js/dist/helpers/util/trim.js"],"names":[],"mappingsxJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxxpqhPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"header.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _each = require('../helpers/util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * # Base Component\n                                                                                                                                                           * The base class for Spark JS components. This class should never be\n                                                                                                                                                           * instantiated directly.\n                                                                                                                                                           *\n                                                                                                                                                           * @param {Element} el\n                                                                                                                                                           * @param {Object} params\n                                                                                                                                                           *\n                                                                                                                                                           * @module components/base.js\n                                                                                                                                                           */\n\nvar noop = function noop() {};\n\nvar Base = function () {\n\n  /**\n   * Set parameters and cache elements.\n   */\n  function Base(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Base);\n\n    if (params.elRequired && !el) {\n      return;\n    }\n\n    this.setParams(this.defaults || {}, true);\n    this.setParams(params);\n    (this._cacheElements || noop).call(this, el, params);\n    (this._parseParams || noop).call(this);\n  }\n\n  /**\n   * Remove the component from the DOM and prepare for garbage collection by dereferencing values.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n\n\n  Base.prototype.remove = function remove(leaveElement) {\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    if (!leaveElement && this.el && this.el.parentNode) {\n      this.el.parentNode.removeChild(this.el);\n    }\n\n    this.unsetParams(this.defaults);\n\n    return this;\n  };\n\n  /**\n   * Update the component to use a new element or reparse from\n   * the existing element.\n   * @param {Element} el Optional\n   * @param {Object} params Optional\n   */\n\n\n  Base.prototype.update = function update(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    (this._cacheElements || noop).call(this, el || this.el, params);\n    (this._parseParams || noop).call(this);\n\n    if (this._addEventListeners) {\n      this._addEventListeners();\n    }\n\n    return this;\n  };\n\n  /**\n   * Set a hash of parameters if they're whitelisted or we're told to force the set.\n   * This is used to set initial values as well as set passed parameters.\n   * @param {Object} params\n   * @param {Boolean} force Force setting even if the param is not whitelisted.\n   */\n\n\n  Base.prototype.setParams = function setParams(params, force) {\n    var _this = this;\n\n    (0, _each2.default)(params, function (k, v) {\n      if (_this._whitelistedParams.indexOf(k) !== -1 || force) {\n        _this[k] = v;\n      }\n    });\n\n    return this;\n  };\n\n  /**\n   * Unset all parameters.\n   * @param {Array|Object} keys\n   * @param {Object} scope The object to unset the params from. Defaults to `this`.\n   */\n\n\n  Base.prototype.unsetParams = function unsetParams(keys, scope) {\n\n    keys = keys instanceof Array ? keys : Object.keys(keys);\n    scope = scope || this;\n    (0, _each2.default)(keys, function (k) {\n      delete scope[k];\n    });\n\n    return this;\n  };\n\n  return Base;\n}();\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nBase.prototype._whitelistedParams = [];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nBase.prototype.defaults = {};\n\nexports.default = Base;\nmodule.exports = exports['default'];\n//# sourceMappingURL=base.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _menu = require('./menu');\n\nvar _menu2 = _interopRequireDefault(_menu);\n\nvar _toggleClass = require('../helpers/dom/toggle-class');\n\nvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\nvar _addClass = require('../helpers/dom/add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('../helpers/dom/remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nvar _hasClass = require('../helpers/dom/has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _getIndex = require('../helpers/traversal/get-index');\n\nvar _getIndex2 = _interopRequireDefault(_getIndex);\n\nvar _appendChildren = require('../helpers/manipulation/append-children');\n\nvar _appendChildren2 = _interopRequireDefault(_appendChildren);\n\nvar _insertBefore = require('../helpers/manipulation/insert-before');\n\nvar _insertBefore2 = _interopRequireDefault(_insertBefore);\n\nvar _breakpoint = require('../helpers/dom/breakpoint');\n\nvar _getParent = require('../helpers/traversal/get-parent');\n\nvar _getParent2 = _interopRequireDefault(_getParent);\n\nvar _getParents = require('../helpers/traversal/get-parents');\n\nvar _getParents2 = _interopRequireDefault(_getParents);\n\nvar _parseAttribute = require('../helpers/dom/parse-attribute');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\neader\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * A primary page header/navigation.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * new Header(el, {\nptional. Alternate breakpoint values.\nbreakpoints: {\nxs: {\nmin: 0,\nmax: 639\n}\nn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  }\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * });\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module components/header.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar Header = function (_BaseComponent) {\n  _inherits(Header, _BaseComponent);\n\n  /**\n   * Header constructor.\n   * @param {Element} el\n   * @param {Object} params\n   */\n  function Header(el) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Header);\n\n    params.elRequired = true;\n\n    if (!(_this = _possibleConstructorReturn(this, _BaseComponent.call(this, el, params)), _this)) {\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this._bindEventListenerCallbacks();\n    _this._addEventListeners();\n    _this._determineInitialSize();\n    return _possibleConstructorReturn(_this);\n  }\n\n  /**\n   * Update the elements used.\n   * @param {Element} el Optional\n   */\n\n\n  Header.prototype.update = function update(el) {\n\n    this._removeEventListeners();\n    this._removePlaceholder();\n    this._cacheElements(el || this.el);\n    this._parseParams();\n    this._addEventListeners();\n    this._ensureActiveAtMoreSwapIndex();\n    this.checkFixed();\n\n    // Run on the next frame so sizes have updated\n    setTimeout(function () {\n      this._determineMenuSize();\n    }.bind(this), 0);\n\n    return this;\n  };\n\n  /**\n   * Check of we should be fixed.\n   */\n\n\n  Header.prototype.checkFixed = function checkFixed() {\n\n    if (!this.fixed) {\n      return this;\n    }\n\n    var scrollTop = window.pageYOffset !== undefined ? window.pageYOffset : window.document.body.scrollTop;\n    var isCondensed = scrollTop > this.fixedDistance;\n    (0, _toggleClass2.default)(this.el, 'spark-header--condensed', isCondensed);\n    (0, _toggleClass2.default)(document.body, 'spark-header-condensed', isCondensed);\n\n    return this;\n  };\n\n  /**\n   * Store a reference to the tabs list, each tab and each panel.\n   * Set which tab is active, or use the first.\n   * @param {Element} el\n   */\n\n\n  Header.prototype._cacheElements = function _cacheElements(el) {\n\n    this.el = el;\n    this.navEl = this.el.querySelector('.spark-header__nav');\n    this.menuEl = this.navEl && this.navEl.querySelector('.spark-header__menu');\n    this.listEl = this.menuEl && this.menuEl.querySelector('.spark-header__list');\n    this.toggleEl = this.el.querySelector('.spark-header__toggle');\n\n    // Create a new instance of the menu component\n    if (this.menuEl) {\n      this.menu = new _menu2.default(this.menuEl, {\n        onToggle: this._onToggleClickBound = this._onToggleClick.bind(this)\n      });\n    }\n\n    // The items in the list need to show/hide based on the width of the container.\n    // Cache these items so we can manipulate their display independent of what is\n    // currently in the DOM. Also, create the \"More\" dropdown which will be shown\n    // and hidden based on availabile space.\n    if (this.listEl && this.listEl.children.length) {\n      this.listEls = Array.prototype.slice.call(this.listEl.children, 0);\n      this._createListMore();\n    }\n\n    // Create a clone of the header which will NOT be affected by changes in breakpoint.\n    // This lets us continue to measure how many list elements will fit. Since we go to the\n    // \"condensed\" view when we are at the sm/xs breakpoint OR only one item will fit in the nav,\n    // we can't rely on breakpoints alone to determine what to show. Without a cloned placeholder\n    // it is impossible to continue to measure the available space once we show the condensed view.\n    if (this.listEl) {\n      this._createPlaceholder();\n    }\n  };\n\n  /**\n   * Parse parameters from the elements.\n   */\n\n\n  Header.prototype._parseParams = function _parseParams() {\n    this.fixed = this.fixed !== null ? this.fixed : (0, _hasClass2.default)(this.el, 'spark-header--fixed');\n    this.fixedDistance = this.fixedDistance !== null ? this.fixedDistance : (0, _parseAttribute.number)(this.el, 'data-fixed-distance', 10);\n  };\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n\n\n  Header.prototype._bindEventListenerCallbacks = function _bindEventListenerCallbacks() {\n\n    this._determineInitialSizeBound = this._determineInitialSize.bind(this);\n    this._onResizeBound = this._onResize.bind(this);\n    this._onScrollBound = this._onScroll.bind(this);\n    this._onMoreClickBound = this._onMoreClick.bind(this);\n    this._onNavClickBound = this._onNavClick.bind(this);\n  };\n\n  /**\n   * Add event listeners for DOM events.\n   */\n\n\n  Header.prototype._addEventListeners = function _addEventListeners() {\n\n    if (!this.listEl) {\n      return;\n    }\n\n    window.addEventListener('resize', this._onResizeBound);\n    window.addEventListener('orientationchange', this._onResizeBound);\n\n    if (this.listMoreEl) {\n      this.listMoreListEl.addEventListener('click', this._onMoreClickBound);\n    }\n\n    if (this.toggleEl) {\n      this.toggleEl.addEventListener('click', this._onToggleClickBound);\n    }\n\n    if (this.navEl) {\n      this.navEl.addEventListener('click', this._onNavClickBound);\n    }\n\n    if (this.fixed) {\n      window.addEventListener('scroll', this._onScrollBound);\n    }\n  };\n\n  /**\n   * Remove event listeners for DOM events..\n   */\n\n\n  Header.prototype._removeEventListeners = function _removeEventListeners() {\n\n    if (!this.listEl) {\n      return;\n    }\n\n    window.removeEventListener('resize', this._onResizeBound);\n    window.removeEventListener('orientationchange', this._onResizeBound);\n\n    if (this.listMoreEl) {\n      this.listMoreListEl.removeEventListener('click', this._onMoreClickBound);\n    }\n\n    if (this.toggleEl) {\n      this.toggleEl.removeEventListener('click', this._onToggleClickBound);\n    }\n\n    if (this.navEl) {\n      this.navEl.removeEventListener('click', this._onNavClickBound);\n    }\n\n    if (this.fixed) {\n      window.removeEventListener('scroll', this._onScrollBound);\n    }\n  };\n\n  /**\n   * Get the current breakpoint for the header.\n   */\n\n\n  Header.prototype._getCurrentBreakpoint = function _getCurrentBreakpoint() {\n    this.lastBreakpoint = this.currentBreakpoint;\n    this.currentBreakpoint = (0, _breakpoint.get)(this.el.clientWidth, this.breakpoints);\n    this.el.setAttribute('data-breakpoint', this.currentBreakpoint);\n  };\n\n  /**\n   * Create a placeholder for the whole header so that we can keep track\n   * of the width of each child element regardless of whether or not we're\n   * condensed. Condensed styles do not apply to instances of the element\n   * with the placeholder class.\n   */\n\n\n  Header.prototype._createPlaceholder = function _createPlaceholder() {\n\n    var div = document.createElement('div');\n    div.innerHTML = this.navEl.outerHTML;\n\n    var el = div.children[0];\n    el.setAttribute('aria-hidden', true);\n\n    (0, _addClass2.default)(el, 'spark-header__placeholder');\n\n    this.el.appendChild(el);\n\n    // Cache the common elements\n    this.placeholder = {\n      el: el,\n      menuEl: el.querySelector('.spark-header__menu'),\n      listEl: el.querySelector('.spark-header__list')\n    };\n\n    // Add a copy of the \"more\" button to the list so we always know what size it would be\n    if (this.listMoreEl) {\n      this.placeholder.listEl.innerHTML += this.listMoreEl.outerHTML;\n      this.placeholder.listMoreEl = this.placeholder.listEl.querySelector('.spark-header__more');\n    }\n\n    this._disablePlaceholderLinkTab(el);\n  };\n\n  /**\n   * Remove the placeholder\n   */\n\n\n  Header.prototype._removePlaceholder = function _removePlaceholder() {\n\n    if (this.placeholder) {\n      this.placeholder.el.parentNode.removeChild(this.placeholder.el);\n      this.placeholder.menuEl.parentNode.removeChild(this.placeholder.menuEl);\n      this.placeholder.listEl.parentNode.removeChild(this.placeholder.listEl);\n    }\n\n    if (this.listMoreEl) {\n      this.placeholder.listMoreEl.parentNode.removeChild(this.placeholder.listMoreEl);\n    }\n  };\n\n  /**\n   * Disable tabbing for items in the placeholder.\n   * @param {Element} el\n   */\n\n\n  Header.prototype._disablePlaceholderLinkTab = function _disablePlaceholderLinkTab(el) {\n\n    // Set a negative tab index on each link in the placeholder\n    var links = el.querySelectorAll('.spark-menu__list-link, .spark-menu__list-expand');\n    var i = 0;\n    var len = links.length;\n\n    for (; i < len; i++) {\n      links.item(i).setAttribute('tabindex', -1);\n    }\n\n    // Set a negative tab index on each button in the placeholder\n    var buttons = el.querySelectorAll('button');\n    var k = 0;\n    len = buttons.length;\n\n    for (; k < len; k++) {\n      buttons.item(k).setAttribute('tabindex', -1);\n    }\n  };\n\n  /**\n   * Create a place to store overflow items of the list.\n   * Also add this item to the placeholder element so we always know\n   * which size it would be.\n   */\n\n\n  Header.prototype._createListMore = function _createListMore() {\n\n    var div = document.createElement('div');\n    div.innerHTML = '<li><a class=\"spark-menu__list-link spark-menu__ignore\" tabindex=\"0\" title=\"More Items\"><i class=\"spark-icon-menu-ellipsis-horizontal spark-icon--fill\"></i></a><ul class=\"spark-menu__list\"></ul></li>';\n\n    var li = div.children[0];\n    (0, _addClass2.default)(li, 'spark-menu__list-item spark-header__more');\n\n    this.listMoreEl = li;\n    this.listMoreListEl = li.querySelector('ul');\n  };\n\n  /**\n   * Determine the menu size..\n   */\n\n\n  Header.prototype._determineInitialSize = function _determineInitialSize() {\n    (0, _addClass2.default)(this.el, 'spark-header--visible');\n    this._ensureActiveAtMoreSwapIndex();\n    this._determineMenuSize();\n  };\n\n  /**\n   * Determine how many nav items can fit.\n   * @param {Boolean} isSwap Optional Is this a swapping event? If so, ignore redundancy checks.\n   */\n\n\n  Header.prototype._determineMenuSize = function _determineMenuSize(isSwap) {\n\n    // Don't do anything w/o primary nav.\n    if (!this.listEls || !this.listEls.length) {\n      return;\n    }\n\n    // If we're at the XS or SM breakpoint, don't worry about this stuff.\n    if (this._isMenuBreakpoint(['xs', 'sm'])) {\n      this._removeListMore();\n      return this._toggleCollapsed(true);\n    }\n\n    // Get the items to show and hide\n    var items = this._getItemsToShowAndHide();\n\n    // Add a class saying that the size has been determined. This removes the overflow:hidden\n    // so that dropdowns will appear.\n    (0, _addClass2.default)(this.el, 'spark-header--overflow-checked');\n\n    // If there are less than two elements to show and we have hidden elements, collapse the nav.\n    if (items.show.length < 2 && items.hide.length) {\n      this._removeListMore();\n      return this._toggleCollapsed(true);\n    }\n\n    // We aren't at the XS breakpoint and there aren't too few items to show, so disable collapsing\n    this._toggleCollapsed(false);\n\n    // If the number of children to hide is the same as those already hidden, stop.\n    if (items.hide.length === this.listMoreListEl.children.length && !isSwap) {\n\n      if (!items.hide.length) {\n        this._removeListMore();\n      }\n\n      return;\n    }\n\n    // Add the elements we're supposed to show before the \"more element\"\n    (0, _insertBefore2.default)(this.listEl, this.listMoreEl, items.show);\n\n    // If we have items to hide, append them to the more element\n    if (items.hide.length) {\n      (0, _appendChildren2.default)(this.listMoreListEl, items.hide);\n    }\n    // Otherwise, remove the more element\n    else {\n        this._removeListMore();\n      }\n  };\n\n  /**\n   * Listen for the ready state change and rerun the menu size determination.\n   */\n\n\n  Header.prototype._listenForReadyStateChange = function _listenForReadyStateChange() {\n\n    // Already loaded\n    if (document.readyState === 'complete' || document.readyState === 'loaded') {\n      return;\n    }\n\n    // Bound listener\n    var run = function () {\n      if (document.readyState === 'complete' || document.readyState === 'loaded') {\n        this._determineMenuSize();\n        document.removeEventListener('readystatechange', run);\n      }\n    }.bind(this);\n\n    // Only run once\n    document.addEventListener('readystatechange', run);\n  };\n\n  /**\n   * Check the primary nav breakpoint.\n   * @param {String|Array} name A string or array of string names of breakpoints to check for\n   */\n\n\n  Header.prototype._isMenuBreakpoint = function _isMenuBreakpoint(name) {\n    this._getCurrentBreakpoint();\n    return name instanceof Array ? name.indexOf(this.currentBreakpoint) !== -1 : this.currentBreakpoint === 'xs';\n  };\n\n  /**\n   * Get the items to show and hide.\n   * @return {Object}\n   */\n\n\n  Header.prototype._getItemsToShowAndHide = function _getItemsToShowAndHide() {\n\n    var width = this.placeholder.listEl.clientWidth;\n    var children = this.placeholder.listEl.children;\n    var i = 0;\n    var len = children.length;\n    var hideIndex = -1;\n\n    this._addListMore();\n\n    // Always include the width of the more button.\n    var childrenWidth = this.placeholder.listMoreEl.clientWidth || 0;\n\n    // Loop through the children until we hit a point where they don't fit anymore\n    for (; i < len && hideIndex === -1; i++) {\n      childrenWidth += children[i].clientWidth;\n      if (childrenWidth > width) {\n        hideIndex = i;\n      }\n    }\n\n    // Find all the children that fit and don't fit\n    var items = {\n      show: hideIndex !== -1 ? Array.prototype.slice.call(this.listEls, 0, hideIndex) : this.listEls,\n      hide: hideIndex !== -1 ? Array.prototype.slice.call(this.listEls, hideIndex) : []\n    };\n\n    // If we have an index to swap for the last \"show\" element, replace that element\n    if (this.moreSwapIndex > -1 && this.moreSwapIndex >= items.show.length) {\n\n      // Remove the last element from the show array\n      var toHide = items.show.splice(items.show.length - 1, 1)[0];\n\n      // Get the index to remove from the hide array. Account for the offset.\n      var toShowIndex = this.moreSwapIndex - hideIndex;\n\n      // Remove the desired element from the hide array\n      var toShow = items.hide.splice(toShowIndex, 1)[0];\n\n      // Add the toShow element to the end of the show array\n      items.show.push(toShow);\n\n      // Insert the toHide element into the hide array at the position of\n      // the element we just removed from the hide array.\n      items.hide.splice(toShowIndex, 0, toHide);\n    }\n\n    return items;\n  };\n\n  /**\n   * Ensure that any active item is set to the more swap index. This ensures\n   * that the active item is always visible on the screen.\n   */\n\n\n  Header.prototype._ensureActiveAtMoreSwapIndex = function _ensureActiveAtMoreSwapIndex() {\n\n    if (!this.listEls || !this.listEls.length) {\n      return;\n    }\n\n    var el = this.el.querySelector('[class*=\"list-item\"].active');\n    if (el) {\n      var parents = (0, _getParents2.default)(el, '.spark-menu__list-item', this.el);\n\n      if (parents && parents[parents.length - 1]) {\n        el = parents[parents.length - 1];\n      }\n\n      var index = (0, _getIndex2.default)(this.listEls, el);\n\n      if (index !== this.moreSwapIndex) {\n        this.moreSwapIndex = index;\n      }\n    }\n  };\n\n  /**\n   * Add a placeholder for overflow items to the list.\n   */\n\n\n  Header.prototype._addListMore = function _addListMore() {\n    if (this.listMoreEl.parentNode !== this.listEl) {\n      this.listEl.appendChild(this.listMoreEl);\n    }\n  };\n\n  /**\n   * Remove a placeholder for overflow items from the primary nav.\n   */\n\n\n  Header.prototype._removeListMore = function _removeListMore() {\n    if (this.listMoreEl.parentNode) {\n      this.listMoreEl.parentNode.removeChild(this.listMoreEl);\n    }\n  };\n\n  /**\n   * Reset the children of the primary navigation.\n   */\n\n\n  Header.prototype._resetMenuChildren = function _resetMenuChildren() {\n    this.moreSwapIndex = -1;\n    (0, _removeClass2.default)(this.el, 'spark-header--overflow-checked');\n    (0, _appendChildren2.default)(this.listEl, this.listEls);\n  };\n\n  /**\n   * Toggle the collapsed nav style.\n   * @param {Boolean} enable\n   */\n\n\n  Header.prototype._toggleCollapsed = function _toggleCollapsed(enable) {\n\n    // Same collapsed state is already set\n    if (enable === this.isCollapsed) {\n      return;\n    }\n\n    // Reset children and remove a special no-animate class to top-level items when we collapse\n    if (enable) {\n      this._enableTopLevelToggling();\n      this._resetMenuChildren();\n    } else {\n      if (this.menu) {\n        this.menu._removeAllCachedLists();\n      }\n      this._disableTopLevelToggling();\n    }\n\n    this.isCollapsed = enable;\n    (0, _toggleClass2.default)(this.el, 'spark-header--collapsed', enable);\n    (0, _toggleClass2.default)(this.el, 'spark-header--visible', !enable);\n  };\n\n  /**\n   * Enable toggling on top-level items.\n   */\n\n\n  Header.prototype._enableTopLevelToggling = function _enableTopLevelToggling() {\n\n    var i = 0;\n    var len = this.listEls.length;\n\n    for (; i < len; i++) {\n      (0, _removeClass2.default)(this.listEls[i], 'spark-no-animate');\n    }\n  };\n\n  /**\n   * Disable toggling on top-level items.\n   */\n\n\n  Header.prototype._disableTopLevelToggling = function _disableTopLevelToggling() {\n\n    var i = 0;\n    var len = this.listEls.length;\n\n    for (; i < len; i++) {\n      (0, _addClass2.default)(this.listEls[i], 'spark-no-animate');\n    }\n  };\n\n  /**\n   * When the window resizes, redetermine the size of the primary nav elements.\n   */\n\n\n  Header.prototype._onResize = function _onResize() {\n\n    // Ensure that any active item we may have is at the swap index\n    this._ensureActiveAtMoreSwapIndex();\n    this._determineMenuSize();\n\n    // If we are fixed, do the scroll check\n    if (this.fixed) {\n      this.checkFixed();\n    }\n  };\n\n  /**\n   * Check to see if the header should be fixed.\n   * @param {Object} e\n   */\n\n\n  Header.prototype._onScroll = function _onScroll() {\n    this.checkFixed();\n  };\n\n  /**\n   * When a link in the more list is clicked, swap it with the last element in the visible list.\n   * @param {Object} e\n   */\n\n\n  Header.prototype._onMoreClick = function _onMoreClick(e) {\n\n    // Don't do any swapping if we're in a collapsed state\n    if (this.isCollapsed) {\n      return;\n    }\n\n    // Get the index of the clicked element\n    var li = (0, _getParent2.default)(e.target, 'li', this.listMoreListEl);\n\n    // Save the index of the element to be swapped\n    this.moreSwapIndex = (0, _getIndex2.default)(this.listEls, li);\n\n    // Redetermine the primary nav size\n    this._determineMenuSize(true);\n  };\n\n  /**\n   * When the toggle is clicked, toggle the active state on the nav\n   * @param {Object} e\n   */\n\n\n  Header.prototype._onToggleClick = function _onToggleClick(e) {\n    e.preventDefault();\n    this.isActive = !this.isActive;\n    (0, _toggleClass2.default)(this.navEl, 'active', this.isActive);\n    this.menu._openActiveParents();\n  };\n\n  /**\n   * When the nav is clicked, set to inactive.\n   * @param {Object} e\n   */\n\n\n  Header.prototype._onNavClick = function _onNavClick(e) {\n    if (e.target === this.navEl && this.isCollapsed) {\n      this.isActive = !this.isActive;\n      (0, _removeClass2.default)(this.navEl, 'active');\n    }\n  };\n\n  return Header;\n}(_base2.default);\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nHeader.prototype._whitelistedParams = ['breakpoints', 'fixed', 'fixedDistance'];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nHeader.prototype.defaults = {\n  el: null,\n  fixed: null,\n  fixedDistance: null,\n  navEl: null,\n  menuEl: null,\n  listEl: null,\n  listEls: null,\n  listMoreEl: null,\n  listMoreListEl: null,\n  placeholder: null,\n  toggleEl: null,\n  lastBreakpoint: null,\n  currentBreakpoint: null,\n  isActive: false,\n  isCollapsed: null,\n  moreSwapIndex: -1,\n  menu: null,\n  breakpoints: null,\n  _onResizeBound: null,\n  _onScrollBound: null,\n  _onMoreClickBound: null,\n  _onToggleClickBound: null,\n  _onNavClickBound: null\n};\n\nexports.default = Header;\nmodule.exports = exports['default'];\n//# sourceMappingURL=header.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _height = require('../helpers/animation/height');\n\nvar _height2 = _interopRequireDefault(_height);\n\nvar _transform = require('../helpers/css/transform');\n\nvar _transform2 = _interopRequireDefault(_transform);\n\nvar _addClass = require('../helpers/dom/add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('../helpers/dom/remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nvar _hasClass = require('../helpers/dom/has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _hasParent = require('../helpers/traversal/has-parent');\n\nvar _hasParent2 = _interopRequireDefault(_hasParent);\n\nvar _getParent = require('../helpers/traversal/get-parent');\n\nvar _getParent2 = _interopRequireDefault(_getParent);\n\nvar _getParents = require('../helpers/traversal/get-parents');\n\nvar _getParents2 = _interopRequireDefault(_getParents);\n\nvar _getChild = require('../helpers/traversal/get-child');\n\nvar _getChild2 = _interopRequireDefault(_getChild);\n\nvar _wrapElement = require('../helpers/manipulation/wrap-element');\n\nvar _wrapElement2 = _interopRequireDefault(_wrapElement);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\nenu\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * new Menu(el, {\nptional. Callback method for when the menu toggles.\nonToggle: function(){}\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * });\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module components/menu.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar noop = function noop() {};\n\nvar Menu = function (_BaseComponent) {\n  _inherits(Menu, _BaseComponent);\n\n  /**\n   * Menu constructor.\n   * @param {Element} el\n   * @param {Object} params\n   */\n  function Menu(el) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Menu);\n\n    params.elRequired = true;\n\n    if (!(_this = _possibleConstructorReturn(this, _BaseComponent.call(this, el, params)), _this)) {\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this._bindEventListenerCallbacks();\n    _this._addEventListeners();\n    _this._checkAnimation();\n    return _possibleConstructorReturn(_this);\n  }\n\n  /**\n   * Store a reference to the tabs list, each tab and each panel.\n   * Set which tab is active, or use the first.\n   * @param {Element} el\n   */\n\n\n  Menu.prototype._cacheElements = function _cacheElements(el) {\n    this.el = el;\n    this.toggleEl = this.el.querySelector('.spark-menu__toggle');\n  };\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n\n\n  Menu.prototype._bindEventListenerCallbacks = function _bindEventListenerCallbacks() {\n    this._onClickBound = this._onClick.bind(this);\n    this._onFocusBound = this._onFocus.bind(this);\n    this._onBlurBound = this._onBlur.bind(this);\n    this._onKeydownBound = this._onKeydown.bind(this);\n  };\n\n  /**\n   * Add event listeners for DOM events.\n   */\n\n\n  Menu.prototype._addEventListeners = function _addEventListeners() {\n    this.el.addEventListener('click', this._onClickBound);\n    this.el.addEventListener('focus', this._onFocusBound, true);\n    this.el.addEventListener('blur', this._onBlurBound, true);\n    this.el.addEventListener('keydown', this._onKeydownBound);\n  };\n\n  /**\n   * Remove event listeners for DOM events..\n   */\n\n\n  Menu.prototype._removeEventListeners = function _removeEventListeners() {\n    this.el.removeEventListener('click', this._onClickBound);\n    this.el.removeEventListener('focus', this._onFocusBound);\n    this.el.removeEventListener('blur', this._onBlurBound);\n    this.el.removeEventListener('keydown', this._onKeydownBound);\n  };\n\n  /**\n   * Toggle the open state of an item.\n   * @param {Element} item\n   */\n\n\n  Menu.prototype._toggleItem = function _toggleItem(item) {\n\n    if ((0, _hasClass2.default)(item, 'open')) {\n      this._closeItem(item);\n    } else {\n      this._openItem(item);\n    }\n  };\n\n  /**\n   * Toggle aria-checked state of the Expand/Collapse toggle carets\n   * @param {Element} item\n   */\n\n\n  Menu.prototype._toggleAriaCheckedState = function _toggleAriaCheckedState(item) {\n    if (item.hasAttribute('aria-checked')) {\n      var ariaState = item.getAttribute('aria-checked') === 'true';\n      item.setAttribute('aria-checked', String(!ariaState));\n    }\n  };\n\n  /**\n   * Check for a nested list and create the wrappers needed\n   * for animating the lists\n   *\n   */\n\n\n  Menu.prototype._checkAnimation = function _checkAnimation() {\n    if (this.el.querySelector('.spark-menu__list-next')) {\n      this.cachedList = this.cachedList || [];\n      this._createMenuAnimationWrapper();\n      this._animateListChange();\n    }\n  };\n\n  /**\n   * Create wrapper class to help with animation of sliding lists\n   *\n   */\n\n\n  Menu.prototype._createMenuAnimationWrapper = function _createMenuAnimationWrapper() {\n    if (this.wrapperEl) {\n      return;\n    }\n\n    var wrapperEl = document.createElement('div');\n    (0, _addClass2.default)(wrapperEl, 'spark-menu__animation-wrapper');\n    (0, _wrapElement2.default)(this.el.querySelector('.spark-menu__list'), wrapperEl);\n    this.wrapperEl = wrapperEl;\n  };\n\n  /**\n   * Animate the position of the animation wrapper. Optionally, do\n   * so immediately without waiting for an animation.\n   * @param {Boolean} noAnimate\n   */\n\n\n  Menu.prototype._animateListChange = function _animateListChange(noAnimate) {\n\n    if (noAnimate) {\n      (0, _addClass2.default)(this.wrapperEl, 'no-animate');\n    }\n\n    this.wrapperEl.setAttribute('style', (0, _transform2.default)('translateX', '-' + this.cachedList.length * 100 + '%'));\n\n    if (noAnimate) {\n      setTimeout(function () {\n        (0, _removeClass2.default)(this.wrapperEl, 'no-animate');\n      }.bind(this), 1);\n    }\n  };\n\n  /**\n   * Append list to menu element\n   * @param {Element} list\n   * @param {Boolean} noAnimate\n   */\n\n\n  Menu.prototype._appendList = function _appendList(item, noAnimate) {\n\n    // Create wrapper\n    this._createMenuAnimationWrapper();\n\n    var newList = item.cloneNode(true);\n    (0, _addClass2.default)(newList, 'nestedList');\n    newList.setAttribute('data-nested-list-id', newList.getAttribute('id'));\n    newList.removeAttribute('id');\n\n    if (this.wrapperEl) {\n      // Add child node to wrapper\n      this.wrapperEl.appendChild(newList);\n      // Add to cached Array to keep track of all added lists\n      this.cachedList.push(newList);\n      // Slide navigation\n      this._animateListChange(noAnimate);\n    }\n  };\n\n  /**\n   * Remove list to nav\n   *\n   */\n\n\n  Menu.prototype._removeLastList = function _removeLastList() {\n    // If there are any items to remove\n    if (this.cachedList.length) {\n      // Retrieve last item from list\n      var removeElement = this.cachedList.pop();\n      if (this.wrapperEl) {\n        // Slide navigation\n        this._animateListChange();\n      }\n      window.setTimeout(function () {\n        // Remove itself from DOM\n        removeElement.parentNode.removeChild(removeElement);\n      }, 250);\n    }\n  };\n\n  /**\n   * Remove all lists from panel menu\n   *\n   */\n\n\n  Menu.prototype._removeAllCachedLists = function _removeAllCachedLists() {\n    if (this.cachedList) {\n      // If there are any items to remove\n      while (this.cachedList.length) {\n        // While there are still items, remove them\n        this._removeLastList();\n      }\n    }\n  };\n\n  /**\n   * Finds and returns the next nested list\n   * @param {Object} item\n   * @return {Object}\n   */\n\n\n  Menu.prototype._getNextList = function _getNextList(item) {\n    return item.querySelector('.spark-menu__list-next') ? document.querySelector(item.querySelector('.spark-menu__list-next').getAttribute('data-menu')) : null;\n  };\n\n  /**\n   * Open an item by animating it.\n   * @param {Object} item\n   */\n\n\n  Menu.prototype._openItem = function _openItem(item) {\n\n    // Item is already open\n    if ((0, _hasClass2.default)(item, 'open')) {\n      return;\n    }\n\n    (0, _height2.default)({\n      el: item,\n      toggleEl: '.spark-menu__list'\n    });\n\n    (0, _addClass2.default)(item, 'open');\n  };\n\n  /**\n   * Close an item by animating it shut.\n   * @param {Object} item\n   */\n\n\n  Menu.prototype._closeItem = function _closeItem(item) {\n\n    // Item is already closed\n    if (!(0, _hasClass2.default)(item, 'open')) {\n      return;\n    }\n\n    (0, _height2.default)({\n      el: item,\n      toggleEl: '.spark-menu__list',\n      toggleValue: 'none',\n      action: 'collapse'\n    });\n\n    (0, _removeClass2.default)(item, 'open');\n  };\n\n  /**\n   * Make an item active.\n   * @param {Element} item\n   */\n\n\n  Menu.prototype._activateItem = function _activateItem(item) {\n\n    // Item is already active\n    if ((0, _hasClass2.default)(item, 'active')) {\n      return;\n    }\n\n    // Deactivate any active items\n    var parents = (0, _getParents2.default)(item, '.spark-menu__list', this.el);\n    this._deactivateItems(parents[parents.length - 1]);\n    this._deactivateItemSiblings(item);\n\n    // Add the active class\n    (0, _addClass2.default)(item, 'active');\n\n    // If there is a parent that is also a list item, open it.\n    this._activateItemParents(item, this.el);\n  };\n\n  /**\n   * Activate parent items.\n   * @param {Element} el\n   * @param {Element} limitEl\n   */\n\n\n  Menu.prototype._activateItemParents = function _activateItemParents(el, limitEl) {\n\n    var parents = (0, _getParents2.default)(el.parentNode, '[class*=\"list-item\"]', limitEl);\n\n    var i = 0;\n    var len = parents.length;\n\n    // Add the active class\n    for (; i < len; i++) {\n      this._openItem(parents[i]);\n      (0, _addClass2.default)(parents[i], 'child-active');\n    }\n  };\n\n  /**\n   * Deactivate items.\n   * @param {Element} el\n   */\n\n\n  Menu.prototype._deactivateItems = function _deactivateItems(el) {\n\n    var actives = el.querySelectorAll('[class*=\"list-item\"].active');\n    var i = 0;\n    var len = actives.length;\n\n    // Remove the active class\n    for (; i < len; i++) {\n      (0, _removeClass2.default)(actives.item(i), 'active');\n    }\n  };\n\n  /**\n   * Deactivate siblings items.\n   * @param {Element} el\n   */\n\n\n  Menu.prototype._deactivateItemSiblings = function _deactivateItemSiblings(el) {\n\n    var actives = el.parentNode.querySelectorAll('[class*=\"list-item\"].child-active');\n    var i = 0;\n    var len = actives.length;\n\n    // Remove the active class\n    for (; i < len; i++) {\n      (0, _removeClass2.default)(actives[i], 'child-active');\n      (0, _removeClass2.default)(actives[i], 'open');\n    }\n  };\n\n  /**\n   * Open the parents of the active item.\n   *\n   */\n\n\n  Menu.prototype._openActiveParents = function _openActiveParents() {\n\n    var activeItem = this.el.querySelector('.active');\n    if (activeItem) {\n      var parentItems = (0, _getParents2.default)(activeItem, '.spark-menu__list-item', this.el);\n      var itemLinks;\n      var nextList;\n\n      for (var i = parentItems.length - 1; i >= 0; i--) {\n        itemLinks = (0, _getChild2.default)(parentItems[i], '.spark-menu__list-links');\n        if (itemLinks && itemLinks.querySelector('.spark-menu__list-next')) {\n          nextList = this._getNextList(parentItems[i]);\n          if (nextList && !this._cachedListContainsID(nextList.getAttribute('id'))) {\n            this._appendList(nextList, true);\n          }\n        } else {\n          (0, _addClass2.default)(parentItems[i], 'open');\n        }\n      }\n    }\n  };\n\n  /**\n   * Check if the cached list contains a certain ID\n   * @param {String} id\n   * @return {Boolean}\n   */\n\n\n  Menu.prototype._cachedListContainsID = function _cachedListContainsID(id) {\n    var i = this.cachedList.length;\n    while (i--) {\n      if (this.cachedList[i].getAttribute('data-nested-list-id') === id) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * When an item is clicked, make it active. Determine if the click was on an expand\n   * button and open the list if so.\n   * @todo: It should be possible to opt out of this behavior.\n   * @param {Object} e\n   */\n\n\n  Menu.prototype._onClick = function _onClick(e) {\n\n    // Don't make forms active\n    if ((0, _getParent2.default)(e.target, 'form', this.el)) {\n      return;\n    }\n\n    // Toggle the visibility of the menu?\n    var toggle = e.target === this.toggleEl || (0, _hasParent2.default)(e.target, this.toggleEl);\n    if (toggle) {\n      return (this.onToggle || noop)(e, this);\n    }\n\n    // Is there a parent to open and an item?\n    var open = (0, _getParent2.default)(e.target, '.spark-menu__list-expand', this.el);\n    var item = (0, _getParent2.default)(e.target, '.spark-menu__list-item', this.el);\n\n    // If we have no item or have been told to ignore the item\n    if (!item || (0, _getParent2.default)(e.target, '.spark-menu__ignore', this.el)) {\n      return;\n    }\n    if (open) {\n      this._toggleAriaCheckedState(open);\n      return this._toggleItem(item);\n    }\n\n    // Check if we have a valid item and we aren't inside the expanded header\n    if (item && !(0, _hasParent2.default)(e.target, document.querySelector('.spark-header--visible'))) {\n\n      var next = this._getNextList(item);\n\n      if (next && (0, _hasClass2.default)(e.target, 'spark-menu__list-next')) {\n        // Active item\n        this._activateItem(item);\n        this._appendList(next);\n        return;\n      }\n\n      var back = (0, _getParent2.default)(e.target, '.spark-menu__list-back', item);\n\n      if (back && (0, _hasClass2.default)(e.target, 'spark-menu__list-back')) {\n        this._removeLastList();\n        return;\n      }\n    }\n\n    // Active item\n    this._activateItem(item);\n  };\n\n  /**\n   * When the space or enter key is pressed on a focused item, make it active.\n   * Determine if the click was on an expand button or link and open the list if so.\n   * @todo: It should be possible to opt out of this behavior.\n   * @param {Object} e\n   */\n\n\n  Menu.prototype._onKeydown = function _onKeydown(e) {\n    var code = e.keyCode || e.which;\n\n    // Don't make forms active\n    if ((0, _getParent2.default)(e.target, 'form', this.el)) {\n      return;\n    }\n\n    // Toggle the visibility of the menu?\n    var toggle = e.target === this.toggleEl || (0, _hasParent2.default)(e.target, this.toggleEl);\n    if (toggle) {\n      return (this.onToggle || noop)(e, this);\n    }\n\n    // Is there a parent to open and an item?\n    var open = (0, _getParent2.default)(e.target, '.spark-menu__list-expand', this.el);\n    var item = (0, _getParent2.default)(e.target, '.spark-menu__list-item', this.el);\n\n    // If we have no item or have been told to ignore the item\n    if (!item || (0, _getParent2.default)(e.target, '.spark-menu__ignore', this.el)) {\n      return;\n    }\n    if (open) {\n      if (code === 32 || code === 13) {\n        e.preventDefault();\n        this._toggleAriaCheckedState(open);\n        return this._toggleItem(item);\n      }\n    }\n\n    // Check if we have a valid item and we aren't inside the expanded header\n    if (item && !(0, _hasParent2.default)(e.target, document.querySelector('.spark-header--visible'))) {\n\n      var next = this._getNextList(item);\n\n      if (next && (0, _hasClass2.default)(e.target, 'spark-menu__list-next')) {\n        if (code === 32 || code === 13) {\n          e.preventDefault();\n          // Active item\n          this._activateItem(item);\n          this._appendList(next);\n          return;\n        }\n      }\n\n      var back = (0, _getParent2.default)(e.target, '.spark-menu__list-back', item);\n\n      if (back && (0, _hasClass2.default)(e.target, 'spark-menu__list-back')) {\n        if (code === 32 || code === 13) {\n          e.preventDefault();\n\n          this._removeLastList();\n          return;\n        }\n      }\n    }\n\n    if (code === 32 || code === 13) {\n      this._activateItem(item);\n    }\n  };\n\n  /**\n   * Keep track of when items have focus.\n   * @param {Object} e\n   */\n\n\n  Menu.prototype._onFocus = function _onFocus(e) {\n\n    var parent = e.target;\n    var lastParent = parent;\n\n    while (parent) {\n      parent = (0, _getParent2.default)(lastParent.parentNode, '.spark-menu__list-item', this.el);\n      if (!parent || parent === lastParent) break;\n      (0, _addClass2.default)(parent, 'has-focus');\n      lastParent = parent;\n    }\n  };\n\n  /**\n   * Keep track of when items lose focus.\n   * @param {Object} e\n   */\n\n\n  Menu.prototype._onBlur = function _onBlur(e) {\n\n    var parent = e.target;\n    var lastParent = parent;\n\n    while (parent) {\n      parent = (0, _getParent2.default)(lastParent.parentNode, '.spark-menu__list-item', this.el);\n      if (!parent || parent === lastParent) break;\n      (0, _removeClass2.default)(parent, 'has-focus');\n      lastParent = parent;\n    }\n  };\n\n  return Menu;\n}(_base2.default);\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nMenu.prototype._whitelistedParams = ['onToggle'];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nMenu.prototype.defaults = {\n  cachedList: null,\n  el: null,\n  toggleEl: null,\n  wrapperEl: null,\n  onToggle: null,\n  _onClickBound: null,\n  _onFocusBound: null,\n  _onBlurBound: null,\n  _onKeydownBound: null\n};\n\nexports.default = Menu;\nmodule.exports = exports['default'];\n//# sourceMappingURL=menu.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _outerHeight = require('../dom/outer-height');\n\nvar _outerHeight2 = _interopRequireDefault(_outerHeight);\n\nvar _addClass = require('../dom/add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('../dom/remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nvar _hasClass = require('../dom/has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _toggleClass = require('../dom/toggle-class');\n\nvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar noop = function noop() {}; /**\n                                * # Animate Height\n                                * Animate the height of an element since we can't do this w/ pure CSS. Sigh.\n                                *\n                                * @example\n                                * animateHeight({\n                                *   el: ...,\n                                *   toggleEl: ...,\n                                *   // Optional params\n                                *   action: 'collapse'|'expand',\n                                *   heightAnimationClass: 'spark-animate-height',\n                                *   opacityAnimationClass: 'spark-animate-opacity',\n                                *   toggleProperty: 'display'|'overflow'|'visibility',\n                                *   toggleValue: 'block'|'none'|'visible'|'hidden',\n                                *   animationDuration: 250\n                                * });\n                                *\n                                * @module helpers/animation/height.js\n                                */\n\nvar runningAnimations = {\n  els: [],\n  completeCallbacks: []\n};\n\n/**\n * Get the inverse toggle value\n * @param  {String} property\n * @param  {String} originalValue\n * @return {String}\n */\nfunction getInverseToggleValue(el, property, originalValue) {\n\n  // Get the value to toggle to for the given property\n  switch (property) {\n    case 'overflow':\n    case 'visibility':\n      return originalValue === 'visible' ? 'hidden' : 'visible';\n    default:\n      return originalValue === 'block' || originalValue === 'inline-block' ? 'none' : 'block';\n  }\n}\n\n/**\n * When an animation is complete, clean up and run the callback.\n * @param  {Object} params\n */\nfunction onComplete(params) {\n\n  // Reset toggle el visibility\n  if (params.toggleClassName) {\n    (0, _toggleClass2.default)(params.el, params.toggleClassName, !params.collapse);\n  } else {\n    params.toggleEl.style[params.toggleProperty] = '';\n  }\n\n  // Remove the height property\n  params.el.style.height = '';\n  params.toggleEl.style.height = '';\n  params.toggleEl.style.marginBottom = '';\n  params.toggleEl.style.marginTop = '';\n\n  // Remove the spark-animate-height class so the transitions no longer apply\n  (0, _removeClass2.default)(params.el, params.heightAnimationClass);\n  (0, _removeClass2.default)(params.toggleEl, params.heightAnimationClass);\n\n  // Run the callback\n  params.onComplete();\n\n  // Remove the element and callback from their respective arrays\n  var runningIndex = runningAnimations.els.indexOf(params.el);\n  runningAnimations.els.splice(runningIndex, 1);\n  runningAnimations.completeCallbacks.splice(runningIndex, 1);\n}\n\n/**\n * @param {Object} params\n */\nfunction animateHeight(params) {\n\n  params = params || {};\n\n  var el = params.el;\n\n  if (!el) {\n    return;\n  }\n\n  var collapse = params.action && params.action === 'collapse';\n  var heightAnimationClass = params.heightAnimationClass || 'spark-animate-height';\n\n  // Allow for elements to be passed or selector strings\n  var toggleEl = typeof params.toggleEl === 'string' ? el.querySelector(params.toggleEl) : params.toggleEl;\n\n  // No element to be switching with toggling so we can't determine the desired height to animate to.\n  if (!toggleEl || (0, _hasClass2.default)(el, 'spark-no-animate')) {\n    return;\n  }\n\n  var toggleClassName = params.toggleClass;\n\n  // The style property to use when toggling visibility\n  var toggleProperty = params.toggleProperty || 'display';\n  var toggleStyles = window.getComputedStyle(toggleEl);\n  var originalToggleValue = toggleStyles[toggleProperty];\n  var toggleValue = params.toggleValue || getInverseToggleValue(toggleProperty, originalToggleValue);\n\n  // If we are already animating, stop now.\n  var runningIndex = runningAnimations.els.indexOf(el);\n  if (runningIndex !== -1) {\n\n    var completeCallback = runningAnimations.completeCallbacks[runningIndex];\n    if (completeCallback) {\n      clearTimeout(completeCallback);\n    }\n\n    onComplete({\n      el: el,\n      toggleEl: toggleEl,\n      onComplete: params.onComplete || noop,\n      collapse: collapse,\n      toggleProperty: toggleProperty,\n      toggleClassName: toggleClassName,\n      toggleValue: toggleValue,\n      heightAnimationClass: heightAnimationClass\n    });\n  }\n\n  // Store the current height\n  var originalHeight = (0, _outerHeight2.default)(el);\n\n  // Toggle the visible property\n  if (toggleClassName) {\n    (0, _toggleClass2.default)(el, toggleClassName, !collapse);\n  } else {\n    toggleEl.style[toggleProperty] = toggleValue;\n  }\n\n  // When measuring the size for a collapse, we have to wait a tic for it to be\n  // accurate. Not sure why. Ugh.\n  if (collapse) {\n    setTimeout(runAnimation, 0);\n  } else {\n    runAnimation();\n  }\n\n  function runAnimation() {\n\n    // Now that the toggle el is taking up space, get the new height which we will be animating to\n    var targetElHeight = (0, _outerHeight2.default)(el);\n\n    // We need to store the original and target toggle element heights. They differ depending on\n    // whether we are going to expand or collapse.\n    var targetToggleElHeight = void 0;\n    var originalToggleElHeight = void 0;\n\n    // If we are collapsing, reset the toggle style and set it when we're done. Set the height so\n    // that we can animate down to 0 or up to the target height.\n    if (collapse) {\n\n      if (toggleClassName) {\n        (0, _removeClass2.default)(el, toggleClassName);\n      } else {\n        toggleEl.style[toggleProperty] = originalToggleValue;\n      }\n\n      originalToggleElHeight = (0, _outerHeight2.default)(toggleEl, toggleStyles);\n      targetToggleElHeight = 0;\n    } else {\n      targetToggleElHeight = (0, _outerHeight2.default)(toggleEl, toggleStyles);\n      originalToggleElHeight = 0;\n    }\n\n    // Set the original height\n    el.style.height = originalHeight + 'px';\n    toggleEl.style.height = originalToggleElHeight + 'px';\n    toggleEl.style.marginBottom = '0px';\n    toggleEl.style.marginTop = '0px';\n\n    // Add the spark-animate-height class which will setup the transition-property and duration\n    (0, _addClass2.default)(el, heightAnimationClass);\n    (0, _addClass2.default)(toggleEl, heightAnimationClass);\n\n    runningAnimations.els.push(el);\n\n    // We need to wait a tick to toggle the height or else the animation class won't function\n    setTimeout(function () {\n\n      // Set the height to the target height\n      el.style.height = targetElHeight + 'px';\n      toggleEl.style.height = targetToggleElHeight + 'px';\n\n      // Remove inline styles after the animation is complete\n      runningAnimations.completeCallbacks.push(setTimeout(function () {\n        onComplete({\n          el: el,\n          toggleEl: toggleEl,\n          onComplete: params.onComplete || noop,\n          collapse: collapse,\n          toggleProperty: toggleProperty,\n          toggleClassName: toggleClassName,\n          toggleValue: toggleValue,\n          heightAnimationClass: heightAnimationClass\n        });\n      }, params.animationDuration !== undefined ? params.animationDuration : 201));\n    }, 0);\n  }\n}\n\nexports.default = animateHeight;\nmodule.exports = exports['default'];\n//# sourceMappingURL=height.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * # Transform\n                                                                                                                                                                                                                                                                               * Apply a cross-browser transform style.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * @example\n                                                                                                                                                                                                                                                                               * transform('translateX', '-100px');\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * @param {String} type\n                                                                                                                                                                                                                                                                               * @param {String} val\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * @module helpers/css/transform.js\n                                                                                                                                                                                                                                                                               */\n\nvar _each = require('../util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar prefixes = ['-webkit-', '-moz-', '-o-', '-ms-', ''];\n\nfunction transform(type, val) {\n\n  var str = '';\n\n  (0, _each2.default)(prefixes, function (p) {\n\n    if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') {\n      str += p + 'transform: ';\n\n      for (var j in val) {\n        str += j + '(' + val[j] + '); ';\n      }\n    } else {\n      str += p + 'transform: ' + type + '(' + val + '); ';\n    }\n  });\n\n  return str;\n}\n\nexports.default = transform;\nmodule.exports = exports['default'];\n//# sourceMappingURL=transform.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _trim = require('../util/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nvar _hasClass = require('./has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * # Add Class\n * Add a class on an element.\n *\n * @param {Element|Array} el An element or array of elements to update.\n * @param {String} name\n * @return {Element}\n *\n * @module helpers/dom/add-class.js\n */\n\nvar ws = /\\s+/;\nvar cleanup = /\\s{2,}/g;\n\nfunction addClass(el, name) {\n\n  if (arguments.length === 2 && typeof name === 'string') {\n    name = (0, _trim2.default)(name).split(ws);\n  } else {\n    name = name instanceof Array ? name : Array.prototype.slice.call(arguments, 1);\n  }\n\n  // optimize for best, most common case\n  if (name.length === 1 && el.classList) {\n    if (name[0]) {\n      el.classList.add(name[0]);\n    }\n    return el;\n  }\n\n  var toAdd = [];\n  var i = 0;\n  var l = name.length;\n  var item = void 0;\n  var clsName = typeof el.className === 'string' ? el.className : el.getAttribute ? el.getAttribute('class') : '';\n\n  // see if we have anything to add\n  for (; i < l; i++) {\n    item = name[i];\n    if (item && !(0, _hasClass2.default)(clsName, item)) {\n      toAdd.push(item);\n    }\n  }\n\n  if (toAdd.length) {\n    if (typeof el.className === 'string') {\n      el.className = (0, _trim2.default)((clsName + ' ' + toAdd.join(' ')).replace(cleanup, ' '));\n    } else if (el.setAttribute) {\n      el.setAttribute('class', (0, _trim2.default)((clsName + ' ' + toAdd.join(' ')).replace(cleanup, ' ')));\n    }\n  }\n\n  return el;\n}\n\nexports.default = addClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=add-class.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Breakpoint Helpers\n * Find the active breakpoint.\n *\n * @param {Number} width\n *\n * @module helpers/dom/breakpoint.js\n */\n\n/**\n * Breakpoints being used in the CSS.\n * @type {Object}\n */\nvar defaultBreakpoints = {\n  xs: {\n    min: 0,\n    max: 543\n  },\n  sm: {\n    min: 544,\n    max: 795\n  },\n  md: {\n    min: 796,\n    max: 1047\n  },\n  lg: {\n    min: 1048,\n    max: 1799\n  },\n  xl: {\n    min: 1800,\n    max: Infinity\n  }\n};\n\nfunction get(width, breakpoints) {\n\n  breakpoints = breakpoints || defaultBreakpoints;\n\n  var i = void 0;\n\n  for (i in breakpoints) {\n    if (width >= breakpoints[i].min && width <= breakpoints[i].max) {\n      return i;\n    }\n  }\n}\n\nexports.get = get;\n//# sourceMappingURL=breakpoint.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * # Has Class\n * See if an element has a class.\n *\n * @param {Element|String} el\n * @param {String} name\n * @return {Boolean}\n *\n * @module helpers/dom/has-class.js\n */\nfunction hasClass(el, name) {\n  var cName = ((typeof el === 'undefined' ? 'undefined' : _typeof(el)) === 'object' ? el.className || el.getAttribute && el.getAttribute('class') || '' : el || '').replace(/[\\t\\r\\n\\f]/g, ' ');\n  return (' ' + cName + ' ').indexOf(' ' + name + ' ') !== -1;\n}\n\nexports.default = hasClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=has-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _each = require('../util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar props = ['marginTop', 'marginBottom', 'borderTop', 'borderBottom']; /**\n                                                                         * # Outer Height\n                                                                         * Get the outer height of an element (including margin and border)\n                                                                         *\n                                                                         * @param {Element} el\n                                                                         * @param {Object} styles Optional Already have computed styles? Pass them in.\n                                                                         *\n                                                                         * @example\n                                                                         * outerHeight(el, computedStyles);\n                                                                         *\n                                                                         * @module helpers/outer-height.js\n                                                                         */\n\n\nfunction outerHeight(el, styles) {\n\n  styles = styles || window.getComputedStyle(el);\n\n  var height = el.clientHeight;\n\n  (0, _each2.default)(props, function (prop) {\n    height += parseInt(styles[prop] || 0, 10);\n  });\n\n  return height;\n}\n\nexports.default = outerHeight;\nmodule.exports = exports['default'];\n//# sourceMappingURL=outer-height.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Parse DOM attributes\n * Given an element and an attribute name, parse that attribute\n * if it exists or return a default.\n *\n * @module helpers/dom/parse-attribute.js\n */\n\n/**\n * Get the boolean value of an attribute on an element,\n * falling back to the default value.\n * @param  {Element} el\n * @param  {String} name\n * @param  {Boolean} def\n * @return {Boolean}\n */\nfunction boolean(el, name, def) {\n  var val = el.getAttribute(name);\n  if (val === null) return def;\n  return val === 'true' || val === '' ? true : false;\n}\n\n/**\n * Get the numeric value of an attribute on an element,\n * falling back to the default value.\n * @param  {Element} el\n * @param  {String} name\n * @param  {Boolean} def\n * @return {Boolean}\n */\nfunction number(el, name, def) {\n  var val = el.getAttribute(name);\n  if (val === null) return def;\n  return parseInt(val, 10);\n}\n\n/**\n * Get the boolean value of an attribute on an element,\n * falling back to the default value.\n * @param  {Element} el\n * @param  {String} name\n * @param  {Boolean} def\n * @return {Boolean}\n */\nfunction string(el, name, def) {\n  var val = el.getAttribute(name);\n  if (val === null) return def;\n  return val;\n}\n\nexports.boolean = boolean;\nexports.number = number;\nexports.string = string;\n//# sourceMappingURL=parse-attribute.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _trim = require('../util/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ws = /\\s+/; /**\n                 * # Remove Class\n                 * Remove a class on an element.\n                 *\n                 * @param {Element|Array} el An element or array of elements to update.\n                 * @param {String} name\n                 * @return {Element}\n                 *\n                 * @module helpers/dom/remove-class.js\n                 */\n\nvar cleanup = /\\s{2,}/g;\n\nfunction removeClass(el, name) {\n\n  if (arguments.length === 2 && typeof name === 'string') {\n    name = (0, _trim2.default)(name).split(ws);\n  } else {\n    name = name instanceof Array ? name : Array.prototype.slice.call(arguments, 1);\n  }\n\n  // optimize for best, most common case\n  if (name.length === 1 && el.classList) {\n    if (name[0]) el.classList.remove(name[0]);\n    return el;\n  }\n\n  // store two copies\n  var clsName = ' ' + (typeof el.className === 'string' ? el.className : el.getAttribute ? el.getAttribute('class') : '') + ' ';\n  var result = clsName;\n  var current = void 0;\n  var start = void 0;\n  for (var i = 0, l = name.length; i < l; i++) {\n    current = name[i];\n    start = current ? result.indexOf(' ' + current + ' ') : -1;\n    if (start !== -1) {\n      start += 1;\n      result = result.slice(0, start) + result.slice(start + current.length);\n    }\n  }\n\n  // only write if modified\n  if (clsName !== result) {\n    if (typeof el.className === 'string') {\n      el.className = (0, _trim2.default)(result.replace(cleanup, ' '));\n    } else if (el.setAttribute) {\n      el.setAttribute('class', (0, _trim2.default)(result.replace(cleanup, ' ')));\n    }\n  }\n\n  return el;\n}\n\nexports.default = removeClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=remove-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _hasClass = require('./has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _addClass = require('./add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('./remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction toggleClass(el, name, enable) {\n\n  if (!el) {\n    return;\n  }\n\n  // If we're passed an array, toggle the class on each.\n  if (el instanceof NodeList || el instanceof Array) {\n\n    for (var i = 0, len = el.length; i < len; i++) {\n      toggleClass(el[i], name, enable);\n    }\n\n    return;\n  }\n\n  var action = void 0;\n  if (enable !== undefined) {\n    enable = typeof enable === 'function' ? enable.call(null, el) : enable;\n    action = enable ? 'add' : 'remove';\n  } else {\n    action = (0, _hasClass2.default)(el, name) ? 'remove' : 'add';\n  }\n\n  return (action === 'add' ? _addClass2.default : _removeClass2.default)(el, name);\n} /**\n   * # Toggle Class\n   * Toggle a class on an element given a condition.\n   *\n   * @param {Element|Array} el An element or array of elements to update.\n   * @param {String} name\n   * @param {Boolean} enable\n   * @return {Element}\n   *\n   * @module  helpers/dom/toggle-class.js\n   */\n\nexports.default = toggleClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=toggle-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _each = require('../util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction appendChildren(el, children, empty) {\n\n  empty = empty === undefined ? false : empty;\n\n  if (empty) {\n    el.textContent = '';\n  }\n\n  var domList = children instanceof window.HTMLCollection;\n\n  if (domList) {\n    while (children.length) {\n      el.appendChild(children[0]);\n    }\n  } else {\n    (0, _each2.default)(children, function (c) {\n      if (c) {\n        el.appendChild(c);\n      }\n    });\n  }\n} /**\n   * # Append Children\n   * Append an array of children to a node.\n   *\n   * @param {Element} el\n   * @param {Array} children\n   * @param {Boolean} empty Empty the node before adding children?\n   *\n   * @module helpers/manipulation/append-children.js\n   */\n\nexports.default = appendChildren;\nmodule.exports = exports['default'];\n//# sourceMappingURL=append-children.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _each = require('../util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction insertBefore(el, beforeEl, children) {\n  (0, _each2.default)(children, function (c) {\n    el.insertBefore(c, beforeEl);\n  });\n} /**\n   * # Insert Before\n   * Insert an array of elements before a node.\n   *\n   * @param {Element} el\n   * @param {Element} beforeEl\n   * @param {Array} children\n   *\n   * @module helpers/manipulation/insert-before.js\n   */\n\nexports.default = insertBefore;\nmodule.exports = exports['default'];\n//# sourceMappingURL=insert-before.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Wrap Element\n * Wrap an element with another element.\n *\n * @param {Element} el\n * @param {Element} wrapper\n * @return {Element}\n *\n * @module helpers/manipulation/wrap-element.js\n */\nfunction wrapElement(el, wrapper) {\n\n  wrapper = wrapper || document.createElement('div');\n\n  if (el.nextSibling) {\n    el.parentNode.insertBefore(wrapper, el.nextSibling);\n  } else {\n    el.parentNode.appendChild(wrapper);\n  }\n\n  return wrapper.appendChild(el);\n}\n\nexports.default = wrapElement;\nmodule.exports = exports['default'];\n//# sourceMappingURL=wrap-element.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _matches = require('./matches');\n\nvar _matches2 = _interopRequireDefault(_matches);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getChild(el, query) {\n\n  var i = 0;\n  var len = el.children.length;\n\n  for (; i < len; i++) {\n    if ((0, _matches2.default)(el.children[i], query)) {\n      return el.children[i];\n    }\n  }\n\n  return null;\n} /**\n   * # Get Child\n   * Get a child that matches the selector.\n   *\n   * @param {Element} el\n   * @param {String} query\n   * @return {Element|Null}\n   *\n   * @module helpers/traversal/get-child.js\n   */\n\nexports.default = getChild;\nmodule.exports = exports['default'];\n//# sourceMappingURL=get-child.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Get Index\n * Get the index of an element in a nodelist.\n *\n * @param {NodeList} els\n * @param {Node} el\n * @return {Number}\n *\n * @module helpers/traversal/get-index.js\n */\nfunction getIndex(els, el) {\n  return Array.prototype.indexOf.call(els, el);\n}\n\nexports.default = getIndex;\nmodule.exports = exports[\"default\"];\n//# sourceMappingURL=get-index.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _matches = require('./matches');\n\nvar _matches2 = _interopRequireDefault(_matches);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getParent(parent, query, limitEl) {\n\n  limitEl = limitEl instanceof Array ? limitEl : [limitEl || document.body];\n\n  while (parent) {\n\n    if ((0, _matches2.default)(parent, query)) {\n      return parent;\n    }\n\n    if (limitEl.indexOf(parent) !== -1) {\n      return false;\n    }\n\n    parent = parent.parentNode;\n  }\n\n  return false;\n} /**\n   * # Get Parent\n   * See if an element has another element for a parent.\n   *\n   * @param {Element} parent\n   * @param {String} query\n   * @param {Array|Element} limitEl The last element we should check.\n   * @return {Boolean|Element}\n   *\n   * @module helpers/traversal/get-parent.js\n   */\n\nexports.default = getParent;\nmodule.exports = exports['default'];\n//# sourceMappingURL=get-parent.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getParent = require('./get-parent');\n\nvar _getParent2 = _interopRequireDefault(_getParent);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getParents(parent, query, limitEl) {\n\n  var list = [];\n\n  while (parent = (0, _getParent2.default)(parent.parentNode, query, limitEl)) {\n    list.push(parent);\n  }\n\n  return list;\n} /**\n   * # Get Parents\n   * See if an element has parents which match a query.\n   *\n   * @param {Element} parent\n   * @param {String} query\n   * @param {Element} limitEl The last element we should check.\n   * @return {Boolean|Array}\n   *\n   * @module helpers/traversal/get-parents.js\n   */\n\nexports.default = getParents;\nmodule.exports = exports['default'];\n//# sourceMappingURL=get-parents.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Has Parent\n * See if an element has another element for a parent.\n *\n * @param {Element} child\n * @param {Element} possibleParent\n * @return {Boolean}\n *\n * @module helpers/traversal/has-parent.js\n */\nfunction hasParent(child, possibleParent) {\n\n  var parent = child.parentNode;\n\n  while (parent) {\n\n    if (parent === possibleParent) {\n      return true;\n    }\n\n    parent = parent.parentNode;\n  }\n\n  return false;\n}\n\nexports.default = hasParent;\nmodule.exports = exports[\"default\"];\n//# sourceMappingURL=has-parent.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Matches\n * See if an element matches a query selector.\n *\n * @param {Element} el\n * @param {String} query\n * @return {Boolean}\n *\n * @module helpers/traversal/matches.js\n */\nvar vendorMatch = typeof Element !== 'undefined' && (Element.prototype.matches || Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector);\n\nfunction matches(el, query) {\n\n  if (vendorMatch) return vendorMatch.call(el, query);\n\n  var nodes = el.parentNode ? el.parentNode.querySelectorAll(query) : [];\n\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i] === el) return true;\n  }\n\n  return false;\n}\n\nexports.default = matches;\nmodule.exports = exports['default'];\n//# sourceMappingURL=matches.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Each\n * Apply a callback function to a list of any kind: Array, NodeList, HTMLCollection or Object.\n *\n * @param {Array|NodeList|HTMLCollection|Object} list\n * @param {Function} cb\n *\n * @example\n * each([], callback);\n * each(el.children, callback);\n * each(el.childNodes, callback);\n * each({}, callback);\n *\n * @module helpers/util/each.js\n */\nfunction each(list, cb) {\n\n  if (!list) {\n    return;\n  }\n\n  if (typeof cb !== 'function') {\n    throw new Error('Cannot invoke `each` without a callback!');\n  }\n\n  var i = 0;\n  var len = list.length;\n\n  // Object\n  if (len === undefined) {\n    for (i in list) {\n      if (i !== 'prototype' && list.hasOwnProperty(i)) {\n        cb(i, list[i]);\n      }\n    }\n  }\n  // Array-like\n  else {\n      for (; i < len; i++) {\n        cb(list[i]);\n      }\n    }\n}\n\nexports.default = each;\nmodule.exports = exports['default'];\n//# sourceMappingURL=each.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Trim\n * Trim whitespace on a string.\n *\n * @param {String} str\n *\n * @module helpers/util/trim.js\n */\n\nvar trimRE = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\nfunction trim(str) {\n  return str.replace(trimRE, '');\n}\n\nexports.default = trim;\nmodule.exports = exports['default'];\n//# sourceMappingURL=trim.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}