{"version":3,"sources":["js/dist/components/node_modules/browser-pack/_prelude.js","js/dist/components/js/dist/components/toolbar.js","js/dist/components/js/dist/helpers/dom/add-class.js","js/dist/components/js/dist/helpers/dom/has-class.js","js/dist/components/js/dist/helpers/dom/parse-attribute.js","js/dist/components/js/dist/helpers/dom/remove-class.js","js/dist/components/js/dist/helpers/util/debounce.js","js/dist/components/js/dist/helpers/util/trim.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnqpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"toolbar.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _debounce = require('../helpers/util/debounce');\n\nvar _debounce2 = _interopRequireDefault(_debounce);\n\nvar _addClass = require('../helpers/dom/add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _hasClass = require('../helpers/dom/has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _removeClass = require('../helpers/dom/remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nvar _parseAttribute = require('../helpers/dom/parse-attribute');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * # Toolbar\n                                                                                                                                                           * Setup a responsive toolbar\n                                                                                                                                                           *\n                                                                                                                                                           * @example\n                                                                                                                                                           * new Toolbar(el);\n                                                                                                                                                           *\n                                                                                                                                                           * @module components/toolbar.js\n                                                                                                                                                           */\n\n\nvar Toolbar = function () {\n\n  /**\n   * Toolbar constructor.\n   * @param {Element} el\n   * @param {Object} params\n   */\n  function Toolbar(el) {\n    _classCallCheck(this, Toolbar);\n\n    if (!el) return;\n    this._init(el);\n  }\n\n  /**\n   * This function will update cached sizing when an element in the toolbar is changed\n   * or, when toolbar items are added or removed\n   */\n\n\n  Toolbar.prototype.change = function change() {\n    this._closeAll();\n    (0, _removeClass2.default)(this.el, ['ready', 'show-more', 'measured']);\n    var v = document.createDocumentFragment();\n    for (var i = 0; i < this.items.length; i++) {\n      v.appendChild(this.items[i].el);\n    }\n    this.visibleContainer.appendChild(v);\n    this._initItems();\n    (0, _addClass2.default)(this.el, 'measured');\n    this._calculateStyles();\n    (0, _addClass2.default)(this.el, 'ready');\n    return this;\n  };\n\n  /**\n   * Update the component to use a new element or reparse from\n   * the existing element.\n   * @param {Element} el Optional\n   */\n\n\n  Toolbar.prototype.update = function update(el) {\n\n    if (el) {\n      this.remove(true);\n      this._init(el);\n    } else {\n      this.change();\n    }\n\n    return this;\n  };\n\n  /**\n   * Remove the element from the DOM and prepare for garbage collection by dereferencing values.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n\n\n  Toolbar.prototype.remove = function remove(leaveElement) {\n    this._removeListeners();\n    delete this.el.sparktoolbarcon;\n    delete this.showMoreButton.sparktoolbarshowmore;\n    for (var i = 0; i < this.items.length; i++) {\n      this.items[i].remove();\n    }\n    if (!leaveElement && this.el.parentNode) {\n      this.el.parentNode.removeChild(this.el);\n      this.el = undefined;\n    }\n    return this;\n  };\n\n  /**\n   * Setup a toolbarItem Instance to track the state of individual toolbar items\n   * @param {Element} parent Reference to parent toolbar\n   * @param {Element} el Node to initalize as toolbarItem\n   * @param {Number} order The original index of the item in list of toolbarItems (used for maintaining order when sorting)\n   */\n\n\n  Toolbar.prototype.toolbarItem = function toolbarItem(parent, el, order) {\n    //Setup and cache the values for this item\n    var a = {};\n    a.parent = parent;\n    a.el = el;\n    //cache the priority value present on the toolbar element if it is present, else default to 0\n    a.priority = a.el.attributes['data-priority'] ? a.el.attributes['data-priority'].value : 0;\n    a.order = a.el.attributes['data-order'] ? a.el.attributes['data-order'].value : order;\n    a.hasContent = a.el.querySelector('.spark-toolbar__item--content') ? true : false;\n    a.helper = a.el.querySelector('.spark-toolbar__item-helper');\n    a.label = a.el.attributes.label ? a.el.attributes.label.value : false;\n    a.closeOnClick = (0, _hasClass2.default)(a.el, 'spark-toolbar__item--close-more-on-click');\n    a.width = a.el.offsetWidth;\n    a.height = a.el.offsetHeight;\n    a.dropdown = el.querySelector('.spark-toolbar__item--content');\n    if (a.dropdown) {\n      a.dropdown.sparktoolbardropdown = true;\n    }\n    /**\n     * Call method to toggle the open state, optional param sets open state to value\n     * Can get current state by referencing a.toggleDropdown.open\n     * @param {Boolean} open Set state to this regardless of current state\n     */\n    a.toggleDropdown = function (open) {\n      var o = typeof open !== 'undefined' ? !open : a.toggleDropdown.open;\n      if (o) {\n        a.toggleDropdown.open = false;\n        (0, _removeClass2.default)(a.el, 'animate');\n        window.setTimeout(function () {\n          (0, _removeClass2.default)(a.el, 'open');\n        }, 100);\n      } else {\n        if (a.hasContent) {\n          a.toggleDropdown.open = true;\n          (0, _addClass2.default)(a.el, 'open');\n          a.positionDropdown();\n          var e = document.createEvent('Event');\n          e.initEvent('spark.visible-children', true, true);\n          a.dropdown.dispatchEvent(e);\n          window.setTimeout(function () {\n            (0, _addClass2.default)(a.el, 'animate');\n          }, 0);\n        } else {\n          a.parent._toggleShowMore(false);\n        }\n      }\n    };\n    /**\n     * Click handler for local element - determines to close element\n     * conditionally based on presence of spark-toolbar__item--close-on-click\n     * closes parent's more dropdown conditionally as well\n     * @param {Boolean} open Set state to this regardless of current state\n     */\n    a.handleClick = function (e) {\n\n      if ((0, _parseAttribute.boolean)(a.el, 'disabled')) {\n        e.preventDefault();\n        return;\n      }\n\n      if (!a.toggleDropdown.open) {\n        a.toggleDropdown(true);\n      } else {\n        if (e.target === a.el || e.target === a.helper) {\n          a.toggleDropdown();\n        } else {\n          var b = e.target;\n          while (b !== a.el) {\n            if ((0, _hasClass2.default)(b, 'spark-toolbar__item--close-on-click')) {\n              a.toggleDropdown(false);\n              //close the mode section, as event originated inside a close-on-click area\n              a.parent._toggleShowMore(false);\n              break;\n            }\n            b = b.parentElement;\n          }\n        }\n      }\n      //e.preventDefault();\n    };\n    //perform bounds checking on dropdown open to position dropdown inside visual area\n    //this is called each time a dropdown is opened, in case the state of the component has\n    //changed since initialization\n    a.positionDropdown = function () {\n      if (a.dropdown) {\n        a.dropdown.style.left = '';\n        a.dropdown.style.right = '';\n        var pos = a.dropdown.getBoundingClientRect();\n        var left = window.pageXOffset;\n        var right = window.pageXOffset + document.documentElement.clientWidth;\n        if (pos.right > right) {\n          a.dropdown.style.left = 'inherit';\n          a.dropdown.style.right = 0;\n        }\n        if (pos.left < left) {\n          a.dropdown.style.left = 0;\n          a.dropdown.style.right = 'inherit';\n        }\n      }\n    };\n    a.remove = function () {\n      if (a.el) {\n        delete a.el.sparktoolbar;\n      }\n      if (a.dropdown) {\n        delete a.dropdown.sparktoolbardropdown;\n      }\n    };\n    a.el.sparktoolbar = a;\n    return a;\n  };\n\n  /**\n   * Close any open items, and more dropdown\n   */\n\n\n  Toolbar.prototype._closeAll = function _closeAll() {\n    this._closeItems();\n    this._toggleShowMore(false);\n  };\n\n  /**\n   * Returns array of open toolbarItems\n   */\n\n\n  Toolbar.prototype._getOpenItems = function _getOpenItems() {\n    var a = [];\n    for (var i = 0; i < this.items.length; i++) {\n      if (this.items[i].toggleDropdown.open) {\n        a.push(this.items[i]);\n      }\n    }\n    return a;\n  };\n\n  /**\n   * Close any open items\n   * @param {Array} a Optional array of toolbarItems to close, defaults to all open items\n   */\n\n\n  Toolbar.prototype._closeItems = function _closeItems(a) {\n    a = typeof a === 'undefined' ? this._getOpenItems() : a;\n    for (var i = 0; i < a.length; i++) {\n      a[i].toggleDropdown(false);\n    }\n  };\n\n  /**\n   * Setup the toolbar element, cache properties, and initalize styling\n   * when complete, show toolbar\n   * @param {Element} el The node to initalize on\n   */\n\n\n  Toolbar.prototype._init = function _init(el) {\n    this.el = el;\n    //store a reference to this on the node to expedite event handling\n    this.el.sparktoolbarcon = this;\n    this.visibleContainer = this.el.querySelector('.spark-toolbar__container--visible');\n    this.hiddenContainer = this.el.querySelector('.spark-toolbar__container--hidden');\n    this.showMoreButton = this.el.querySelector('.spark-toolbar__show-more');\n    this.showMoreButton.sparktoolbarshowmore = true;\n    this.isOpen = false;\n    this.isFocus = false;\n    this._setupListeners();\n    this.el.style.width = '100%';\n    this._initItems();\n    (0, _addClass2.default)(this.el, 'measured');\n    this._calculateStyles();\n    this.tabindex = this.el.attributes.tabindex ? this.el.attributes.tabindex.value : 0;\n    (0, _addClass2.default)(this.el, 'ready');\n  };\n\n  Toolbar.prototype._initItems = function _initItems() {\n    var items = this.el.querySelectorAll('.spark-toolbar__item');\n    this.items = [];\n    for (var i = 0; i < items.length; i++) {\n      this.items[i] = new this.toolbarItem(this, items[i], i);\n    }\n  };\n\n  /**\n   * Setup event listeners for clicks and resize events\n   */\n\n\n  Toolbar.prototype._setupListeners = function _setupListeners() {\n    this._handleWindowClick = this._handleWindowClickH.bind(this);\n    document.addEventListener('click', this._handleWindowClick);\n    this._handleResize = (0, _debounce2.default)(this._handleResizeH.bind(this), 100);\n    window.addEventListener('resize', this._handleResize);\n    this._handleKeyDown = this._handleKeyDownH.bind(this);\n    this.el.addEventListener('keydown', this._handleKeyDown);\n    this._handleFocus = this._handleFocusH.bind(this);\n    document.addEventListener('focus', this._handleFocus, true);\n    this._handleBlur = this._handleBlurH.bind(this);\n    document.addEventListener('blur', this._handleBlur, true);\n    this._handleVisibleChildren = this._handleVisibleChildrenH.bind(this);\n    document.addEventListener('spark.visible-children', this._handleVisibleChildren, true);\n  };\n\n  /**\n   * Remove event listeners for clicks and resize events\n   */\n\n\n  Toolbar.prototype._removeListeners = function _removeListeners() {\n    document.removeEventListener('click', this._handleWindowClick);\n    window.removeEventListener('resize', this._handleResize);\n    this.el.removeEventListener('keydown', this._handleKeyDown);\n    document.removeEventListener('blur', this._handleBlur, true);\n    document.removeEventListener('focus', this._handleFocus, true);\n    document.removeEventListener('spark.visible-children', this._handleVisibleChildren, true);\n  };\n\n  /**\n   * reset our tab index when user focuses outside of element (gets immediately reset to -1 if focus is placed back inside element)\n   * @param {Event} e The FocusEvent\n   */\n\n\n  Toolbar.prototype._handleBlurH = function _handleBlurH(e) {\n    if (this.el.contains(e.target)) {\n      this.el.attributes.tabindex.value = this.tabindex;\n    }\n  };\n\n  /**\n   * focus handler, works in conjunction with blur handler to set correct tabindex value\n   * @param {Event} e The FocusEvent\n   */\n\n\n  Toolbar.prototype._handleFocusH = function _handleFocusH(e) {\n    //if we're not being focused, reset our tabindex so we are accessible again, and close anything open\n    if (!this.el.contains(e.target)) {\n      this._closeAll();\n      this.el.attributes.tabindex.value = this.tabindex;\n    } else {\n      //set our tabindex to -1 so the user can shift-tab out of our element\n      this.el.attributes.tabindex.value = -1;\n      if (e.target.sparktoolbarcon) {\n        this._focusLast();\n        return;\n      }\n      //handle focusing an item\n      if (e.target.sparktoolbar) {\n        e.target.sparktoolbar.el.focus();\n        return;\n      }\n      var a = e.target;\n      //harder case - look up the tree to find if we're focusing inside content\n      while (!a.sparktoolbarcon) {\n        if (a.sparktoolbar) {\n          break;\n        }\n        //if we are - give our parent element a tabindex so the user can refocus the menu using shift-tab\n        if (a.sparktoolbardropdown) {\n          this.el.attributes.tabindex.value = this.tabindex;\n          return;\n        }\n        a = a.parentElement;\n      }\n    }\n  };\n\n  /**\n   * reset our focus to the last menu item that was focused\n   */\n\n\n  Toolbar.prototype._focusLast = function _focusLast() {\n    if (!this._lastFocus) {\n      var a = this.visibleContainer.querySelector('.spark-toolbar__item') || this.hiddenContainer.querySelector('.spark-toolbar__item');\n      this._lastFocus = a.sparktoolbar;\n    }\n    if (this.hiddenContainer.contains(this._lastFocus.el)) {\n      this._toggleShowMore(true);\n    }\n    this._lastFocus.el.focus();\n  };\n\n  /**\n   * keydown handler, used for keyboard navigation\n   * @param {Event} e The KeyDown Event\n   */\n\n\n  Toolbar.prototype._handleKeyDownH = function _handleKeyDownH(e) {\n    var a = e.target;\n    //find the nearest toolbaritem\n    while (!a.sparktoolbarcon) {\n      if (a.sparktoolbar) {\n        break;\n      }\n      if (a.sparktoolbardropdown) {\n        return;\n      }\n      a = a.parentElement;\n    }\n    if (a.sparktoolbar) {\n      //handle keys\n      switch (e.keyCode) {\n        //left arrow\n        //up arrow\n        case 37:\n        case 38:\n          if (a.previousSibling && a.previousSibling.sparktoolbar) {\n            this._lastFocus = a.previousSibling.sparktoolbar;\n            a.previousSibling.focus();\n          } else {\n            if (this.visibleContainer.querySelector('.spark-toolbar__item') !== a.sparktoolbar.el) {\n              a = this.visibleContainer.querySelector('.spark-toolbar__item:last-of-type');\n              if (a) {\n                this._toggleShowMore(false);\n                this._lastFocus = a.sparktoolbar;\n                a.focus();\n              }\n            }\n          }\n          this._closeItems();\n          e.preventDefault();\n          break;\n        //right arrow\n        //down arrow\n        case 39:\n        case 40:\n          if (a.nextSibling && a.nextSibling.sparktoolbar) {\n            this._lastFocus = a.nextSibling.sparktoolbar;\n            a.nextSibling.focus();\n          } else {\n            if (this.hiddenContainer.querySelector('.spark-toolbar__item:last-of-type') !== a.sparktoolbar.el) {\n              a = this.hiddenContainer.querySelector('.spark-toolbar__item');\n              if (a) {\n                this._toggleShowMore(true);\n                this._lastFocus = a.sparktoolbar;\n                a.focus();\n              }\n            }\n          }\n          this._closeItems();\n          e.preventDefault();\n          break;\n        //spacebar\n        case 32:\n          e.preventDefault();\n          //we only want to toggle the toolbar if we are actually focused directly on it;\n          if (e.target.sparktoolbar) {\n            e.target.sparktoolbar.el.click();\n          }\n          break;\n        //enter\n        case 13:\n          //we only want to toggle the toolbar if we are actually focused directly on it;\n          if (e.target.sparktoolbar) {\n            e.target.sparktoolbar.el.click();\n          }\n          break;\n      }\n    }\n  };\n\n  /**\n   * Hanldes the spark.visible-children event to resize the component when it is made visible.\n   * @param {Event} e The spark.visible-children event\n   */\n\n\n  Toolbar.prototype._handleVisibleChildrenH = function _handleVisibleChildrenH(e) {\n    if (e.target.contains(this.el)) {\n      window.setTimeout(function () {\n        this.change();\n      }.bind(this), 0);\n    }\n  };\n\n  /**\n   * Event handler for click events, handles window clicks, control element clicks,\n   * and forwards events to toolbarItem click handlers as needed\n   * @param {Event} e The click event\n   */\n\n\n  Toolbar.prototype._handleWindowClickH = function _handleWindowClickH(e) {\n\n    if ((0, _parseAttribute.boolean)(e.target, 'disabled')) {\n      e.preventDefault();\n      return;\n    }\n\n    //Check to see if the click was outside of the toolbar\n    if (!this.el.contains(e.target)) {\n      this._closeItems();\n      this._toggleShowMore(false);\n    } else {\n      var a = e.target;\n      //traverse the dom node tree until we find an element that handles the event,\n      //or we reach the toolbar root node\n      if (a === this.visibleContainer || a === this.el) {\n        e.stopPropagation();\n        e.preventDefault();\n        return;\n      }\n      while (a !== this.el) {\n        if (a.sparktoolbar) {\n          var c = this._getOpenItems();\n          if (c.indexOf(a.sparktoolbar) >= 0) {\n            c.splice(c.indexOf(a.sparktoolbar), 1);\n          }\n          this._closeItems(c);\n          if (!this.hiddenContainer.contains(e.target)) {\n            this._toggleShowMore(false);\n          }\n          return a.sparktoolbar.handleClick(e);\n        }\n        if (a.sparktoolbarshowmore) {\n          this._closeItems();\n          this._toggleShowMore();\n          return;\n        }\n        a = a.parentElement;\n      }\n      this._closeAll();\n    }\n  };\n\n  /**\n   * Toggle the state of the show more dropdown, optional parameter overrides toggle and\n   * sets state to passed value\n   * @param {Boolean} open The new state of the show more dropdown\n   */\n\n\n  Toolbar.prototype._toggleShowMore = function _toggleShowMore(open) {\n    var o = typeof open !== 'undefined' ? !open : this.isOpen;\n    if (o) {\n      (0, _removeClass2.default)(this.el, 'animate');\n      window.setTimeout(function () {\n        (0, _removeClass2.default)(this.el, 'open');\n        this.isOpen = false;\n      }.bind(this), 100);\n    } else {\n      this.isOpen = true;\n      (0, _addClass2.default)(this.el, 'open');\n      this._positionShowMore();\n      window.setTimeout(function () {\n        (0, _addClass2.default)(this.el, 'animate');\n      }.bind(this), 0);\n    }\n  };\n\n  /**\n  * Do bounds checking on show-more dropdown when it is opened, and position it accordingly\n  */\n\n\n  Toolbar.prototype._positionShowMore = function _positionShowMore() {\n    this.hiddenContainer.style.right = '0px';\n    var pos = this.hiddenContainer.getBoundingClientRect();\n    var left = window.pageXOffset;\n    var right = window.pageXOffset + document.documentElement.clientWidth;\n    if (pos.right > right) {\n      this.hiddenContainer.style.right = 'calc(' + (pos.right - right) + 'px + 1rem)';\n    }\n    if (pos.left < left) {\n      this.hiddenContainer.style.right = 'calc(' + (pos.left - left) + 'px - 1rem)';\n    }\n  };\n\n  /**\n   * Resize event helper, closes items then triggers recalculation of styles\n   */\n\n\n  Toolbar.prototype._handleResizeH = function _handleResizeH() {\n    this._closeAll();\n    this._calculateStyles();\n  };\n\n  /**\n   * Reevaluates the available area of the toolbar and places toolbarItems into\n   * the hidden container, as necessary. Should not call with any specified value\n   * for showMore (used internally)\n   * @param {Boolean} showMore Used to conditionally evaluate styling when showMore area is used\n   */\n\n\n  Toolbar.prototype._calculateStyles = function _calculateStyles(showMore) {\n    this.el.style.width = '100%';\n    showMore = typeof showMore !== 'undefined' ? showMore : false;\n    if (!showMore) {\n      (0, _removeClass2.default)(this.el, 'show-more');\n    }\n    var visible = [];\n    var hidden = [];\n    var i;\n    //sort items by their priority to ensure higher-priority items are always placed\n    //into the visible area first\n    this.items.sort(this._prioritySort);\n    //get container width and start placing items into their containers\n    var visibleWidth = this.visibleContainer.clientWidth;\n    for (i = 0; i < this.items.length; i++) {\n      if (visibleWidth - this.items[i].width >= 0) {\n        visible.push(this.items[i]);\n        visibleWidth -= this.items[i].width;\n      } else {\n        if (!showMore) {\n          (0, _addClass2.default)(this.el, 'show-more');\n          return this._calculateStyles(true);\n        }\n        hidden.push(this.items[i]);\n      }\n    }\n    //sort items back into their original order before inserting them into the document\n    visible.sort(this._orderSort);\n    hidden.sort(this._orderSort);\n    var v = document.createDocumentFragment();\n    var h = document.createDocumentFragment();\n    for (i = 0; i < visible.length; i++) {\n      v.appendChild(visible[i].el);\n    }\n    for (i = 0; i < hidden.length; i++) {\n      h.appendChild(hidden[i].el);\n    }\n    this.visibleContainer.appendChild(v);\n    this.hiddenContainer.appendChild(h);\n    this.el.style.width = '';\n  };\n\n  /**\n   * Sorts toolbar items in descending order based on their priority value\n   */\n\n\n  Toolbar.prototype._prioritySort = function _prioritySort(l, r) {\n    return r.priority - l.priority;\n  };\n\n  /**\n   * Sorts toolbar items in ascending order based on their order value\n   */\n\n\n  Toolbar.prototype._orderSort = function _orderSort(l, r) {\n    return l.order - r.order;\n  };\n\n  return Toolbar;\n}();\n\nexports.default = Toolbar;\nmodule.exports = exports['default'];\n//# sourceMappingURL=toolbar.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _trim = require('../util/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nvar _hasClass = require('./has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * # Add Class\n * Add a class on an element.\n *\n * @param {Element|Array} el An element or array of elements to update.\n * @param {String} name\n * @return {Element}\n *\n * @module helpers/dom/add-class.js\n */\n\nvar ws = /\\s+/;\nvar cleanup = /\\s{2,}/g;\n\nfunction addClass(el, name) {\n\n  if (arguments.length === 2 && typeof name === 'string') {\n    name = (0, _trim2.default)(name).split(ws);\n  } else {\n    name = name instanceof Array ? name : Array.prototype.slice.call(arguments, 1);\n  }\n\n  // optimize for best, most common case\n  if (name.length === 1 && el.classList) {\n    if (name[0]) {\n      el.classList.add(name[0]);\n    }\n    return el;\n  }\n\n  var toAdd = [];\n  var i = 0;\n  var l = name.length;\n  var item = void 0;\n  var clsName = typeof el.className === 'string' ? el.className : el.getAttribute ? el.getAttribute('class') : '';\n\n  // see if we have anything to add\n  for (; i < l; i++) {\n    item = name[i];\n    if (item && !(0, _hasClass2.default)(clsName, item)) {\n      toAdd.push(item);\n    }\n  }\n\n  if (toAdd.length) {\n    if (typeof el.className === 'string') {\n      el.className = (0, _trim2.default)((clsName + ' ' + toAdd.join(' ')).replace(cleanup, ' '));\n    } else if (el.setAttribute) {\n      el.setAttribute('class', (0, _trim2.default)((clsName + ' ' + toAdd.join(' ')).replace(cleanup, ' ')));\n    }\n  }\n\n  return el;\n}\n\nexports.default = addClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=add-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * # Has Class\n * See if an element has a class.\n *\n * @param {Element|String} el\n * @param {String} name\n * @return {Boolean}\n *\n * @module helpers/dom/has-class.js\n */\nfunction hasClass(el, name) {\n  var cName = ((typeof el === 'undefined' ? 'undefined' : _typeof(el)) === 'object' ? el.className || el.getAttribute && el.getAttribute('class') || '' : el || '').replace(/[\\t\\r\\n\\f]/g, ' ');\n  return (' ' + cName + ' ').indexOf(' ' + name + ' ') !== -1;\n}\n\nexports.default = hasClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=has-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Parse DOM attributes\n * Given an element and an attribute name, parse that attribute\n * if it exists or return a default.\n *\n * @module helpers/dom/parse-attribute.js\n */\n\n/**\n * Get the boolean value of an attribute on an element,\n * falling back to the default value.\n * @param  {Element} el\n * @param  {String} name\n * @param  {Boolean} def\n * @return {Boolean}\n */\nfunction boolean(el, name, def) {\n  var val = el.getAttribute(name);\n  if (val === null) return def;\n  return val === 'true' || val === '' ? true : false;\n}\n\n/**\n * Get the numeric value of an attribute on an element,\n * falling back to the default value.\n * @param  {Element} el\n * @param  {String} name\n * @param  {Boolean} def\n * @return {Boolean}\n */\nfunction number(el, name, def) {\n  var val = el.getAttribute(name);\n  if (val === null) return def;\n  return parseInt(val, 10);\n}\n\n/**\n * Get the boolean value of an attribute on an element,\n * falling back to the default value.\n * @param  {Element} el\n * @param  {String} name\n * @param  {Boolean} def\n * @return {Boolean}\n */\nfunction string(el, name, def) {\n  var val = el.getAttribute(name);\n  if (val === null) return def;\n  return val;\n}\n\nexports.boolean = boolean;\nexports.number = number;\nexports.string = string;\n//# sourceMappingURL=parse-attribute.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _trim = require('../util/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ws = /\\s+/; /**\n                 * # Remove Class\n                 * Remove a class on an element.\n                 *\n                 * @param {Element|Array} el An element or array of elements to update.\n                 * @param {String} name\n                 * @return {Element}\n                 *\n                 * @module helpers/dom/remove-class.js\n                 */\n\nvar cleanup = /\\s{2,}/g;\n\nfunction removeClass(el, name) {\n\n  if (arguments.length === 2 && typeof name === 'string') {\n    name = (0, _trim2.default)(name).split(ws);\n  } else {\n    name = name instanceof Array ? name : Array.prototype.slice.call(arguments, 1);\n  }\n\n  // optimize for best, most common case\n  if (name.length === 1 && el.classList) {\n    if (name[0]) el.classList.remove(name[0]);\n    return el;\n  }\n\n  // store two copies\n  var clsName = ' ' + (typeof el.className === 'string' ? el.className : el.getAttribute ? el.getAttribute('class') : '') + ' ';\n  var result = clsName;\n  var current = void 0;\n  var start = void 0;\n  for (var i = 0, l = name.length; i < l; i++) {\n    current = name[i];\n    start = current ? result.indexOf(' ' + current + ' ') : -1;\n    if (start !== -1) {\n      start += 1;\n      result = result.slice(0, start) + result.slice(start + current.length);\n    }\n  }\n\n  // only write if modified\n  if (clsName !== result) {\n    if (typeof el.className === 'string') {\n      el.className = (0, _trim2.default)(result.replace(cleanup, ' '));\n    } else if (el.setAttribute) {\n      el.setAttribute('class', (0, _trim2.default)(result.replace(cleanup, ' ')));\n    }\n  }\n\n  return el;\n}\n\nexports.default = removeClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=remove-class.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Debounce\n * Debounce a function call\n *\n * @param {Function} func\n * @param {Integer} delay\n *\n * @module helpers/util/debounce.js\n */\nfunction debounce(func, delay) {\n\n  var timer = void 0;\n\n  return function () {\n    var args = arguments;\n    if (timer) window.clearTimeout(timer);\n    timer = window.setTimeout(function () {\n      func.apply(this, args);\n    }, delay);\n  };\n}\n\nexports.default = debounce;\nmodule.exports = exports[\"default\"];\n//# sourceMappingURL=debounce.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Trim\n * Trim whitespace on a string.\n *\n * @param {String} str\n *\n * @module helpers/util/trim.js\n */\n\nvar trimRE = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\nfunction trim(str) {\n  return str.replace(trimRE, '');\n}\n\nexports.default = trim;\nmodule.exports = exports['default'];\n//# sourceMappingURL=trim.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}