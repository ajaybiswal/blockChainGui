{"version":3,"sources":["js/dist/components/node_modules/browser-pack/_prelude.js","js/dist/components/js/dist/components/base.js","js/dist/components/js/dist/components/expand.js","js/dist/components/js/dist/components/filter-module.js","js/dist/components/js/dist/components/filter.js","js/dist/components/js/dist/components/modal.js","js/dist/components/js/dist/helpers/animation/height.js","js/dist/components/js/dist/helpers/dom/add-class.js","js/dist/components/js/dist/helpers/dom/breakpoint.js","js/dist/components/js/dist/helpers/dom/has-class.js","js/dist/components/js/dist/helpers/dom/outer-height.js","js/dist/components/js/dist/helpers/dom/remove-class.js","js/dist/components/js/dist/helpers/dom/toggle-class.js","js/dist/components/js/dist/helpers/traversal/get-parent.js","js/dist/components/js/dist/helpers/traversal/matches.js","js/dist/components/js/dist/helpers/util/each.js","js/dist/components/js/dist/helpers/util/trim.js"],"names":[],"mappingsxvyhxpjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"filter.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _each = require('../helpers/util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * # Base Component\n                                                                                                                                                           * The base class for Spark JS components. This class should never be\n                                                                                                                                                           * instantiated directly.\n                                                                                                                                                           *\n                                                                                                                                                           * @param {Element} el\n                                                                                                                                                           * @param {Object} params\n                                                                                                                                                           *\n                                                                                                                                                           * @module components/base.js\n                                                                                                                                                           */\n\nvar noop = function noop() {};\n\nvar Base = function () {\n\n  /**\n   * Set parameters and cache elements.\n   */\n  function Base(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Base);\n\n    if (params.elRequired && !el) {\n      return;\n    }\n\n    this.setParams(this.defaults || {}, true);\n    this.setParams(params);\n    (this._cacheElements || noop).call(this, el, params);\n    (this._parseParams || noop).call(this);\n  }\n\n  /**\n   * Remove the component from the DOM and prepare for garbage collection by dereferencing values.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n\n\n  Base.prototype.remove = function remove(leaveElement) {\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    if (!leaveElement && this.el && this.el.parentNode) {\n      this.el.parentNode.removeChild(this.el);\n    }\n\n    this.unsetParams(this.defaults);\n\n    return this;\n  };\n\n  /**\n   * Update the component to use a new element or reparse from\n   * the existing element.\n   * @param {Element} el Optional\n   * @param {Object} params Optional\n   */\n\n\n  Base.prototype.update = function update(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    (this._cacheElements || noop).call(this, el || this.el, params);\n    (this._parseParams || noop).call(this);\n\n    if (this._addEventListeners) {\n      this._addEventListeners();\n    }\n\n    return this;\n  };\n\n  /**\n   * Set a hash of parameters if they're whitelisted or we're told to force the set.\n   * This is used to set initial values as well as set passed parameters.\n   * @param {Object} params\n   * @param {Boolean} force Force setting even if the param is not whitelisted.\n   */\n\n\n  Base.prototype.setParams = function setParams(params, force) {\n    var _this = this;\n\n    (0, _each2.default)(params, function (k, v) {\n      if (_this._whitelistedParams.indexOf(k) !== -1 || force) {\n        _this[k] = v;\n      }\n    });\n\n    return this;\n  };\n\n  /**\n   * Unset all parameters.\n   * @param {Array|Object} keys\n   * @param {Object} scope The object to unset the params from. Defaults to `this`.\n   */\n\n\n  Base.prototype.unsetParams = function unsetParams(keys, scope) {\n\n    keys = keys instanceof Array ? keys : Object.keys(keys);\n    scope = scope || this;\n    (0, _each2.default)(keys, function (k) {\n      delete scope[k];\n    });\n\n    return this;\n  };\n\n  return Base;\n}();\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nBase.prototype._whitelistedParams = [];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nBase.prototype.defaults = {};\n\nexports.default = Base;\nmodule.exports = exports['default'];\n//# sourceMappingURL=base.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _height = require('../helpers/animation/height');\n\nvar _height2 = _interopRequireDefault(_height);\n\nvar _toggleClass = require('../helpers/dom/toggle-class');\n\nvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\nvar _hasClass = require('../helpers/dom/has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _getParent = require('../helpers/traversal/get-parent');\n\nvar _getParent2 = _interopRequireDefault(_getParent);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\nxpand\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Expand and collapse an element.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * new Expand(el);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module components/expand.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar noop = function noop() {};\n\nvar Expand = function (_BaseComponent) {\n  _inherits(Expand, _BaseComponent);\n\n  /**\n   * Expand constructor.\n   * @param {Element} el\n   * @param {Object} params\n   */\n  function Expand(el) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Expand);\n\n    params.elRequired = true;\n\n    if (!(_this = _possibleConstructorReturn(this, _BaseComponent.call(this, el, params)), _this)) {\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this._bindEventListenerCallbacks();\n    _this._addEventListeners();\n    return _possibleConstructorReturn(_this);\n  }\n\n  /**\n   * Expand\n   */\n\n\n  Expand.prototype.expand = function expand() {\n\n    (this.onBeforeExpand || noop)();\n\n    (0, _height2.default)({\n      el: this.el,\n      toggleClass: 'expanded',\n      toggleEl: '.spark-expand__content, .spark-panel__content'\n    });\n\n    this.isExpanded = true;\n    this._updateClasses();\n    var e = document.createEvent('Event');\n    e.initEvent('spark.visible-children', true, true);\n    this.el.dispatchEvent(e);\n\n    // If the expand element have input, focus on the first one.\n    if (this.el.querySelector('input')) {\n      this.el.querySelector('input').focus();\n    }\n\n    (this.onAfterExpand || noop)();\n\n    return this;\n  };\n\n  /**\n   * Collapse\n   */\n\n\n  Expand.prototype.collapse = function collapse() {\n\n    (this.onBeforeCollapse || noop)();\n\n    (0, _height2.default)({\n      el: this.el,\n      toggleEl: '.spark-expand__content, .spark-panel__content',\n      toggleValue: 'none',\n      action: 'collapse'\n    });\n\n    this.isExpanded = false;\n    this._updateClasses();\n\n    (this.onAfterCollapse || noop)();\n\n    return this;\n  };\n\n  /**\n   * Toggle the expand state.\n   */\n\n\n  Expand.prototype.toggle = function toggle() {\n    return this[this.isExpanded ? 'collapse' : 'expand']();\n  };\n\n  /**\n   * Store a reference to the element.\n   * @param {Element} el\n   */\n\n\n  Expand.prototype._cacheElements = function _cacheElements(el) {\n    this.el = el;\n    this.isExpanded = (0, _hasClass2.default)(this.el, 'expanded');\n\n    this.accordionHeading = this.el.querySelector('[role=\"heading\"]');\n    this.accordionContent = this.el.querySelector('.spark-panel__content');\n\n    this.panelContent = this.el.querySelector('.spark-expand__content');\n    this.panelCollapsedButton = this.el.querySelector('.spark-expand__hide--expanded');\n    this.panelExpandedButton = this.el.querySelector('.spark-expand__show--expanded');\n  };\n\n  /**\n   * Update classes for the expand or collapse state.\n   */\n\n\n  Expand.prototype._updateClasses = function _updateClasses() {\n    (0, _toggleClass2.default)(this.el, 'expanded', this.isExpanded);\n    this._updateAriaAttributes();\n  };\n\n  /**\n   * Update aria attributes for the expand or collapse state.\n   */\n\n\n  Expand.prototype._updateAriaAttributes = function _updateAriaAttributes() {\n    if (this.isExpanded) {\n      this.accordionHeading ? this.accordionHeading.setAttribute('aria-expanded', 'true') : null;\n      this.accordionContent ? this.accordionContent.setAttribute('aria-hidden', 'false') : null;\n\n      this.panelContent ? this.panelContent.setAttribute('aria-hidden', 'false') : null;\n      this.panelCollapsedButton ? this.panelCollapsedButton.setAttribute('aria-hidden', 'true') : null;\n      this.panelExpandedButton ? this.panelExpandedButton.setAttribute('aria-hidden', 'false') : null;\n    } else {\n      this.accordionHeading ? this.accordionHeading.setAttribute('aria-expanded', 'false') : null;\n      this.accordionContent ? this.accordionContent.setAttribute('aria-hidden', 'true') : null;\n\n      this.panelContent ? this.panelContent.setAttribute('aria-hidden', 'true') : null;\n      this.panelCollapsedButton ? this.panelCollapsedButton.setAttribute('aria-hidden', 'false') : null;\n      this.panelExpandedButton ? this.panelExpandedButton.setAttribute('aria-hidden', 'true') : null;\n    }\n  };\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n\n\n  Expand.prototype._bindEventListenerCallbacks = function _bindEventListenerCallbacks() {\n    this._onClickBound = this._onClick.bind(this);\n    this._onKeydownBound = this._onKeydown.bind(this);\n  };\n\n  /**\n   * Add event listeners for DOM events.\n   */\n\n\n  Expand.prototype._addEventListeners = function _addEventListeners() {\n    this.el.addEventListener('click', this._onClickBound);\n    this.el.addEventListener('keydown', this._onKeydownBound);\n  };\n\n  /**\n   * Remove event listeners for DOM events..\n   */\n\n\n  Expand.prototype._removeEventListeners = function _removeEventListeners() {\n    this.el.removeEventListener('click', this._onClickBound);\n    this.el.removeEventListener('keydown', this._onKeydownBound);\n  };\n\n  /**\n   * When we are clicked, toggle the expanded state.\n   * @param {Object} e\n   */\n\n\n  Expand.prototype._onClick = function _onClick(e) {\n\n    if (!(0, _getParent2.default)(e.target, '.spark-expand__toggle, [data-role=\"toggle\"], [role=\"heading\"]', this.el)) {\n      return;\n    }\n\n    e.preventDefault();\n    this.toggle();\n  };\n\n  /**\n   * When the space or enter key is pressed on the toggle, toggle!\n   * @param {Object} e\n   */\n\n\n  Expand.prototype._onKeydown = function _onKeydown(e) {\n\n    if (!(0, _getParent2.default)(e.target, '.spark-expand__toggle, [data-role=\"toggle\"], [role=\"heading\"]', this.el)) {\n      return;\n    }\n\n    var code = e.keyCode || e.which;\n\n    // Space or enter\n    if (code === 32 || code === 13) {\n      e.preventDefault();\n      this.toggle();\n    }\n  };\n\n  return Expand;\n}(_base2.default);\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nExpand.prototype._whitelistedParams = ['onBeforeExpand', 'onAfterExpand', 'onBeforeCollapse', 'onAfterCollapse'];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nExpand.prototype.defaults = {\n  el: null,\n  isExpanded: false,\n  onBeforeExpand: null,\n  onAfterExpand: null,\n  onBeforeCollapse: null,\n  onAfterCollapse: null,\n  _onClickBound: null,\n  _onKeydownBound: null\n};\n\nexports.default = Expand;\nmodule.exports = exports['default'];\n//# sourceMappingURL=expand.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _toggleClass = require('../helpers/dom/toggle-class');\n\nvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\nvar _removeClass = require('../helpers/dom/remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nvar _addClass = require('../helpers/dom/add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _hasClass = require('../helpers/dom/has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _expand = require('./expand');\n\nvar _expand2 = _interopRequireDefault(_expand);\n\nvar _modal = require('./modal');\n\nvar _modal2 = _interopRequireDefault(_modal);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\nilter Module\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Module that contains an individual (or related) filters such as checkboxes\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * new FilterModule(el, params);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module components/filter-module.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar noop = function noop() {};\n\nvar FilterModule = function (_BaseComponent) {\n  _inherits(FilterModule, _BaseComponent);\n\n  /**\n   * Filter Module constructor.\n   * @param {Element} el\n   * @param {Object} params\n   */\n  function FilterModule(el) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, FilterModule);\n\n    params.elRequired = true;\n\n    if (!(_this = _possibleConstructorReturn(this, _BaseComponent.call(this, el, params)), _this)) {\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this._bindEventListenerCallbacks();\n    _this._addEventListeners();\n    return _possibleConstructorReturn(_this);\n  }\n\n  /**\n   * Store a reference to the need elements\n   * @param {Element} el\n   */\n\n\n  FilterModule.prototype._cacheElements = function _cacheElements(el) {\n    this.el = el;\n    this._showAllEl = this.el.querySelector('.spark-filter-module__show-all');\n    if (this._showAllEl) {\n      this._showAllToggleable = this._showAllEl.querySelector('span');\n    }\n\n    this._clearEls = this.el.querySelectorAll('.spark-filter-module__clear');\n    this._hiddenEls = Array.prototype.slice.call(this.el.querySelectorAll('.spark-filter-module--hide'));\n    this._headerEl = this.el.querySelector('.spark-filter-module__header');\n    this._bodyEl = this.el.querySelector('.spark-filter-module__body');\n    this._modalEl = this.el.querySelector('.spark-modal');\n    this._modalSaveBtn = this.el.querySelector('.spark-filter-module__show-all__modal-button');\n    this._modalClasses = [];\n\n    if (this.onShowAll === 'modal') {\n      this.modalInst = new _modal2.default(this._modalEl);\n    }\n  };\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n\n\n  FilterModule.prototype._bindEventListenerCallbacks = function _bindEventListenerCallbacks() {\n    this._onShowAllBound = this._onShowAll.bind(this);\n    this._onClearBound = this._onClear.bind(this);\n    this._onCloseModalBound = this._onCloseModal.bind(this);\n  };\n\n  /**\n   * Add event listeners for touchstart and mouse click.\n   */\n\n\n  FilterModule.prototype._addEventListeners = function _addEventListeners() {\n    !this._showAllEl || this._showAllEl.addEventListener('click', this._onShowAllBound);\n    !this._modalSaveBtn || this._modalSaveBtn.addEventListener('click', this._onCloseModalBound);\n\n    for (var i = 0; i < this._clearEls.length; i++) {\n      !this._clearEls[i] || this._clearEls[i].addEventListener('click', this._onClearBound);\n    }\n  };\n\n  /**\n   * Remove event listeners for touchstart and mouse click.\n   */\n\n\n  FilterModule.prototype._removeEventListeners = function _removeEventListeners() {\n    if (this._showAllEl) {\n      this._showAllEl.removeEventListener('click', this._onShowAllBound);\n      this._modalSaveBtn.removeEventListener('click', this._onCloseModalBound);\n\n      for (var i = 0; i < this._clearEls.length; i++) {\n        !this._clearEls[i] || this._clearEls[i].removeEventListener('click', this._onClearBound);\n      }\n    }\n  };\n\n  /**\n   * Show any hidden filters within a module or run provided function if available\n   */\n\n\n  FilterModule.prototype._onShowAll = function _onShowAll() {\n    if (typeof this.onShowAll === 'function') {\n      (this.onShowAll || noop)(this);\n    } else {\n      if (this.onShowAll === 'toggle' || this.onShowAll === 'modal' && this._isExpand) {\n        this._toggleShowAllLabel();\n        this.toggleHiddenContent();\n      } else if (this.onShowAll === 'modal' && !this._isExpand) {\n        this.modalInst.open();\n      }\n\n      (this.onShowAllComplete || noop)();\n    }\n  };\n\n  /**\n   * Toggle Show More label text\n   */\n\n\n  FilterModule.prototype._toggleShowAllLabel = function _toggleShowAllLabel() {\n    this._showAllToggleable.innerHTML = this._showAllToggleable.innerHTML === 'more' ? 'fewer' : 'more';\n  };\n\n  /**\n   * Callback after clicking `Clear` button\n   */\n\n\n  FilterModule.prototype._onClear = function _onClear() {\n    (this.onClear || noop)(this);\n  };\n\n  /**\n   * Callback after clicking `Save` button\n   */\n\n\n  FilterModule.prototype._onCloseModal = function _onCloseModal() {\n    (this.onModalClose || noop)();\n\n    this.modalInst.close();\n  };\n\n  /**\n   * Enable clear button\n   */\n\n\n  FilterModule.prototype.enableClearBtn = function enableClearBtn() {\n    for (var i = 0; i < this._clearEls.length; i++) {\n      (0, _removeClass2.default)(this._clearEls[i], 'spark-filter-module__clear--disabled');\n      (0, _removeClass2.default)(this._clearEls[i], 'spark-filter-module__clear--hidden');\n    }\n  };\n\n  /**\n   * Disable clear button\n   */\n\n\n  FilterModule.prototype.disableClearBtn = function disableClearBtn() {\n    for (var i = 0; i < this._clearEls.length; i++) {\n      (0, _addClass2.default)(this._clearEls[i], 'spark-filter-module__clear--disabled');\n    }\n  };\n\n  /**\n   * Hide clear button\n   */\n\n\n  FilterModule.prototype.hideClearBtn = function hideClearBtn() {\n    for (var i = 0; i < this._clearEls.length; i++) {\n      (0, _addClass2.default)(this._clearEls[i], 'spark-filter-module__clear--hidden');\n    }\n  };\n\n  /**\n   * Determine if Clear button is hidden or disabled\n   */\n\n\n  FilterModule.prototype.getClearButtonStatus = function getClearButtonStatus() {\n    var buttonEnabled = false;\n\n    for (var i = 0; i < this._clearEls.length; i++) {\n      if ((0, _hasClass2.default)(this._clearEls[i], 'spark-filter-module__clear--hidden') || (0, _hasClass2.default)(this._clearEls[i], 'spark-filter-module__clear--disabled')) {\n        buttonEnabled = false;\n      } else {\n        buttonEnabled = true;\n      }\n    }\n\n    return buttonEnabled;\n  };\n\n  /**\n   * Hide or show extra filters elements as triggered by Show more/fewer\n   */\n\n\n  FilterModule.prototype.toggleHiddenContent = function toggleHiddenContent() {\n    for (var i = 0; i < this._hiddenEls.length; i++) {\n      (0, _toggleClass2.default)(this._hiddenEls[i], 'show');\n    }\n  };\n\n  /**\n   * Change filter-module to expand/collapse variation\n   * This occurs when the filter is at the xs breakpoint\n   */\n\n\n  FilterModule.prototype._applyExpand = function _applyExpand() {\n    if (this._modalEl) {\n      var modalClsNames = ['spark-filter-module--hide', '', '', ''];\n\n      this._hiddenEls.push(this._modalEl);\n      var curEl = this._modalEl;\n\n      for (var i = 0; i < modalClsNames.length; i++) {\n        this._modalClasses[i] = curEl.className;\n        curEl.className = modalClsNames[i];\n        curEl = curEl.firstElementChild;\n      }\n\n      if ((0, _hasClass2.default)(document.body, 'spark-modal-open')) {\n        (0, _removeClass2.default)(document.body, 'spark-modal-open');\n      }\n\n      this.modalInst.remove(true);\n    }\n\n    (0, _addClass2.default)(this.el, 'spark-panel', 'spark-panel--expand');\n    (0, _addClass2.default)(this._headerEl, 'spark-panel__header');\n    this._headerEl.setAttribute('role', 'heading');\n    this._headerEl.setAttribute('tabindex', '0');\n    (0, _addClass2.default)(this._bodyEl, 'spark-panel__content');\n\n    this._expandInst = new _expand2.default(this.el, {\n      onAfterExpand: this.onAfterExpand,\n      onAfterCollapse: this.onAfterCollapse\n    });\n\n    this._isExpand = true;\n  };\n\n  /**\n   * Change filter-module from expand/collapse to horizontal variation\n   */\n\n\n  FilterModule.prototype._disapplyExpand = function _disapplyExpand() {\n    if (this._modalEl) {\n\n      if ((0, _hasClass2.default)(this._modalEl, 'show')) {\n        this._toggleShowAllLabel();\n      }\n\n      this._hiddenEls.pop();\n      var curEl = this._modalEl;\n\n      for (var i = 0; i < this._modalClasses.length; i++) {\n        curEl.className = this._modalClasses[i];\n        curEl = curEl.firstElementChild;\n      }\n\n      this.modalInst = new _modal2.default(this._modalEl);\n    }\n\n    (0, _removeClass2.default)(this.el, 'spark-panel', 'spark-panel--expand');\n    (0, _removeClass2.default)(this._headerEl, 'spark-panel__header');\n    this._headerEl.removeAttribute('role');\n    this._headerEl.removeAttribute('tabindex');\n    (0, _removeClass2.default)(this._bodyEl, 'spark-panel__content');\n    this._expandInst.remove(true);\n    this._isExpand = false;\n  };\n\n  return FilterModule;\n}(_base2.default);\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nFilterModule.prototype._whitelistedParams = ['onShowAll', 'onShowAllComplete', 'onModalClose', 'onClear', 'onAfterExpand', 'onAfterCollapse'];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nFilterModule.prototype.defaults = {\n  el: null,\n  onShowAll: noop,\n  onShowAllComplete: noop,\n  onModalClose: noop,\n  onClear: noop,\n  onAfterExpand: noop,\n  onAfterCollapse: noop,\n  modalInst: null,\n  _onShowAllBound: null,\n  _onClearBound: null,\n  _showAllEl: null,\n  _clearEl: null,\n  _hiddenEls: [],\n  _headerEl: null,\n  _bodyEl: null,\n  _modalEl: null,\n  _expandInst: null,\n  _isExpand: false,\n  dataSet: {}\n};\n\nexports.default = FilterModule;\nmodule.exports = exports['default'];\n//# sourceMappingURL=filter-module.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _addClass = require('../helpers/dom/add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _hasClass = require('../helpers/dom/has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _toggleClass = require('../helpers/dom/toggle-class');\n\nvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\nvar _removeClass = require('../helpers/dom/remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nvar _filterModule = require('./filter-module');\n\nvar _filterModule2 = _interopRequireDefault(_filterModule);\n\nvar _height = require('../helpers/animation/height');\n\nvar _height2 = _interopRequireDefault(_height);\n\nvar _breakpoint = require('../helpers/dom/breakpoint');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\nilter\ncontainer for a set of form fields used to filter a data set or search results\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * new Filter(el);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module components/filter.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar noop = function noop() {};\n\nvar Filter = function (_BaseComponent) {\n  _inherits(Filter, _BaseComponent);\n\n  /**\n   * Filter constructor.\n   * @param {Element} el\n   * @param {Object} params\n   */\n  function Filter(el) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Filter);\n\n    params.elRequired = true;\n\n    if (!(_this = _possibleConstructorReturn(this, _BaseComponent.call(this, el, params)), _this)) {\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this._bindEventListenerCallbacks();\n    _this._addEventListeners();\n    _this._initFilterDisplay();\n    return _possibleConstructorReturn(_this);\n  }\n\n  /**\n   * Store a reference to the needed elements\n   * @param {Element} el\n   */\n\n\n  Filter.prototype._cacheElements = function _cacheElements(el) {\n    this.el = el;\n    this.moduleEls = this.el.querySelectorAll('.spark-filter-module');\n\n    // These options are here so that the modules can communicate with the filter to do certain tasks\n    var defaultOption = {\n      onAfterExpand: this._onAfterExpand.bind(this),\n      onAfterCollapse: this._onAfterCollapse.bind(this)\n      //onShowAllComplete: this._onShowAllComplete.bind(this),\n    };\n\n    if (this.moduleEls.length > 0) {\n      for (var i = 0; i < this.moduleEls.length; i++) {\n        if (typeof this.moduleOptions[i] !== 'undefined') {\n          for (var key in defaultOption) {\n            this.moduleOptions[i][key] = defaultOption[key];\n          }\n          this.moduleInsts[i] = new _filterModule2.default(this.moduleEls[i], this.moduleOptions[i]);\n        } else {\n          this.moduleInsts[i] = new _filterModule2.default(this.moduleEls[i], defaultOption);\n        }\n      }\n    }\n\n    this._filterToggleContainer = this.el.querySelector('.spark-filter__toggle-container');\n    this._toggleFilterButton = this.el.querySelector('.spark-filter__toggle-button');\n    this._toggleFilterLabel = this.el.querySelector('.spark-filter__toggle-button span');\n    this._tagsContainer = this.el.querySelector('.spark-filter__tags-container');\n    this._tagsCounter = this.el.querySelector('.spark-filter__applied-filters-counter');\n    this._clearAllButton = this.el.querySelector('.spark-filter__clear-all');\n    this._filterContent = this.el.querySelector('.spark-filter__content');\n    this._modulesContainer = this.el.querySelector('.spark-filter__modules-container');\n    this._viewMoreButton = this.el.querySelector('.spark-filter__view-more-filters');\n    this._viewLessButton = this.el.querySelector('.spark-filter__view-less-filters');\n    this._filterFooter = this.el.querySelector('.spark-filter__footer');\n    this._buttonGroupEl = this.el.querySelector('.spark-filter__apply-btn-container');\n    this._applyFiltersButton = this.el.querySelector('.spark-filter__btn-apply');\n  };\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n\n\n  Filter.prototype._bindEventListenerCallbacks = function _bindEventListenerCallbacks() {\n    this._onResizeBound = this._onResize.bind(this);\n    this._toggleViewBound = this._toggleView.bind(this);\n    this._toggleFilterClickBound = this.toggleFilterClick.bind(this);\n    this._onClearAllBound = this._onClearAll.bind(this);\n    this._onScrollBound = this._onScroll.bind(this);\n  };\n\n  /**\n   * Add event listeners\n   */\n\n\n  Filter.prototype._addEventListeners = function _addEventListeners() {\n    window.addEventListener('resize', this._onResizeBound);\n    window.addEventListener('scroll', this._onScrollBound);\n    !this._viewMoreButton || this._viewMoreButton.addEventListener('click', this._toggleViewBound);\n    !this._viewLessButton || this._viewLessButton.addEventListener('click', this._toggleViewBound);\n    !this._toggleFilterButton || this._toggleFilterButton.addEventListener('click', this._toggleFilterClickBound);\n    !this._clearAllButton || this._clearAllButton.addEventListener('click', this._onClearAllBound);\n  };\n\n  /**\n   * Remove event listeners\n   */\n\n\n  Filter.prototype._removeEventListeners = function _removeEventListeners() {\n    window.removeEventListener('resize', this._onResizeBound);\n    window.removeEventListener('scroll', this._onScrollBound);\n    !this._viewMoreButton || this._viewMoreButton.removeEventListener('click', this._toggleViewBound);\n    !this._viewLessButton || this._viewLessButton.removeEventListener('click', this._toggleViewBound);\n    !this._toggleFilterButton || this._toggleFilterButton.removeEventListener('click', this._toggleFilterClickBound);\n    !this._clearAllButton || this._clearAllButton.removeEventListener('click', this._onClearAllBound);\n  };\n\n  /**\n   * Initialize filter\n   */\n\n\n  Filter.prototype._initFilterDisplay = function _initFilterDisplay() {\n    this.initializingFilter = true;\n\n    if (this.moduleEls.length > 0) {\n      this.extraModulesExpanded = false;\n    }\n\n    (0, _addClass2.default)(this.el, 'spark-filter--initializing');\n\n    this._determineFilterLayout();\n  };\n\n  /**\n   * Determine which filter layout should be displayed i.e. Expand/Collapse view or Wide view\n   */\n\n\n  Filter.prototype._determineFilterLayout = function _determineFilterLayout() {\n    this.currentBreakpoint = (0, _breakpoint.get)(window.innerWidth);\n\n    switch (this.currentBreakpoint) {\n      case 'xs':\n        this._curCol = 1;\n        break;\n      case 'sm':\n        this._curCol = 2;\n        break;\n      case 'md':\n        this._curCol = 3;\n        break;\n      default:\n        this._curCol = 4;\n        break;\n    }\n\n    if (this._curCol <= 1) {\n      // Display expand-collapse filter\n      if (!this._isDropdownState) {\n        this._applyExpandCollapseLayout();\n        this._showModule();\n      }\n    } else {\n      // Display wide-screen filter\n      if (this._expandCollapseState) {\n        this._removeExpandCollapseLayout();\n      }\n\n      if ((0, _hasClass2.default)(this._buttonGroupEl, 'is-fixed')) {\n        clearTimeout(this._timeout);\n        this._filterFooter.removeAttribute('style');\n        this._buttonGroupEl.removeAttribute('style');\n        (0, _removeClass2.default)(this._buttonGroupEl, 'is-fixed');\n      }\n\n      this._showModule();\n\n      if (!this.extraModulesExpanded) {\n        this._hideModule(this._curCol, this._maxCol - 1);\n      }\n    }\n\n    // Determine whether to show or hide View More/Less buttons\n    if (!this._isDropdownState) {\n      var hiddenModules = document.querySelectorAll('.spark-filter-module.hide');\n\n      if (!this.extraModulesExpanded && hiddenModules.length === 0) {\n        (0, _addClass2.default)(this._viewMoreButton, 'hide');\n      } else if (!this.extraModulesExpanded && hiddenModules.length > 0) {\n        (0, _removeClass2.default)(this._viewMoreButton, 'hide');\n      }\n    }\n  };\n\n  /**\n   * Update the filter layout as necessary\n   */\n\n\n  Filter.prototype._updateFilterLayout = function _updateFilterLayout() {\n    this._determineFilterLayout();\n  };\n\n  /**\n   * Expand or collapse extra filters\n   */\n\n\n  Filter.prototype._toggleView = function _toggleView() {\n    if (this._isFilterExpanded && !this.extraModulesExpanded) {\n      this._showModule();\n      this._dispatchVisibilityEvent();\n    } else if (this._isFilterExpanded && this.extraModulesExpanded) {\n      this._hideModule(this._curCol, this._maxCol - 1);\n    }\n\n    this.extraModulesExpanded = !this.extraModulesExpanded;\n    (0, _toggleClass2.default)(this._viewMoreButton, 'hide');\n    (0, _toggleClass2.default)(this._viewLessButton, 'hide');\n  };\n\n  /**\n   * Handle click event when filter toggles are clicked\n   */\n\n\n  Filter.prototype.toggleFilterClick = function toggleFilterClick() {\n    if (this.initializingFilter) {\n      this.initializingFilter = false;\n    }\n\n    this.toggleFilter();\n  };\n\n  /**\n   * To hide or show filter module\n   * @params {String} toggle; collapse; expand;\n   * @params {Boolean} Change the value of `this._isFilterExpanded` based on the boolean value\n   */\n\n\n  Filter.prototype.toggleFilter = function toggleFilter(option, noStateChange) {\n    if ((0, _hasClass2.default)(this.el, 'spark-filter--initializing') && !this.initializingFilter) {\n      (0, _removeClass2.default)(this.el, 'spark-filter--initializing');\n      (0, _addClass2.default)(this.el, 'spark-filter--initialized');\n    }\n\n    if (option === 'expand') {\n      if (!this.initializingFilter) {\n        (0, _removeClass2.default)(this._filterContent, 'hide');\n\n        (0, _height2.default)({\n          el: this.el,\n          toggleEl: '.spark-filter__content',\n          toggleClass: 'filter-expanded',\n          action: 'expand'\n        });\n\n        this._toggleFilterLabel.innerHTML = 'Hide';\n      } else {\n        (0, _removeClass2.default)(this._filterContent, 'hide');\n      }\n\n      if (!noStateChange) {\n        this._isFilterExpanded = true;\n      }\n    } else if (option === 'collapse') {\n      if (!this.initializingFilter) {\n        (0, _addClass2.default)(this._filterContent, 'hide');\n\n        (0, _height2.default)({\n          el: this.el,\n          toggleEl: '.spark-filter__content',\n          toggleClass: 'filter-expanded',\n          action: 'collapse'\n        });\n\n        this._toggleFilterLabel.innerHTML = 'Show';\n      } else {\n        (0, _addClass2.default)(this._filterContent, 'hide');\n      }\n\n      if (!noStateChange) {\n        this._isFilterExpanded = false;\n      }\n    } else {\n      (0, _toggleClass2.default)(this._filterContent, 'hide');\n\n      if ((0, _hasClass2.default)(this.el, 'filter-expanded')) {\n        (0, _height2.default)({\n          el: this.el,\n          toggleEl: '.spark-filter__content',\n          toggleClass: 'filter-expanded',\n          action: 'collapse'\n        });\n\n        this._toggleFilterLabel.innerHTML = 'Show';\n      } else {\n        (0, _height2.default)({\n          el: this.el,\n          toggleEl: '.spark-filter__content',\n          toggleClass: 'filter-expanded',\n          action: 'expand'\n        });\n\n        this._toggleFilterLabel.innerHTML = 'Hide';\n      }\n\n      if (!noStateChange) {\n        this._isFilterExpanded = !this._isFilterExpanded;\n\n        if ((0, _hasClass2.default)(this.el, 'spark-filter--dropdown') && !(0, _hasClass2.default)(this._filterContent, 'hide')) {\n          this._calculateApplyBtnPosition();\n        }\n      }\n    }\n\n    if (!(0, _hasClass2.default)(this.el, 'spark-filter--dropdown') && (0, _hasClass2.default)(this._buttonGroupEl, 'is-fixed')) {\n      clearTimeout(this._timeout);\n      this._filterFooter.removeAttribute('style');\n      this._buttonGroupEl.removeAttribute('style');\n      (0, _removeClass2.default)(this._buttonGroupEl, 'is-fixed');\n    }\n\n    this._dispatchVisibilityEvent();\n  };\n\n  /**\n   * On-resize handler that updates layout as needed based on screen dimensions\n   */\n\n\n  Filter.prototype._onResize = function _onResize() {\n    this._updateFilterLayout();\n  };\n\n  /**\n   * On-scroll handler that determines Apply button positioning at the xs breakpoint\n   */\n\n\n  Filter.prototype._onScroll = function _onScroll() {\n    if (this._isDropdownState) {\n      this._timeout = setTimeout(this._calculateApplyBtnPosition.bind(this), 300);\n    }\n  };\n\n  /**\n   * Callback triggered after the expansion of a module at the xs breakpoint\n   */\n\n\n  Filter.prototype._onAfterExpand = function _onAfterExpand() {\n    if (!(0, _hasClass2.default)(this._buttonGroupEl, 'is-fixed')) {\n      this._timeout = setTimeout(this._calculateApplyBtnPosition.bind(this), 300);\n    }\n  };\n\n  /**\n   * Callback triggered after the collapse of a module at the xs breakpoint\n   */\n\n\n  Filter.prototype._onAfterCollapse = function _onAfterCollapse() {\n    this._timeout = setTimeout(this._calculateApplyBtnPosition.bind(this), 300);\n  };\n\n  /**\n   * Callback triggered after Show all is complete at the xs breakpoint\n   */\n\n  /* TODO: This is not required anymore as show all is not available at the xs breakpoint anymore\n  _onShowAllComplete() {\n    if(this._isDropdownState) {\n      this._timeout = setTimeout(this._calculateApplyBtnPosition.bind(this), 300);\n    }\n  }\n  */\n\n  /**\n   * Dispatch a custom event so content inside the Filter can respond\n   */\n\n\n  Filter.prototype._dispatchVisibilityEvent = function _dispatchVisibilityEvent() {\n    var e = document.createEvent('Event');\n    e.initEvent('spark.visible-children', true, true);\n    this.el.dispatchEvent(e);\n  };\n\n  /**\n   * Calculate the position of the Apply button at the xs breakpoint\n   */\n\n\n  Filter.prototype._calculateApplyBtnPosition = function _calculateApplyBtnPosition() {\n\n    var filterOffsets = this.el.getBoundingClientRect();\n\n    if (filterOffsets.height > 255) {\n      // 3 collapsed module heights + filter header height = 255\n      var windowHeight = window.innerHeight;\n      var scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;\n      var filterHiddenBefore = scrollTop - (filterOffsets.top + document.body.scrollTop);\n      var filterHiddenAfter = filterOffsets.top + document.body.scrollTop + filterOffsets.height - (scrollTop + windowHeight);\n\n      if (!(scrollTop > filterOffsets.top + document.body.scrollTop + filterOffsets.height || filterOffsets.top + document.body.scrollTop > scrollTop + window.innerHeight)) {\n        var percentInView = 100;\n        var inViewport;\n        var hiddenBefore = 0;\n        var hiddenAfter = 0;\n\n        if (filterHiddenBefore > 0) {\n          percentInView -= filterHiddenBefore * 100 / filterOffsets.height;\n          hiddenBefore = filterHiddenBefore;\n        }\n\n        if (filterHiddenAfter > 0) {\n          percentInView -= filterHiddenAfter * 100 / filterOffsets.height;\n          hiddenAfter = filterHiddenAfter;\n        }\n\n        inViewport = (filterOffsets.height - (hiddenAfter + hiddenBefore)) / windowHeight * 100;\n      }\n\n      if (filterOffsets.bottom > (window.innerHeight || document.documentElement.clientHeight) && (percentInView > 45 || inViewport > 50)) {\n        var buttonGroupHeight = this._buttonGroupEl.offsetHeight;\n        var filterWidth = filterOffsets.width;\n\n        this._filterFooter.style.height = buttonGroupHeight + 'px';\n        (0, _addClass2.default)(this._buttonGroupEl, 'is-fixed');\n        this._buttonGroupEl.style.width = filterWidth - 2 + 'px'; // accounting for border width\n        this._buttonGroupEl.style.left = filterOffsets.left + 1 + 'px'; // accounting for left border\n\n        this._applyBtnPositionFixed();\n      } else {\n        this._applyBtnPositionRelative();\n      }\n    }\n  };\n\n  /**\n   * Set position:relative for the Apply button\n   */\n\n\n  Filter.prototype._applyBtnPositionRelative = function _applyBtnPositionRelative() {\n\n    //function attachApplyBtn(){\n    var currentButtonPosition = parseInt(getComputedStyle(this._buttonGroupEl).bottom);\n    var listBottom = this._modulesContainer.getBoundingClientRect().bottom;\n    var viewportHeight = window.innerHeight || document.documentElement.clientHeight;\n    var buttonGroupHeight = this._buttonGroupEl.getBoundingClientRect().height;\n    var distanceToMove = viewportHeight - (listBottom + buttonGroupHeight);\n\n    if (!isNaN(currentButtonPosition)) {\n      var animationListener = function animationListener() {\n        this._filterFooter.removeAttribute('style');\n        this._buttonGroupEl.removeAttribute('style');\n        (0, _removeClass2.default)(this._buttonGroupEl, 'is-fixed');\n        (0, _removeClass2.default)(this._buttonGroupEl, 'spark-filter__apply-btn-container--animate');\n        this._buttonGroupEl.removeEventListener('animationend', animationListener);\n      };\n\n      this._buttonGroupEl.addEventListener('animationend', animationListener.bind(this), false);\n\n      var keyframe = '-webkit-transform: translateY(-' + distanceToMove + 'px); transform: translateY(-' + distanceToMove + 'px);';\n\n      this._buttonGroupEl.setAttribute('style', this._buttonGroupEl.getAttribute('style') + ' ' + keyframe);\n      (0, _addClass2.default)(this._buttonGroupEl, 'spark-filter__apply-btn-container--animate');\n    }\n  };\n\n  /**\n   * Set position:fixed for the Apply button\n   */\n\n\n  Filter.prototype._applyBtnPositionFixed = function _applyBtnPositionFixed() {\n    var requestID = requestAnimationFrame(moveApplyBtn.bind(this));\n    var incrementer = .1;\n\n    function moveApplyBtn() {\n      incrementer += .01;\n      var currentButtonPosition = parseInt(getComputedStyle(this._buttonGroupEl).bottom);\n      var buttonHeight = parseInt(getComputedStyle(this._buttonGroupEl).height);\n\n      if (currentButtonPosition < buttonHeight * -1) {\n        currentButtonPosition = buttonHeight * -1;\n      }\n\n      if (currentButtonPosition > -1) {\n        this._buttonGroupEl.style.bottom = '0px';\n        cancelAnimationFrame(requestID);\n      } else if (currentButtonPosition < 0) {\n        currentButtonPosition += 1 / incrementer;\n        this._buttonGroupEl.style.bottom = currentButtonPosition + 'px';\n        requestAnimationFrame(moveApplyBtn.bind(this));\n      }\n    }\n  };\n\n  /**\n   * Callback for Clear all\n   */\n\n\n  Filter.prototype._onClearAll = function _onClearAll() {\n    (this.onClearAll || noop)();\n  };\n\n  /**\n   * Show all modules\n   */\n\n\n  Filter.prototype._showModule = function _showModule() {\n    for (var i = 0; i < this.moduleEls.length; i++) {\n      (0, _removeClass2.default)(this.moduleEls[i], 'hide');\n    }\n  };\n\n  /**\n   * Hide certain modules\n   * @param {Number} start index\n   * @param {Number} end index\n   */\n\n\n  Filter.prototype._hideModule = function _hideModule(start, end) {\n    end = end || this.moduleEls.length - 1;\n    for (var i = start; i <= end; i++) {\n      (0, _addClass2.default)(this.moduleEls[i], 'hide');\n    }\n  };\n\n  /**\n   * Apply Expand/Collapse layout for the filter\n   * Used when the filter gets to the xs breakpoint\n   */\n\n\n  Filter.prototype._applyExpandCollapseLayout = function _applyExpandCollapseLayout() {\n    (0, _addClass2.default)(this.el, 'spark-filter--dropdown');\n    this._expandCollapseState = true;\n\n    var tags = this._tagsContainer.querySelectorAll('.spark-filter__tag');\n    if (tags.length > 0) {\n      for (var i = 0; i < tags.length; i++) {\n        (0, _addClass2.default)(tags[i], 'hide');\n      }\n      (0, _removeClass2.default)(this._tagsCounter, 'hide');\n    }\n\n    (0, _addClass2.default)(this._viewMoreButton, 'hide');\n    (0, _addClass2.default)(this._viewLessButton, 'hide');\n\n    if (this._applyFiltersButton) {\n      (0, _removeClass2.default)(this._applyFiltersButton, 'spark-btn--sm');\n      (0, _addClass2.default)(this._applyFiltersButton, 'spark-btn--block');\n    }\n\n    for (var j = 0; j < this.moduleInsts.length; j++) {\n      this.moduleInsts[j]._applyExpand();\n    }\n\n    this._isDropdownState = true;\n    this._timeout = setTimeout(this._calculateApplyBtnPosition.bind(this), 300);\n  };\n\n  /**\n   * Remove Expand/Collapse layout and apply the horizontal layout for the filter\n   * Used when the screen size is larger than the xs breakpoint\n   */\n\n\n  Filter.prototype._removeExpandCollapseLayout = function _removeExpandCollapseLayout() {\n\n    (0, _removeClass2.default)(this.el, 'spark-filter--dropdown');\n    this._expandCollapseState = false;\n    this._filterFooter.removeAttribute('style');\n    this._buttonGroupEl.removeAttribute('style');\n    (0, _removeClass2.default)(this._buttonGroupEl, 'is-fixed');\n\n    var tags = this._tagsContainer.querySelectorAll('.spark-filter__tag');\n    if (tags.length > 0) {\n      for (var i = 0; i < tags.length; i++) {\n        (0, _removeClass2.default)(tags[i], 'hide');\n      }\n      (0, _addClass2.default)(this._tagsCounter, 'hide');\n    }\n\n    if (this.extraModulesExpanded) {\n      (0, _removeClass2.default)(this._viewLessButton, 'hide');\n    } else {\n      (0, _removeClass2.default)(this._viewMoreButton, 'hide');\n    }\n\n    if (this._applyFiltersButton) {\n      (0, _addClass2.default)(this._applyFiltersButton, 'spark-btn--sm');\n      (0, _removeClass2.default)(this._applyFiltersButton, 'spark-btn--block');\n    }\n\n    for (var j = 0; j < this.moduleInsts.length; j++) {\n      this.moduleInsts[j]._disapplyExpand();\n    }\n    this._isDropdownState = false;\n  };\n\n  /**\n   * Generate a tag element in filter, which will be directly posted inside `.spark-filter__tags-container`\n   * @param {string} input name - Name of the input to allow any callbacks to target input specifically\n   * @param {string} tag label - The label to be displayed in the tag. This could be the input's label or another user defined label\n   * @param {function} callback function for `X` button\n   */\n\n\n  Filter.prototype.createTagEl = function createTagEl(input, label, clearCallback) {\n    var tagEl = document.createElement('div');\n    tagEl.className = (0, _hasClass2.default)(this.el, 'spark-filter--dropdown') ? 'spark-filter__tag hide' : 'spark-filter__tag';\n    tagEl.setAttribute('data-filter-name', input);\n    tagEl.innerHTML = '<span class=\"spark-filter__tag__label\">' + label + '</span><i class=\"spark-icon spark-filter__tag__close\"></i>';\n\n    this._tagsContainer.insertBefore(tagEl, this._clearAllButton);\n\n    // create event listener after adding element to DOM\n    tagEl.querySelector('.spark-filter__tag__close').addEventListener('click', clearCallback || noop);\n\n    (0, _removeClass2.default)(this._clearAllButton, 'hide');\n\n    // Show tag count if on small screen and this is initial application of filters\n    if ((0, _hasClass2.default)(this.el, 'spark-filter--dropdown')) (0, _removeClass2.default)(this._tagsCounter, 'hide');\n  };\n\n  /**\n   * Remove all tags\n   */\n\n\n  Filter.prototype.clearAllTagEls = function clearAllTagEls() {\n    var tags = this._tagsContainer.querySelectorAll('.spark-filter__tag');\n    for (var i = 0; i < tags.length; i++) {\n      this._tagsContainer.removeChild(tags[i]);\n    }\n\n    // Reset counter\n    var counter = this._tagsContainer.querySelector('span');\n    counter.innerHTML = '0';\n\n    (0, _addClass2.default)(this._clearAllButton, 'hide');\n    (0, _addClass2.default)(this._tagsCounter, 'hide');\n  };\n\n  /**\n   * Show Module Clear Button\n   * @param {Element} moduleName An identifier for the module being targeted\n   */\n\n\n  Filter.prototype.showModuleClearButton = function showModuleClearButton(moduleName) {\n    for (var i = 0; i < this.moduleInsts.length; i++) {\n      if (this.moduleInsts[i].el.getAttribute('data-filter-module') === moduleName) {\n        this.moduleInsts[i].enableClearBtn();\n      }\n    }\n  };\n\n  /**\n   * Disable Module Clear Button\n   * @param {Element} moduleName An identifier for the module being targeted\n   */\n\n\n  Filter.prototype.disableModuleClearButton = function disableModuleClearButton(moduleName) {\n    for (var i = 0; i < this.moduleInsts.length; i++) {\n      if (this.moduleInsts[i].el.getAttribute('data-filter-module') === moduleName) {\n        this.moduleInsts[i].disableClearBtn();\n      }\n    }\n  };\n\n  /**\n   * Hide Module Clear Button\n   * @param {Element} moduleName An identifier for the module being targeted\n   */\n\n\n  Filter.prototype.hideModuleClearButton = function hideModuleClearButton(moduleName) {\n    for (var i = 0; i < this.moduleInsts.length; i++) {\n      if (this.moduleInsts[i].el.getAttribute('data-filter-module') === moduleName) {\n        this.moduleInsts[i].hideClearBtn();\n      }\n    }\n  };\n\n  /**\n   * Get Module Clear button status\n   *  @param {Element} moduleName An identifier for the module being targeted\n   */\n\n\n  Filter.prototype.moduleClearButtonStatus = function moduleClearButtonStatus(moduleName) {\n    for (var i = 0; i < this.moduleInsts.length; i++) {\n      if (this.moduleInsts[i].el.getAttribute('data-filter-module') === moduleName) {\n        return this.moduleInsts[i].getClearButtonStatus();\n      }\n    }\n  };\n\n  return Filter;\n}(_base2.default);\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nFilter.prototype._whitelistedParams = ['onClearAll', 'moduleOptions'];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nFilter.prototype.defaults = {\n  el: null,\n  moduleEls: [],\n  _filterToggleContainer: null,\n  _toggleFilterButton: null,\n  _toggleFilterLabel: null,\n  _tagsContainer: null,\n  _tagsCounter: null,\n  _clearAllButton: null,\n  _filterContent: null,\n  _modulesContainer: null,\n  _viewMoreButton: null,\n  _viewLessButton: null,\n  _filterFooter: null,\n  _buttonGroupEl: null,\n  _applyFiltersButton: null,\n  moduleInsts: [],\n  moduleOptions: [],\n  maxCol: 4,\n  onClearAll: noop,\n  extraModulesExpanded: false,\n  _isFilterExpanded: false,\n  _isDropdownState: false,\n  _isModuleExpand: true,\n  _curCol: 4,\n  _onResizeBound: null,\n  _toggleViewBound: null,\n  _toggleFilterClickBound: null,\n  _onClearAllBound: null,\n  _onScrollBound: null\n};\n\nexports.default = Filter;\nmodule.exports = exports['default'];\n//# sourceMappingURL=filter.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _toggleClass = require('../helpers/dom/toggle-class');\n\nvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\nvar _addClass = require('../helpers/dom/add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('../helpers/dom/remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nvar _hasClass = require('../helpers/dom/has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _getParent = require('../helpers/traversal/get-parent');\n\nvar _getParent2 = _interopRequireDefault(_getParent);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\nodal\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Show content in a modal.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * new Modal(el);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module components/modal.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar Modal = function (_BaseComponent) {\n  _inherits(Modal, _BaseComponent);\n\n  /**\n   * Modal constructor.\n   * @param {Element} el\n   * @param {Object} params\n   */\n  function Modal(el) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Modal);\n\n    params.elRequired = true;\n\n    if (!(_this = _possibleConstructorReturn(this, _BaseComponent.call(this, el, params)), _this)) {\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this._bindEventListenerCallbacks();\n    _this._addEventListeners();\n    return _possibleConstructorReturn(_this);\n  }\n\n  /**\n   * Open\n   */\n\n\n  Modal.prototype.open = function open() {\n\n    this.isActive = true;\n    document.activeElement ? this.focusedElBeforeOpen = document.activeElement : null;\n\n    var modalFocusableEls = this.modalEl.querySelectorAll('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), [tabindex=\"0\"]');\n    if (modalFocusableEls.length > 0) {\n      this.modalFocusableEls = Array.prototype.slice.call(modalFocusableEls);\n      this.firstModalFocusableEl = this.modalFocusableEls[0];\n      this.lastModalFocusableEl = this.modalFocusableEls[this.modalFocusableEls.length - 1];\n    }\n\n    this._addWindowEventListeners();\n    this._updateClasses();\n    (0, _addClass2.default)(document.body, 'spark-modal-open');\n\n    // Set focus to close button once modal has been displayed\n    if (modalFocusableEls.length > 0) {\n      this.firstModalFocusableEl.focus();\n    }\n\n    return this;\n  };\n\n  /**\n   * Close\n   */\n\n\n  Modal.prototype.close = function close() {\n\n    this.isActive = false;\n    this.focusedElBeforeOpen ? this.focusedElBeforeOpen.focus() : null;\n    this._removeWindowEventListeners();\n    this._updateClasses();\n    (0, _removeClass2.default)(document.body, 'spark-modal-open');\n\n    return this;\n  };\n\n  /**\n   * Update the component to use a new element or reparse from\n   * the existing element.\n   * @param {Element} el Optional\n   * @param {Object} params\n   */\n\n\n  Modal.prototype.update = function update(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\n    this._removeEventListeners();\n    this._cacheElements(el || this.el, params);\n    this._addEventListeners();\n    this._updateClasses();\n    this._removeWindowEventListeners();\n\n    if (this.isActive) {\n      this._addWindowEventListeners();\n    }\n\n    return this;\n  };\n\n  /**\n   * Store a reference to the element. Either a modal itself\n   * or a button referencing a modal may be passed.\n   * @param {Element} el\n   * @param {Element} params @optional\n   */\n\n\n  Modal.prototype._cacheElements = function _cacheElements(el, params) {\n\n    var modalPassed = (0, _hasClass2.default)(el, 'spark-modal');\n    var modalEl = params.modalEl;\n\n    if (modalPassed) {\n      this.modalEl = el;\n    } else {\n      this.el = el;\n      this.modalEl = modalEl || document.querySelector(el.getAttribute('data-modal'));\n    }\n\n    this.scrollEl = this.modalEl.querySelector('.spark-modal__scroll') || this.modalEl;\n\n    this.isActive = (0, _hasClass2.default)(this.el || this.modalEl, 'active');\n  };\n\n  /**\n   * Update classes for the open or close state.\n   */\n\n\n  Modal.prototype._updateClasses = function _updateClasses() {\n    (0, _toggleClass2.default)(this.modalEl, 'active', this.isActive);\n  };\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n\n\n  Modal.prototype._bindEventListenerCallbacks = function _bindEventListenerCallbacks() {\n    this._onClickBound = this._onClick.bind(this);\n    this._onKeyupBound = this._onKeyup.bind(this);\n    this._onKeydownBound = this._onKeydown.bind(this);\n    this._onModalClickBound = this._onModalClick.bind(this);\n  };\n\n  /**\n   * Add event listeners for DOM events.\n   */\n\n\n  Modal.prototype._addEventListeners = function _addEventListeners() {\n    if (this.el) this.el.addEventListener('click', this._onClickBound);\n    if (this.modalEl) this.modalEl.addEventListener('click', this._onModalClickBound);\n  };\n\n  /**\n   * Remove event listeners for DOM events..\n   */\n\n\n  Modal.prototype._removeEventListeners = function _removeEventListeners() {\n    if (this.el) this.el.removeEventListener('click', this._onClickBound);\n    if (this.modalEl) this.modalEl.removeEventListener('click', this._onModalClickBound);\n  };\n\n  /**\n   * Add event listeners for DOM events.\n   */\n\n\n  Modal.prototype._addWindowEventListeners = function _addWindowEventListeners() {\n    this._removeWindowEventListeners();\n    window.addEventListener('keyup', this._onKeyupBound);\n    window.addEventListener('keydown', this._onKeydownBound);\n  };\n\n  /**\n   * Remove event listeners for DOM events..\n   */\n\n\n  Modal.prototype._removeWindowEventListeners = function _removeWindowEventListeners() {\n    window.removeEventListener('keyup', this._onKeyupBound);\n    window.removeEventListener('keydown', this._onKeydownBound);\n  };\n\n  /**\n   * When the button is clicked.\n   * @param {Object} e\n   */\n\n\n  Modal.prototype._onClick = function _onClick() {\n    this.open();\n  };\n\n  /**\n   * When we are clicked, toggle the opened state.\n   * @param {Object} e\n   */\n\n\n  Modal.prototype._onModalClick = function _onModalClick(e) {\n\n    // The close button is clicked or the actual modal (gray area)\n    if (e.target === this.scrollEl || e.target === this.modalEl || (0, _getParent2.default)(e.target, '.spark-modal__close, .spark-modal__dismiss', this.scrollEl)) {\n      e.preventDefault();\n      this.close();\n    }\n  };\n\n  /**\n   * When tabbing backwards, localize traversal to modal elements only\n   * @param {Object} e\n   */\n\n\n  Modal.prototype._onBackwardTab = function _onBackwardTab(e) {\n    if (document.activeElement === this.firstModalFocusableEl) {\n      e.preventDefault();\n      this.lastModalFocusableEl.focus();\n    }\n  };\n\n  /**\n   * When tabbing forwards, localize traversal to modal elements only\n   * @param {Object} e\n   */\n\n\n  Modal.prototype._onForwardTab = function _onForwardTab(e) {\n    if (document.activeElement === this.lastModalFocusableEl) {\n      e.preventDefault();\n      this.firstModalFocusableEl.focus();\n    }\n  };\n\n  /**\n   * When a key is pressed on the window and it's an ESC, close the modal.\n   * @param {Object} e\n   */\n\n\n  Modal.prototype._onKeyup = function _onKeyup(e) {\n    if (e.keyCode === 27) {\n      this.close();\n    }\n  };\n\n  /**\n   * When a key is pressed and it is the Tab key or Shift+Tab keys, determine whether to adjust focus\n   * @param {Object} e\n   */\n\n\n  Modal.prototype._onKeydown = function _onKeydown(e) {\n    if (e.keyCode === 9) {\n      if (this.modalFocusableEls.length === 1) {\n        e.preventDefault();\n      }\n\n      if (e.shiftKey) {\n        this._onBackwardTab(e);\n      } else {\n        this._onForwardTab(e);\n      }\n    }\n\n    if (e.keyCode === 13) {\n      if (e.target === document.querySelector('.spark-modal__close') || e.target === document.querySelector('.spark-modal__dismiss')) {\n        e.preventDefault();\n        this.close();\n      }\n    }\n  };\n\n  return Modal;\n}(_base2.default);\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\n\n\nModal.prototype.defaults = {\n  el: null,\n  modalEl: null,\n  scrollEl: null,\n  isActive: false,\n  _onClickBound: null,\n  _onKeyupBound: null,\n  _onKeydownBound: null,\n  _onModalClickBound: null\n};\n\nexports.default = Modal;\nmodule.exports = exports['default'];\n//# sourceMappingURL=modal.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _outerHeight = require('../dom/outer-height');\n\nvar _outerHeight2 = _interopRequireDefault(_outerHeight);\n\nvar _addClass = require('../dom/add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('../dom/remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nvar _hasClass = require('../dom/has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _toggleClass = require('../dom/toggle-class');\n\nvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar noop = function noop() {}; /**\n                                * # Animate Height\n                                * Animate the height of an element since we can't do this w/ pure CSS. Sigh.\n                                *\n                                * @example\n                                * animateHeight({\n                                *   el: ...,\n                                *   toggleEl: ...,\n                                *   // Optional params\n                                *   action: 'collapse'|'expand',\n                                *   heightAnimationClass: 'spark-animate-height',\n                                *   opacityAnimationClass: 'spark-animate-opacity',\n                                *   toggleProperty: 'display'|'overflow'|'visibility',\n                                *   toggleValue: 'block'|'none'|'visible'|'hidden',\n                                *   animationDuration: 250\n                                * });\n                                *\n                                * @module helpers/animation/height.js\n                                */\n\nvar runningAnimations = {\n  els: [],\n  completeCallbacks: []\n};\n\n/**\n * Get the inverse toggle value\n * @param  {String} property\n * @param  {String} originalValue\n * @return {String}\n */\nfunction getInverseToggleValue(el, property, originalValue) {\n\n  // Get the value to toggle to for the given property\n  switch (property) {\n    case 'overflow':\n    case 'visibility':\n      return originalValue === 'visible' ? 'hidden' : 'visible';\n    default:\n      return originalValue === 'block' || originalValue === 'inline-block' ? 'none' : 'block';\n  }\n}\n\n/**\n * When an animation is complete, clean up and run the callback.\n * @param  {Object} params\n */\nfunction onComplete(params) {\n\n  // Reset toggle el visibility\n  if (params.toggleClassName) {\n    (0, _toggleClass2.default)(params.el, params.toggleClassName, !params.collapse);\n  } else {\n    params.toggleEl.style[params.toggleProperty] = '';\n  }\n\n  // Remove the height property\n  params.el.style.height = '';\n  params.toggleEl.style.height = '';\n  params.toggleEl.style.marginBottom = '';\n  params.toggleEl.style.marginTop = '';\n\n  // Remove the spark-animate-height class so the transitions no longer apply\n  (0, _removeClass2.default)(params.el, params.heightAnimationClass);\n  (0, _removeClass2.default)(params.toggleEl, params.heightAnimationClass);\n\n  // Run the callback\n  params.onComplete();\n\n  // Remove the element and callback from their respective arrays\n  var runningIndex = runningAnimations.els.indexOf(params.el);\n  runningAnimations.els.splice(runningIndex, 1);\n  runningAnimations.completeCallbacks.splice(runningIndex, 1);\n}\n\n/**\n * @param {Object} params\n */\nfunction animateHeight(params) {\n\n  params = params || {};\n\n  var el = params.el;\n\n  if (!el) {\n    return;\n  }\n\n  var collapse = params.action && params.action === 'collapse';\n  var heightAnimationClass = params.heightAnimationClass || 'spark-animate-height';\n\n  // Allow for elements to be passed or selector strings\n  var toggleEl = typeof params.toggleEl === 'string' ? el.querySelector(params.toggleEl) : params.toggleEl;\n\n  // No element to be switching with toggling so we can't determine the desired height to animate to.\n  if (!toggleEl || (0, _hasClass2.default)(el, 'spark-no-animate')) {\n    return;\n  }\n\n  var toggleClassName = params.toggleClass;\n\n  // The style property to use when toggling visibility\n  var toggleProperty = params.toggleProperty || 'display';\n  var toggleStyles = window.getComputedStyle(toggleEl);\n  var originalToggleValue = toggleStyles[toggleProperty];\n  var toggleValue = params.toggleValue || getInverseToggleValue(toggleProperty, originalToggleValue);\n\n  // If we are already animating, stop now.\n  var runningIndex = runningAnimations.els.indexOf(el);\n  if (runningIndex !== -1) {\n\n    var completeCallback = runningAnimations.completeCallbacks[runningIndex];\n    if (completeCallback) {\n      clearTimeout(completeCallback);\n    }\n\n    onComplete({\n      el: el,\n      toggleEl: toggleEl,\n      onComplete: params.onComplete || noop,\n      collapse: collapse,\n      toggleProperty: toggleProperty,\n      toggleClassName: toggleClassName,\n      toggleValue: toggleValue,\n      heightAnimationClass: heightAnimationClass\n    });\n  }\n\n  // Store the current height\n  var originalHeight = (0, _outerHeight2.default)(el);\n\n  // Toggle the visible property\n  if (toggleClassName) {\n    (0, _toggleClass2.default)(el, toggleClassName, !collapse);\n  } else {\n    toggleEl.style[toggleProperty] = toggleValue;\n  }\n\n  // When measuring the size for a collapse, we have to wait a tic for it to be\n  // accurate. Not sure why. Ugh.\n  if (collapse) {\n    setTimeout(runAnimation, 0);\n  } else {\n    runAnimation();\n  }\n\n  function runAnimation() {\n\n    // Now that the toggle el is taking up space, get the new height which we will be animating to\n    var targetElHeight = (0, _outerHeight2.default)(el);\n\n    // We need to store the original and target toggle element heights. They differ depending on\n    // whether we are going to expand or collapse.\n    var targetToggleElHeight = void 0;\n    var originalToggleElHeight = void 0;\n\n    // If we are collapsing, reset the toggle style and set it when we're done. Set the height so\n    // that we can animate down to 0 or up to the target height.\n    if (collapse) {\n\n      if (toggleClassName) {\n        (0, _removeClass2.default)(el, toggleClassName);\n      } else {\n        toggleEl.style[toggleProperty] = originalToggleValue;\n      }\n\n      originalToggleElHeight = (0, _outerHeight2.default)(toggleEl, toggleStyles);\n      targetToggleElHeight = 0;\n    } else {\n      targetToggleElHeight = (0, _outerHeight2.default)(toggleEl, toggleStyles);\n      originalToggleElHeight = 0;\n    }\n\n    // Set the original height\n    el.style.height = originalHeight + 'px';\n    toggleEl.style.height = originalToggleElHeight + 'px';\n    toggleEl.style.marginBottom = '0px';\n    toggleEl.style.marginTop = '0px';\n\n    // Add the spark-animate-height class which will setup the transition-property and duration\n    (0, _addClass2.default)(el, heightAnimationClass);\n    (0, _addClass2.default)(toggleEl, heightAnimationClass);\n\n    runningAnimations.els.push(el);\n\n    // We need to wait a tick to toggle the height or else the animation class won't function\n    setTimeout(function () {\n\n      // Set the height to the target height\n      el.style.height = targetElHeight + 'px';\n      toggleEl.style.height = targetToggleElHeight + 'px';\n\n      // Remove inline styles after the animation is complete\n      runningAnimations.completeCallbacks.push(setTimeout(function () {\n        onComplete({\n          el: el,\n          toggleEl: toggleEl,\n          onComplete: params.onComplete || noop,\n          collapse: collapse,\n          toggleProperty: toggleProperty,\n          toggleClassName: toggleClassName,\n          toggleValue: toggleValue,\n          heightAnimationClass: heightAnimationClass\n        });\n      }, params.animationDuration !== undefined ? params.animationDuration : 201));\n    }, 0);\n  }\n}\n\nexports.default = animateHeight;\nmodule.exports = exports['default'];\n//# sourceMappingURL=height.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _trim = require('../util/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nvar _hasClass = require('./has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * # Add Class\n * Add a class on an element.\n *\n * @param {Element|Array} el An element or array of elements to update.\n * @param {String} name\n * @return {Element}\n *\n * @module helpers/dom/add-class.js\n */\n\nvar ws = /\\s+/;\nvar cleanup = /\\s{2,}/g;\n\nfunction addClass(el, name) {\n\n  if (arguments.length === 2 && typeof name === 'string') {\n    name = (0, _trim2.default)(name).split(ws);\n  } else {\n    name = name instanceof Array ? name : Array.prototype.slice.call(arguments, 1);\n  }\n\n  // optimize for best, most common case\n  if (name.length === 1 && el.classList) {\n    if (name[0]) {\n      el.classList.add(name[0]);\n    }\n    return el;\n  }\n\n  var toAdd = [];\n  var i = 0;\n  var l = name.length;\n  var item = void 0;\n  var clsName = typeof el.className === 'string' ? el.className : el.getAttribute ? el.getAttribute('class') : '';\n\n  // see if we have anything to add\n  for (; i < l; i++) {\n    item = name[i];\n    if (item && !(0, _hasClass2.default)(clsName, item)) {\n      toAdd.push(item);\n    }\n  }\n\n  if (toAdd.length) {\n    if (typeof el.className === 'string') {\n      el.className = (0, _trim2.default)((clsName + ' ' + toAdd.join(' ')).replace(cleanup, ' '));\n    } else if (el.setAttribute) {\n      el.setAttribute('class', (0, _trim2.default)((clsName + ' ' + toAdd.join(' ')).replace(cleanup, ' ')));\n    }\n  }\n\n  return el;\n}\n\nexports.default = addClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=add-class.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Breakpoint Helpers\n * Find the active breakpoint.\n *\n * @param {Number} width\n *\n * @module helpers/dom/breakpoint.js\n */\n\n/**\n * Breakpoints being used in the CSS.\n * @type {Object}\n */\nvar defaultBreakpoints = {\n  xs: {\n    min: 0,\n    max: 543\n  },\n  sm: {\n    min: 544,\n    max: 795\n  },\n  md: {\n    min: 796,\n    max: 1047\n  },\n  lg: {\n    min: 1048,\n    max: 1799\n  },\n  xl: {\n    min: 1800,\n    max: Infinity\n  }\n};\n\nfunction get(width, breakpoints) {\n\n  breakpoints = breakpoints || defaultBreakpoints;\n\n  var i = void 0;\n\n  for (i in breakpoints) {\n    if (width >= breakpoints[i].min && width <= breakpoints[i].max) {\n      return i;\n    }\n  }\n}\n\nexports.get = get;\n//# sourceMappingURL=breakpoint.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * # Has Class\n * See if an element has a class.\n *\n * @param {Element|String} el\n * @param {String} name\n * @return {Boolean}\n *\n * @module helpers/dom/has-class.js\n */\nfunction hasClass(el, name) {\n  var cName = ((typeof el === 'undefined' ? 'undefined' : _typeof(el)) === 'object' ? el.className || el.getAttribute && el.getAttribute('class') || '' : el || '').replace(/[\\t\\r\\n\\f]/g, ' ');\n  return (' ' + cName + ' ').indexOf(' ' + name + ' ') !== -1;\n}\n\nexports.default = hasClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=has-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _each = require('../util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar props = ['marginTop', 'marginBottom', 'borderTop', 'borderBottom']; /**\n                                                                         * # Outer Height\n                                                                         * Get the outer height of an element (including margin and border)\n                                                                         *\n                                                                         * @param {Element} el\n                                                                         * @param {Object} styles Optional Already have computed styles? Pass them in.\n                                                                         *\n                                                                         * @example\n                                                                         * outerHeight(el, computedStyles);\n                                                                         *\n                                                                         * @module helpers/outer-height.js\n                                                                         */\n\n\nfunction outerHeight(el, styles) {\n\n  styles = styles || window.getComputedStyle(el);\n\n  var height = el.clientHeight;\n\n  (0, _each2.default)(props, function (prop) {\n    height += parseInt(styles[prop] || 0, 10);\n  });\n\n  return height;\n}\n\nexports.default = outerHeight;\nmodule.exports = exports['default'];\n//# sourceMappingURL=outer-height.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _trim = require('../util/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ws = /\\s+/; /**\n                 * # Remove Class\n                 * Remove a class on an element.\n                 *\n                 * @param {Element|Array} el An element or array of elements to update.\n                 * @param {String} name\n                 * @return {Element}\n                 *\n                 * @module helpers/dom/remove-class.js\n                 */\n\nvar cleanup = /\\s{2,}/g;\n\nfunction removeClass(el, name) {\n\n  if (arguments.length === 2 && typeof name === 'string') {\n    name = (0, _trim2.default)(name).split(ws);\n  } else {\n    name = name instanceof Array ? name : Array.prototype.slice.call(arguments, 1);\n  }\n\n  // optimize for best, most common case\n  if (name.length === 1 && el.classList) {\n    if (name[0]) el.classList.remove(name[0]);\n    return el;\n  }\n\n  // store two copies\n  var clsName = ' ' + (typeof el.className === 'string' ? el.className : el.getAttribute ? el.getAttribute('class') : '') + ' ';\n  var result = clsName;\n  var current = void 0;\n  var start = void 0;\n  for (var i = 0, l = name.length; i < l; i++) {\n    current = name[i];\n    start = current ? result.indexOf(' ' + current + ' ') : -1;\n    if (start !== -1) {\n      start += 1;\n      result = result.slice(0, start) + result.slice(start + current.length);\n    }\n  }\n\n  // only write if modified\n  if (clsName !== result) {\n    if (typeof el.className === 'string') {\n      el.className = (0, _trim2.default)(result.replace(cleanup, ' '));\n    } else if (el.setAttribute) {\n      el.setAttribute('class', (0, _trim2.default)(result.replace(cleanup, ' ')));\n    }\n  }\n\n  return el;\n}\n\nexports.default = removeClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=remove-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _hasClass = require('./has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _addClass = require('./add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('./remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction toggleClass(el, name, enable) {\n\n  if (!el) {\n    return;\n  }\n\n  // If we're passed an array, toggle the class on each.\n  if (el instanceof NodeList || el instanceof Array) {\n\n    for (var i = 0, len = el.length; i < len; i++) {\n      toggleClass(el[i], name, enable);\n    }\n\n    return;\n  }\n\n  var action = void 0;\n  if (enable !== undefined) {\n    enable = typeof enable === 'function' ? enable.call(null, el) : enable;\n    action = enable ? 'add' : 'remove';\n  } else {\n    action = (0, _hasClass2.default)(el, name) ? 'remove' : 'add';\n  }\n\n  return (action === 'add' ? _addClass2.default : _removeClass2.default)(el, name);\n} /**\n   * # Toggle Class\n   * Toggle a class on an element given a condition.\n   *\n   * @param {Element|Array} el An element or array of elements to update.\n   * @param {String} name\n   * @param {Boolean} enable\n   * @return {Element}\n   *\n   * @module  helpers/dom/toggle-class.js\n   */\n\nexports.default = toggleClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=toggle-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _matches = require('./matches');\n\nvar _matches2 = _interopRequireDefault(_matches);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getParent(parent, query, limitEl) {\n\n  limitEl = limitEl instanceof Array ? limitEl : [limitEl || document.body];\n\n  while (parent) {\n\n    if ((0, _matches2.default)(parent, query)) {\n      return parent;\n    }\n\n    if (limitEl.indexOf(parent) !== -1) {\n      return false;\n    }\n\n    parent = parent.parentNode;\n  }\n\n  return false;\n} /**\n   * # Get Parent\n   * See if an element has another element for a parent.\n   *\n   * @param {Element} parent\n   * @param {String} query\n   * @param {Array|Element} limitEl The last element we should check.\n   * @return {Boolean|Element}\n   *\n   * @module helpers/traversal/get-parent.js\n   */\n\nexports.default = getParent;\nmodule.exports = exports['default'];\n//# sourceMappingURL=get-parent.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Matches\n * See if an element matches a query selector.\n *\n * @param {Element} el\n * @param {String} query\n * @return {Boolean}\n *\n * @module helpers/traversal/matches.js\n */\nvar vendorMatch = typeof Element !== 'undefined' && (Element.prototype.matches || Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector);\n\nfunction matches(el, query) {\n\n  if (vendorMatch) return vendorMatch.call(el, query);\n\n  var nodes = el.parentNode ? el.parentNode.querySelectorAll(query) : [];\n\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i] === el) return true;\n  }\n\n  return false;\n}\n\nexports.default = matches;\nmodule.exports = exports['default'];\n//# sourceMappingURL=matches.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Each\n * Apply a callback function to a list of any kind: Array, NodeList, HTMLCollection or Object.\n *\n * @param {Array|NodeList|HTMLCollection|Object} list\n * @param {Function} cb\n *\n * @example\n * each([], callback);\n * each(el.children, callback);\n * each(el.childNodes, callback);\n * each({}, callback);\n *\n * @module helpers/util/each.js\n */\nfunction each(list, cb) {\n\n  if (!list) {\n    return;\n  }\n\n  if (typeof cb !== 'function') {\n    throw new Error('Cannot invoke `each` without a callback!');\n  }\n\n  var i = 0;\n  var len = list.length;\n\n  // Object\n  if (len === undefined) {\n    for (i in list) {\n      if (i !== 'prototype' && list.hasOwnProperty(i)) {\n        cb(i, list[i]);\n      }\n    }\n  }\n  // Array-like\n  else {\n      for (; i < len; i++) {\n        cb(list[i]);\n      }\n    }\n}\n\nexports.default = each;\nmodule.exports = exports['default'];\n//# sourceMappingURL=each.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Trim\n * Trim whitespace on a string.\n *\n * @param {String} str\n *\n * @module helpers/util/trim.js\n */\n\nvar trimRE = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\nfunction trim(str) {\n  return str.replace(trimRE, '');\n}\n\nexports.default = trim;\nmodule.exports = exports['default'];\n//# sourceMappingURL=trim.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}