{"version":3,"sources":["js/dist/components/node_modules/browser-pack/_prelude.js","js/dist/components/js/dist/components/base.js","js/dist/components/js/dist/components/tabs.js","js/dist/components/js/dist/helpers/css/transform.js","js/dist/components/js/dist/helpers/dom/add-class.js","js/dist/components/js/dist/helpers/dom/breakpoint.js","js/dist/components/js/dist/helpers/dom/has-class.js","js/dist/components/js/dist/helpers/dom/remove-class.js","js/dist/components/js/dist/helpers/dom/toggle-class.js","js/dist/components/js/dist/helpers/traversal/get-children.js","js/dist/components/js/dist/helpers/traversal/get-index.js","js/dist/components/js/dist/helpers/traversal/get-parent.js","js/dist/components/js/dist/helpers/traversal/has-parent.js","js/dist/components/js/dist/helpers/traversal/matches.js","js/dist/components/js/dist/helpers/util/each.js","js/dist/components/js/dist/helpers/util/trim.js"],"names":[],"mappingsxpiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"tabs.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _each = require('../helpers/util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * # Base Component\n                                                                                                                                                           * The base class for Spark JS components. This class should never be\n                                                                                                                                                           * instantiated directly.\n                                                                                                                                                           *\n                                                                                                                                                           * @param {Element} el\n                                                                                                                                                           * @param {Object} params\n                                                                                                                                                           *\n                                                                                                                                                           * @module components/base.js\n                                                                                                                                                           */\n\nvar noop = function noop() {};\n\nvar Base = function () {\n\n  /**\n   * Set parameters and cache elements.\n   */\n  function Base(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Base);\n\n    if (params.elRequired && !el) {\n      return;\n    }\n\n    this.setParams(this.defaults || {}, true);\n    this.setParams(params);\n    (this._cacheElements || noop).call(this, el, params);\n    (this._parseParams || noop).call(this);\n  }\n\n  /**\n   * Remove the component from the DOM and prepare for garbage collection by dereferencing values.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n\n\n  Base.prototype.remove = function remove(leaveElement) {\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    if (!leaveElement && this.el && this.el.parentNode) {\n      this.el.parentNode.removeChild(this.el);\n    }\n\n    this.unsetParams(this.defaults);\n\n    return this;\n  };\n\n  /**\n   * Update the component to use a new element or reparse from\n   * the existing element.\n   * @param {Element} el Optional\n   * @param {Object} params Optional\n   */\n\n\n  Base.prototype.update = function update(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    (this._cacheElements || noop).call(this, el || this.el, params);\n    (this._parseParams || noop).call(this);\n\n    if (this._addEventListeners) {\n      this._addEventListeners();\n    }\n\n    return this;\n  };\n\n  /**\n   * Set a hash of parameters if they're whitelisted or we're told to force the set.\n   * This is used to set initial values as well as set passed parameters.\n   * @param {Object} params\n   * @param {Boolean} force Force setting even if the param is not whitelisted.\n   */\n\n\n  Base.prototype.setParams = function setParams(params, force) {\n    var _this = this;\n\n    (0, _each2.default)(params, function (k, v) {\n      if (_this._whitelistedParams.indexOf(k) !== -1 || force) {\n        _this[k] = v;\n      }\n    });\n\n    return this;\n  };\n\n  /**\n   * Unset all parameters.\n   * @param {Array|Object} keys\n   * @param {Object} scope The object to unset the params from. Defaults to `this`.\n   */\n\n\n  Base.prototype.unsetParams = function unsetParams(keys, scope) {\n\n    keys = keys instanceof Array ? keys : Object.keys(keys);\n    scope = scope || this;\n    (0, _each2.default)(keys, function (k) {\n      delete scope[k];\n    });\n\n    return this;\n  };\n\n  return Base;\n}();\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nBase.prototype._whitelistedParams = [];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nBase.prototype.defaults = {};\n\nexports.default = Base;\nmodule.exports = exports['default'];\n//# sourceMappingURL=base.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _transform = require('../helpers/css/transform');\n\nvar _transform2 = _interopRequireDefault(_transform);\n\nvar _toggleClass = require('../helpers/dom/toggle-class');\n\nvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\nvar _addClass = require('../helpers/dom/add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('../helpers/dom/remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nvar _getParent = require('../helpers/traversal/get-parent');\n\nvar _getParent2 = _interopRequireDefault(_getParent);\n\nvar _getIndex = require('../helpers/traversal/get-index');\n\nvar _getIndex2 = _interopRequireDefault(_getIndex);\n\nvar _hasParent = require('../helpers/traversal/has-parent');\n\nvar _hasParent2 = _interopRequireDefault(_hasParent);\n\nvar _getChildren = require('../helpers/traversal/get-children');\n\nvar _getChildren2 = _interopRequireDefault(_getChildren);\n\nvar _breakpoint = require('../helpers/dom/breakpoint');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\nabs\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Tabbed navigation\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * new Tabs(el, {\nptional. Alternate breakpoint values.\nbreakpoints: {\nxs: {\nmin: 0,\nmax: 639\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *    }\nn                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  }\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * });\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module components/tabs.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar Tabs = function (_BaseComponent) {\n  _inherits(Tabs, _BaseComponent);\n\n  /**\n   * Tabs constructor.\n   * @param {Element} el\n   * @param {Object} params\n   */\n  function Tabs(el) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Tabs);\n\n    params.elRequired = true;\n\n    if (!(_this = _possibleConstructorReturn(this, _BaseComponent.call(this, el, params)), _this)) {\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this._bindEventListenerCallbacks();\n    _this._addEventListeners();\n    _this._determineSize();\n    return _possibleConstructorReturn(_this);\n  }\n\n  /**\n   * Set the active item.\n   * @param {String|Number|Object} el\n   */\n\n\n  Tabs.prototype.setActive = function setActive(el) {\n\n    var panel;\n\n    // If we're passed a string instead of an element or number,\n    // get the panel with that id.\n    if (typeof el === 'string') {\n      panel = this._findPanelByName(el);\n\n      // If we've found a panel, find the corresponding tab.\n      if (panel) {\n        el = this._findTabByPanel(panel);\n      }\n    }\n\n    // If we're passed a number instead of an element,\n    // get that item from the tabEls NodeList\n    if (typeof el === 'number') {\n      el = this.tabEls.item(el);\n    }\n\n    // If we couldn't find the element or it's already active, stop.\n    if (!el || (typeof el === 'undefined' ? 'undefined' : _typeof(el)) !== 'object' || el === this.activeTabEl) {\n      return false;\n    }\n\n    // Remove the active class from the currently active tab\n    if (this.activeTabEl) {\n      (0, _toggleClass2.default)(this.activeTabEl, 'active', false);\n\n      // Remove the aria-selected attribute from the old tab\n      this.activeTabEl.querySelector('a').removeAttribute('aria-selected');\n      this.previousTabEl = this.activeTabEl;\n    }\n\n    // Add the active class and store.\n    (0, _toggleClass2.default)(el, 'active', true);\n\n    // Add the aria-selected attribute to the new tab\n    el.querySelector('a').setAttribute('aria-selected', 'true');\n    this.activeTabEl = el;\n\n    // Focus the tab on the left side if it's to the left of the frame.\n    if (-el.offsetLeft > this.x) {\n      this.focus(el, 'left');\n    }\n    // Focus the tab on the right side if it's to the right of the frame.\n    else if (el.offsetLeft + el.clientWidth > this.tabListScrollEl.clientWidth - this.x) {\n        this.focus(el, 'right');\n      }\n\n    // If we don't already have a panel, find the panel that corresponds to this tab.\n    if (!panel) {\n      panel = this._findPanelByTab(el);\n    }\n\n    // Set the new panel to be active.\n    (0, _toggleClass2.default)(panel, 'active', true);\n\n    // Set aria-hidden attribute to false for this panel\n    panel.setAttribute('aria-hidden', 'false');\n\n    // Remove the active class from the currently active panel.\n    if (this.activePanelEl) {\n      (0, _toggleClass2.default)(this.activePanelEl, 'active', false);\n\n      // Set aria-hidden attribute to true for this panel\n      this.activePanelEl.setAttribute('aria-hidden', 'true');\n    }\n\n    // Store the new active panel\n    this.activePanelEl = panel;\n\n    // Set the hash\n    if (this.useHash) {\n      window.location.hash = this.activePanelEl.getAttribute('id') || '';\n    }\n    var e = document.createEvent('Event');\n    e.initEvent('spark.visible-children', true, true);\n    this.activePanelEl.dispatchEvent(e);\n\n    return this;\n  };\n\n  /**\n   * Start the drag\n   * @param {Object} params\n   */\n\n\n  Tabs.prototype.start = function start(params) {\n\n    params = params || {};\n\n    // Start dragging\n    this.isDragging = true;\n\n    // Stash the element and its position\n    this.lastX = params.lastX;\n    this.lastY = params.lastY;\n\n    // Stash the min and max values\n    this._determineMinMax();\n\n    // Add listeners to the body so we can drag this thing anywhere and still get events\n    this._addMoveEventListeners(params.type || 'mouse');\n\n    return this;\n  };\n\n  /**\n   * Stop the drag\n   * @param {Object} params\n   */\n\n\n  Tabs.prototype.stop = function stop(params) {\n\n    params = params || {};\n\n    // Make sure we're in bounds\n    this._checkX();\n\n    // Stop dragging\n    this.isDragging = false;\n    this.scrollDistance = 0;\n\n    // Reset the scroll direction\n    this.scrollDirection = '';\n\n    // Unbind event listeners on the body\n    this._removeMoveEventListeners(params.type);\n\n    return this;\n  };\n\n  /**\n   * Move the drag point\n   * @param {Object} params\n   */\n\n\n  Tabs.prototype.move = function move(params) {\n\n    // Make sure we're currently dragging\n    if (!this.isDragging && !params.scroll && !params.force) {\n      return this;\n    }\n\n    // If we're beyond the bounds, add some resistance to the scroll.\n    if (!params.force && (this.x + params.x > this.maxX || this.x + params.x < this.minX)) {\n      this.x += params.x / 4;\n    } else {\n      this.x += params.x;\n    }\n\n    this.scrollDistance += Math.abs(params.x);\n\n    if (params.scroll) {\n      this._checkX();\n    }\n\n    this._updatePosition();\n\n    return this;\n  };\n\n  /**\n   * Focus on a specific element by bringing it to the middle of the scroller.\n   * @param {Element} el\n   * @param {String} align Which side to align with.\n   */\n\n\n  Tabs.prototype.focus = function focus(el, align) {\n\n    align = align || 'left';\n\n    this.x = align === 'left' ? -el.offsetLeft : -(el.offsetLeft - this.tabListScrollEl.clientWidth + el.offsetWidth);\n\n    this._checkX();\n    this._updatePosition();\n\n    return this;\n  };\n\n  /**\n   * Remove the element from the DOM and prepare for garbage collection by dereferencing values.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n\n\n  Tabs.prototype.remove = function remove(leaveElement) {\n    this._removeMoveEventListeners('touch');\n    this._removeMoveEventListeners('mouse');\n    this._removeMoveEventListeners('keyboard');\n    return _BaseComponent.prototype.remove.call(this, leaveElement);\n  };\n\n  /**\n   * Update the elements used.\n   * @param {Element} el Optional\n   */\n\n\n  Tabs.prototype.update = function update(el) {\n\n    _BaseComponent.prototype.update.call(this, el);\n\n    // Run on the next frame so sizes have updated\n    setTimeout(function () {\n      this._determineSize();\n      this.focus(this.activeTabEl);\n    }.bind(this), 0);\n\n    return this;\n  };\n\n  /**\n   * Find a panel element by name.\n   * @param {String} name\n   * @return {Object|Null}\n   */\n\n\n  Tabs.prototype._findPanelByName = function _findPanelByName(name) {\n\n    name = name.replace('#', '');\n\n    var i = 0;\n    var len = this.panelEls.length;\n    var found = null;\n    var el;\n\n    for (; i < len && !found; i++) {\n      if (this.panelEls[i].getAttribute('id') === name) {\n        el = this.panelEls[i];\n        found = true;\n      }\n    }\n\n    return found && el;\n  };\n\n  /**\n   * Find a panel given its corresponding tab. Try to match based on the\n   * id attribute, but fall back to matching based on index.\n   * @param {Object} tab\n   * @return {Object|Null}\n   */\n\n\n  Tabs.prototype._findPanelByTab = function _findPanelByTab(tab) {\n\n    var anchorChild = tab.querySelector('a');\n    var id = anchorChild && anchorChild.getAttribute('href');\n    var index = (0, _getIndex2.default)(tab.parentNode.children, tab);\n    var i = 0;\n    var len = this.panelEls.length;\n    var foundById = null;\n    var idMatch = null;\n    var indexMatch = null;\n\n    id = id ? id.replace('#', '') : id;\n\n    for (; i < len && !foundById; i++) {\n      if (id && this.panelEls[i].getAttribute('id') === id) {\n        foundById = true;\n        idMatch = this.panelEls[i];\n      } else if (i === index) {\n        indexMatch = this.panelEls[i];\n      }\n    }\n\n    return foundById && idMatch || indexMatch;\n  };\n\n  /**\n   * Find a tab given its corresponding panel. Try to match based on the\n   * [href] attribute, but fall back to matching based on index.\n   * @param {Object} panel\n   * @return {Object|Null}\n   */\n\n\n  Tabs.prototype._findTabByPanel = function _findTabByPanel(panel) {\n\n    var id = panel.getAttribute('id');\n    var index = (0, _getIndex2.default)(panel.parentNode.children, panel);\n    var i = 0;\n    var len = this.tabEls.length;\n    var foundById = null;\n    var idMatch = null;\n    var indexMatch = null;\n\n    for (; i < len && !foundById; i++) {\n      if (id && (this.tabEls.item(i).querySelector('a').getAttribute('href') === '#' + id || this.tabEls.item(i).getAttribute('href') === '#' + id)) {\n        foundById = true;\n        idMatch = this.tabEls.item(i);\n      } else if (i === index) {\n        indexMatch = this.tabEls.item(i);\n      }\n    }\n\n    return foundById && idMatch || indexMatch;\n  };\n\n  /**\n   * Find the tab which an element lives inside.\n   * @param {Element} el\n   * @return {Object}\n   */\n\n\n  Tabs.prototype._findTabByChildElement = function _findTabByChildElement(el) {\n\n    var i = 0;\n    var len = this.tabEls.length;\n    var found;\n    var tab;\n\n    for (; i < len && !found; i++) {\n\n      // There is a chance that the element passed IS a tab. Or maybe a tab is its parent.\n      if (this.tabEls.item(i) === el || (0, _hasParent2.default)(el, this.tabEls.item(i))) {\n        found = true;\n        tab = this.tabEls.item(i);\n      }\n    }\n\n    return found && tab;\n  };\n\n  /**\n   * Store a reference to the tabs list, each tab and each panel.\n   * Set which tab is active, or use the first.\n   * @param {Element} el\n   */\n\n\n  Tabs.prototype._cacheElements = function _cacheElements(el) {\n\n    this.el = el;\n    this.tabListEl = this.el.querySelector('.spark-tabs__list');\n    this.tabListScrollEl = this.tabListEl.parentNode;\n    this.tabEls = this.tabListEl.querySelectorAll('.spark-tabs__tab');\n    this.panelEls = (0, _getChildren2.default)(this.el.querySelector('.spark-tabs__panels'), '[role=\"tabpanel\"]');\n    this.navEl = this.el.querySelector('.spark-tabs__nav');\n    this.leftEl = this.navEl.querySelector('.spark-tabs__btn--left');\n    this.rightEl = this.navEl.querySelector('.spark-tabs__btn--right');\n\n    // Make sure we have the elements we need\n    if (!this.tabListEl || !this.tabEls.length || !this.panelEls.length) {\n      throw new Error('Tab element missing either a .spark-tabs__list, or elements with .spark-tabs__tab and .spark-tabs__panel!', this.el);\n    }\n\n    // If there is a hash set, use that to try and set the active panel\n    var hashSet = window.location.hash && this.setActive(window.location.hash);\n\n    // If we weren't able to set with a hash, find the tab marked active or default to the first tab\n    if (!hashSet) {\n      this.setActive(this.tabListEl.querySelector('.spark-tabs__tab.active') || 0);\n    }\n  };\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n\n\n  Tabs.prototype._bindEventListenerCallbacks = function _bindEventListenerCallbacks() {\n\n    this._onResizeBound = this._onResize.bind(this);\n\n    this._onTabListClickBound = this._onTabListClick.bind(this);\n\n    this._onRightClickBound = this._onRightClick.bind(this);\n    this._onLeftClickBound = this._onLeftClick.bind(this);\n\n    this._onTouchStartBound = this._onTouchStart.bind(this);\n    this._onTouchMoveBound = this._onTouchMove.bind(this);\n    this._onTouchEndBound = this._onTouchEnd.bind(this);\n\n    this._onMouseDownBound = this._onMouseDown.bind(this);\n    this._onMouseMoveBound = this._onMouseMove.bind(this);\n    this._onMouseUpBound = this._onMouseUp.bind(this);\n\n    this._onScrollBound = this._onScroll.bind(this);\n\n    this._onFocusBound = this._onFocus.bind(this);\n    this._onBlurBound = this._onBlur.bind(this);\n  };\n\n  /**\n   * Add event listeners for DOM events.\n   */\n\n\n  Tabs.prototype._addEventListeners = function _addEventListeners() {\n\n    window.addEventListener('resize', this._onResizeBound);\n    window.addEventListener('orientationchange', this._onResizeBound);\n\n    this.tabListEl.addEventListener('click', this._onTabListClickBound);\n\n    this.tabListEl.addEventListener('touchstart', this._onTouchStartBound);\n    this.tabListEl.addEventListener('mousedown', this._onMouseDownBound);\n    this.tabListEl.addEventListener('mousewheel', this._onScrollBound);\n    this.tabListEl.addEventListener('DOMMouseScroll', this._onScrollBound);\n\n    this.tabListEl.addEventListener('focus', this._onFocusBound, true);\n    this.tabListEl.addEventListener('blur', this._onBlurBound, true);\n\n    if (this.leftEl) {\n      this.leftEl.addEventListener('click', this._onLeftClickBound);\n    }\n\n    if (this.rightEl) {\n      this.rightEl.addEventListener('click', this._onRightClickBound);\n    }\n  };\n\n  /**\n   * Remove event listeners for DOM events..\n   */\n\n\n  Tabs.prototype._removeEventListeners = function _removeEventListeners() {\n\n    window.removeEventListener('resize', this._onResizeBound);\n    window.removeEventListener('orientationchange', this._onResizeBound);\n\n    this.tabListEl.removeEventListener('click', this._onTabListClickBound);\n\n    this.tabListEl.removeEventListener('touchstart', this._onTouchStartBound);\n    this.tabListEl.removeEventListener('mousedown', this._onMouseDownBound);\n    this.tabListEl.removeEventListener('mousewheel', this._onScrollBound);\n    this.tabListEl.removeEventListener('DOMMouseScroll', this._onScrollBound);\n\n    this.tabListEl.removeEventListener('focus', this._onFocusBound);\n    this.tabListEl.removeEventListener('blur', this._onBlurBound);\n\n    if (this.leftEl) {\n      this.leftEl.removeEventListener('click', this._onLeftClickBound);\n    }\n\n    if (this.rightEl) {\n      this.rightEl.removeEventListener('click', this._onRightClickBound);\n    }\n  };\n\n  /**\n   * Add event listeners for touchmove, touchend, mousemove and mouseup.\n   * We add these to the window so that the user can move off of the element\n   * but keep dragging the tabs.\n   * @param {String} type Which type of listeners to add\n   */\n\n\n  Tabs.prototype._addMoveEventListeners = function _addMoveEventListeners(type) {\n\n    // Only listen for events of the type we asked for.\n    switch (type) {\n      case 'mouse':\n        window.addEventListener('mousemove', this._onMouseMoveBound);\n        window.addEventListener('mouseup', this._onMouseUpBound);\n        break;\n      case 'touch':\n        window.addEventListener('touchmove', this._onTouchMoveBound);\n        window.addEventListener('touchend', this._onTouchEndBound);\n        break;\n    }\n  };\n\n  /**\n   * Remove event listeners for move events.\n   * @param {String} type Which type of listeners to remove\n   */\n\n\n  Tabs.prototype._removeMoveEventListeners = function _removeMoveEventListeners(type) {\n\n    // Only unbind events of the type we asked for.\n    switch (type) {\n      case 'mouse':\n        window.removeEventListener('mousemove', this._onMouseMoveBound);\n        window.removeEventListener('mouseup', this._onMouseUpBound);\n        break;\n      case 'touch':\n        window.removeEventListener('touchmove', this._onTouchMoveBound);\n        window.removeEventListener('touchend', this._onTouchEndBound);\n        break;\n    }\n  };\n\n  /**\n   * Determine which size class to set on the element. This is a way of using breakpoint-like\n   * logic for the tabs. We can't rely on real breakpoints because there is no guarantee that\n   * the tabs will be the width of the window.\n   * Also determine if we should be showing navigation arrows.\n   */\n\n\n  Tabs.prototype._determineSize = function _determineSize() {\n\n    var width = this.el.clientWidth;\n    var bp = (0, _breakpoint.get)(width, this.breakpoints);\n\n    // If the found breakpoint is different than the current breakpoint, set the proper state.\n    if (this.currentBreakpoint !== bp) {\n      (0, _toggleClass2.default)(this.el, this.currentBreakpoint, false);\n      this.currentBreakpoint = bp;\n      (0, _toggleClass2.default)(this.el, this.currentBreakpoint, true);\n    }\n\n    // If the tab list is wider than the scroll container, set the scrollable class.\n    this.isScrollable = this.tabListEl.clientWidth > this.tabListScrollEl.clientWidth;\n    (0, _toggleClass2.default)(this.navEl, 'scrollable', this.isScrollable);\n    this._determineMinMax();\n  };\n\n  /**\n   * Determine the min and max values for the slider.\n   */\n\n\n  Tabs.prototype._determineMinMax = function _determineMinMax() {\n\n    if (!this.tabListEl || !this.tabListScrollEl) {\n      return;\n    }\n\n    this.maxX = 0;\n    this.minX = this.tabListScrollEl.clientWidth - this.tabListEl.clientWidth - this.maxX;\n  };\n\n  /**\n   * Enable the animation state.\n   */\n\n\n  Tabs.prototype._enableAnimation = function _enableAnimation() {\n    this.isAnimatable = true;\n    (0, _toggleClass2.default)(this.navEl, 'no-animation', !this.isAnimatable);\n  };\n\n  /**\n   * Disable the animation state.\n   */\n\n\n  Tabs.prototype._disableAnimation = function _disableAnimation() {\n    this.isAnimatable = false;\n    (0, _toggleClass2.default)(this.navEl, 'no-animation', !this.isAnimatable);\n  };\n\n  /**\n   * Update the position of the tabs.\n   */\n\n\n  Tabs.prototype._updatePosition = function _updatePosition() {\n    this.tabListEl.setAttribute('style', (0, _transform2.default)('translate', this.x + 'px'));\n  };\n\n  /**\n   * Check the x position\n   */\n\n\n  Tabs.prototype._checkX = function _checkX() {\n\n    if (this.x < this.minX) {\n      this.x = this.minX;\n      this._updatePosition();\n    }\n\n    if (this.x > 0) {\n      this.x = 0;\n      this._updatePosition();\n    }\n  };\n\n  /**\n   * When the user clicks on a tab, make it active.\n   * @param {Object} e\n   */\n\n\n  Tabs.prototype._onTabListClick = function _onTabListClick(e) {\n\n    // Make sure we haven't scrolled.\n    if (this.scrollDistance > 5) {\n      e.preventDefault();\n      return;\n    }\n\n    var tab;\n\n    // Find if one of our tab elements is in the path\n    if (tab = this._findTabByChildElement(e.target)) {\n      e.preventDefault();\n      this.setActive(tab);\n    }\n  };\n\n  /**\n   * When the window resizes, determine the size we should be using for tabs.\n   * @param {Object} e\n   */\n\n\n  Tabs.prototype._onResize = function _onResize() {\n    this._determineSize();\n    this.focus(this.activeTabEl);\n  };\n\n  /**\n   * When the touchstart event fires, start the scrolling process\n   * @param {Object} e\n   */\n\n\n  Tabs.prototype._onTouchStart = function _onTouchStart(e) {\n\n    if (!this.isScrollable) {\n      return;\n    }\n\n    // Disable the animation class so we scroll smoothly\n    this._disableAnimation();\n\n    this.start({\n      lastX: e.touches[0].clientX,\n      lastY: e.touches[0].clientY,\n      type: 'touch'\n    });\n  };\n\n  /**\n   * As the user continues moving the touch, determine\n   * if we should move.\n   * @param {Object} e\n   */\n\n\n  Tabs.prototype._onTouchMove = function _onTouchMove(e) {\n\n    var xDistance = e.touches[0].clientX - this.lastX;\n    var yDistance = e.touches[0].clientY - this.lastY;\n\n    // If we haven't yet determined a scroll direction\n    if (!this.scrollDirection) {\n\n      // Moving up and down\n      if (Math.abs(yDistance) > Math.abs(xDistance)) {\n        this.scrollDirection = 'ns';\n      }\n      // Moving side to side\n      else {\n          this.scrollDirection = 'ew';\n        }\n    }\n\n    // If We're moving left to right, start the move.\n    if (this.scrollDirection === 'ew') {\n\n      e.preventDefault();\n\n      this.move({\n        x: xDistance\n      });\n    }\n\n    this.lastX = e.touches[0].clientX;\n    this.lastY = e.touches[0].clientY;\n  };\n\n  /**\n   * When the touch is over.\n   * @param {Object} e\n   */\n\n\n  Tabs.prototype._onTouchEnd = function _onTouchEnd() {\n\n    // Enable the animation class\n    this._enableAnimation();\n\n    // Stop after one frame so that animation is fully reenabled\n    window.setTimeout(function () {\n      this.stop({\n        type: 'touch'\n      });\n    }.bind(this), 1);\n  };\n\n  /**\n   * When the mousedown event fires, start the scrolling process\n   * @param {Object} e\n   */\n\n\n  Tabs.prototype._onMouseDown = function _onMouseDown(e) {\n\n    if (!this.isScrollable) {\n      return;\n    }\n\n    // Disable the animation class so we scroll smoothly\n    this._disableAnimation();\n\n    this.start({\n      lastX: e.clientX,\n      lastY: e.clientY,\n      type: 'mouse'\n    });\n  };\n\n  /**\n   * As the user continues moving the mouse, determine\n   * if we should move.\n   * @param {Object} e\n   */\n\n\n  Tabs.prototype._onMouseMove = function _onMouseMove(e) {\n\n    var xDistance = e.clientX - this.lastX;\n    var yDistance = e.clientY - this.lastY;\n\n    // If we haven't yet determined a scroll direction\n    if (!this.scrollDirection) {\n\n      // Moving up and down\n      if (Math.abs(yDistance) > Math.abs(xDistance)) {\n        this.scrollDirection = 'ns';\n      }\n      // Moving side to side\n      else {\n          this.scrollDirection = 'ew';\n        }\n    }\n\n    // If We're moving left to right, start the move.\n    if (this.scrollDirection === 'ew') {\n\n      e.preventDefault();\n\n      this.move({\n        x: xDistance\n      });\n    }\n\n    this.lastX = e.clientX;\n    this.lastY = e.clientY;\n  };\n\n  /**\n   * When the mouse move is complete.\n   * @param {Object} e\n   */\n\n\n  Tabs.prototype._onMouseUp = function _onMouseUp() {\n\n    // If we haven't been dragging, get outta here!\n    if (!this.isDragging) {\n      return;\n    }\n\n    // Enable the animation class\n    this._enableAnimation();\n\n    // Stop after one frame so that animation is fully reenabled\n    window.setTimeout(function () {\n      this.stop({\n        type: 'mouse'\n      });\n    }.bind(this), 1);\n  };\n\n  /**\n   * When the user scrolls horizontally on the tabs, slide.\n   * @param {Object} e\n   */\n\n\n  Tabs.prototype._onScroll = function _onScroll(e) {\n\n    // Don't bother if we aren't scrollable\n    if (!this.isScrollable) {\n      return;\n    }\n\n    // Disable the animation class so we scroll smoothly\n    this._disableAnimation();\n\n    // Allow for Firefox's wheel detail\n    var val = e.wheelDeltaX || -e.detail * 40;\n\n    // If the scroll has moved...\n    if (val) {\n\n      // Supress native\n      e.preventDefault();\n\n      // Move us to the new position\n      this.move({\n        x: val,\n        scroll: true\n      });\n    }\n\n    // Cancel an existing scroll timer\n    if (this.scrollTimer) {\n      window.clearTimeout(this.scrollTimer);\n      this.scrollTimer = null;\n    }\n\n    // The scroll is considered \"done\" after 100ms\n    this.scrollTimer = window.setTimeout(this._onScrollEnd.bind(this), 100);\n  };\n\n  /**\n   * When the scrolling ends, reset the scrollTop\n   */\n\n\n  Tabs.prototype._onScrollEnd = function _onScrollEnd() {\n\n    // Enable the animation class\n    this._enableAnimation();\n\n    // Stop after one frame so that animation is fully reenabled\n    window.setTimeout(function () {\n      this.stop({\n        type: 'scroll'\n      });\n    }.bind(this), 1);\n  };\n\n  /**\n   * When the left button is clicked, slide the tabs to the right.\n   */\n\n\n  Tabs.prototype._onLeftClick = function _onLeftClick() {\n    this.move({\n      x: this.tabListScrollEl.clientWidth,\n      force: true\n    });\n    this.stop({\n      type: 'force'\n    });\n  };\n\n  /**\n   * When the right button is clicked, slide the tabs to the left.\n   */\n\n\n  Tabs.prototype._onRightClick = function _onRightClick() {\n    this.move({\n      x: -this.tabListScrollEl.clientWidth,\n      force: true\n    });\n    this.stop({\n      type: 'force'\n    });\n  };\n\n  /**\n   * When focus is gained on a tab.\n   * @param {Object} e\n   */\n\n\n  Tabs.prototype._onFocus = function _onFocus(e) {\n    var target = e.target || e.srcElement;\n    var parent = (0, _getParent2.default)(target, '.spark-tabs__tab', this.tabListEl);\n    if (parent) (0, _addClass2.default)(parent, 'focus');\n  };\n\n  /**\n   * When focus is lost on a tab.\n   * @param {Object} e\n   */\n\n\n  Tabs.prototype._onBlur = function _onBlur(e) {\n    var target = e.target || e.srcElement;\n    var parent = (0, _getParent2.default)(target, '.spark-tabs__tab', this.tabListEl);\n    if (parent) (0, _removeClass2.default)(parent, 'focus');\n  };\n\n  return Tabs;\n}(_base2.default);\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nTabs.prototype._whitelistedParams = ['useHash', 'breakpoints'];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nTabs.prototype.defaults = {\n  el: null,\n  tabListEl: null,\n  tabListScrollEl: null,\n  tabEls: null,\n  panelEls: null,\n  activeTabEl: null,\n  activePanelEl: null,\n  navEl: null,\n  leftEl: null,\n  rightEl: null,\n  useHash: false,\n  isScrollable: false,\n  isDragging: false,\n  isAnimatable: false,\n  scrollDirection: '',\n  scrollDistance: 0,\n  lastX: 0,\n  lastY: 0,\n  minX: 0,\n  maxX: 0,\n  x: 0,\n  _onFocusBound: null,\n  _onBlurBound: null,\n  _onTabListClickBound: null,\n  _onLeftClickBound: null,\n  _onRightClickBound: null,\n  _onResizeBound: null,\n  _onTouchStartBound: null,\n  _onTouchMoveBound: null,\n  _onTouchEndBound: null,\n  _onMouseDownBound: null,\n  _onMouseMoveBound: null,\n  _onMouseUpBound: null,\n  _onScrollBound: null\n};\n\nexports.default = Tabs;\nmodule.exports = exports['default'];\n//# sourceMappingURL=tabs.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * # Transform\n                                                                                                                                                                                                                                                                               * Apply a cross-browser transform style.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * @example\n                                                                                                                                                                                                                                                                               * transform('translateX', '-100px');\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * @param {String} type\n                                                                                                                                                                                                                                                                               * @param {String} val\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * @module helpers/css/transform.js\n                                                                                                                                                                                                                                                                               */\n\nvar _each = require('../util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar prefixes = ['-webkit-', '-moz-', '-o-', '-ms-', ''];\n\nfunction transform(type, val) {\n\n  var str = '';\n\n  (0, _each2.default)(prefixes, function (p) {\n\n    if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') {\n      str += p + 'transform: ';\n\n      for (var j in val) {\n        str += j + '(' + val[j] + '); ';\n      }\n    } else {\n      str += p + 'transform: ' + type + '(' + val + '); ';\n    }\n  });\n\n  return str;\n}\n\nexports.default = transform;\nmodule.exports = exports['default'];\n//# sourceMappingURL=transform.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _trim = require('../util/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nvar _hasClass = require('./has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * # Add Class\n * Add a class on an element.\n *\n * @param {Element|Array} el An element or array of elements to update.\n * @param {String} name\n * @return {Element}\n *\n * @module helpers/dom/add-class.js\n */\n\nvar ws = /\\s+/;\nvar cleanup = /\\s{2,}/g;\n\nfunction addClass(el, name) {\n\n  if (arguments.length === 2 && typeof name === 'string') {\n    name = (0, _trim2.default)(name).split(ws);\n  } else {\n    name = name instanceof Array ? name : Array.prototype.slice.call(arguments, 1);\n  }\n\n  // optimize for best, most common case\n  if (name.length === 1 && el.classList) {\n    if (name[0]) {\n      el.classList.add(name[0]);\n    }\n    return el;\n  }\n\n  var toAdd = [];\n  var i = 0;\n  var l = name.length;\n  var item = void 0;\n  var clsName = typeof el.className === 'string' ? el.className : el.getAttribute ? el.getAttribute('class') : '';\n\n  // see if we have anything to add\n  for (; i < l; i++) {\n    item = name[i];\n    if (item && !(0, _hasClass2.default)(clsName, item)) {\n      toAdd.push(item);\n    }\n  }\n\n  if (toAdd.length) {\n    if (typeof el.className === 'string') {\n      el.className = (0, _trim2.default)((clsName + ' ' + toAdd.join(' ')).replace(cleanup, ' '));\n    } else if (el.setAttribute) {\n      el.setAttribute('class', (0, _trim2.default)((clsName + ' ' + toAdd.join(' ')).replace(cleanup, ' ')));\n    }\n  }\n\n  return el;\n}\n\nexports.default = addClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=add-class.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Breakpoint Helpers\n * Find the active breakpoint.\n *\n * @param {Number} width\n *\n * @module helpers/dom/breakpoint.js\n */\n\n/**\n * Breakpoints being used in the CSS.\n * @type {Object}\n */\nvar defaultBreakpoints = {\n  xs: {\n    min: 0,\n    max: 543\n  },\n  sm: {\n    min: 544,\n    max: 795\n  },\n  md: {\n    min: 796,\n    max: 1047\n  },\n  lg: {\n    min: 1048,\n    max: 1799\n  },\n  xl: {\n    min: 1800,\n    max: Infinity\n  }\n};\n\nfunction get(width, breakpoints) {\n\n  breakpoints = breakpoints || defaultBreakpoints;\n\n  var i = void 0;\n\n  for (i in breakpoints) {\n    if (width >= breakpoints[i].min && width <= breakpoints[i].max) {\n      return i;\n    }\n  }\n}\n\nexports.get = get;\n//# sourceMappingURL=breakpoint.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * # Has Class\n * See if an element has a class.\n *\n * @param {Element|String} el\n * @param {String} name\n * @return {Boolean}\n *\n * @module helpers/dom/has-class.js\n */\nfunction hasClass(el, name) {\n  var cName = ((typeof el === 'undefined' ? 'undefined' : _typeof(el)) === 'object' ? el.className || el.getAttribute && el.getAttribute('class') || '' : el || '').replace(/[\\t\\r\\n\\f]/g, ' ');\n  return (' ' + cName + ' ').indexOf(' ' + name + ' ') !== -1;\n}\n\nexports.default = hasClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=has-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _trim = require('../util/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ws = /\\s+/; /**\n                 * # Remove Class\n                 * Remove a class on an element.\n                 *\n                 * @param {Element|Array} el An element or array of elements to update.\n                 * @param {String} name\n                 * @return {Element}\n                 *\n                 * @module helpers/dom/remove-class.js\n                 */\n\nvar cleanup = /\\s{2,}/g;\n\nfunction removeClass(el, name) {\n\n  if (arguments.length === 2 && typeof name === 'string') {\n    name = (0, _trim2.default)(name).split(ws);\n  } else {\n    name = name instanceof Array ? name : Array.prototype.slice.call(arguments, 1);\n  }\n\n  // optimize for best, most common case\n  if (name.length === 1 && el.classList) {\n    if (name[0]) el.classList.remove(name[0]);\n    return el;\n  }\n\n  // store two copies\n  var clsName = ' ' + (typeof el.className === 'string' ? el.className : el.getAttribute ? el.getAttribute('class') : '') + ' ';\n  var result = clsName;\n  var current = void 0;\n  var start = void 0;\n  for (var i = 0, l = name.length; i < l; i++) {\n    current = name[i];\n    start = current ? result.indexOf(' ' + current + ' ') : -1;\n    if (start !== -1) {\n      start += 1;\n      result = result.slice(0, start) + result.slice(start + current.length);\n    }\n  }\n\n  // only write if modified\n  if (clsName !== result) {\n    if (typeof el.className === 'string') {\n      el.className = (0, _trim2.default)(result.replace(cleanup, ' '));\n    } else if (el.setAttribute) {\n      el.setAttribute('class', (0, _trim2.default)(result.replace(cleanup, ' ')));\n    }\n  }\n\n  return el;\n}\n\nexports.default = removeClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=remove-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _hasClass = require('./has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _addClass = require('./add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('./remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction toggleClass(el, name, enable) {\n\n  if (!el) {\n    return;\n  }\n\n  // If we're passed an array, toggle the class on each.\n  if (el instanceof NodeList || el instanceof Array) {\n\n    for (var i = 0, len = el.length; i < len; i++) {\n      toggleClass(el[i], name, enable);\n    }\n\n    return;\n  }\n\n  var action = void 0;\n  if (enable !== undefined) {\n    enable = typeof enable === 'function' ? enable.call(null, el) : enable;\n    action = enable ? 'add' : 'remove';\n  } else {\n    action = (0, _hasClass2.default)(el, name) ? 'remove' : 'add';\n  }\n\n  return (action === 'add' ? _addClass2.default : _removeClass2.default)(el, name);\n} /**\n   * # Toggle Class\n   * Toggle a class on an element given a condition.\n   *\n   * @param {Element|Array} el An element or array of elements to update.\n   * @param {String} name\n   * @param {Boolean} enable\n   * @return {Element}\n   *\n   * @module  helpers/dom/toggle-class.js\n   */\n\nexports.default = toggleClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=toggle-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _matches = require('./matches');\n\nvar _matches2 = _interopRequireDefault(_matches);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getChildren(el, query) {\n\n  var list = [];\n  var i = 0;\n  var len = el.children.length;\n\n  for (; i < len; i++) {\n    if ((0, _matches2.default)(el.children[i], query)) {\n      list.push(el.children[i]);\n    }\n  }\n\n  return list;\n} /**\n   * # Get Children\n   * See if an element has children which match a query.\n   *\n   * @param {Element} el\n   * @param {String} query\n   * @return {List}\n   *\n   * @module helpers/traversal/get-children.js\n   */\n\nexports.default = getChildren;\nmodule.exports = exports['default'];\n//# sourceMappingURL=get-children.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Get Index\n * Get the index of an element in a nodelist.\n *\n * @param {NodeList} els\n * @param {Node} el\n * @return {Number}\n *\n * @module helpers/traversal/get-index.js\n */\nfunction getIndex(els, el) {\n  return Array.prototype.indexOf.call(els, el);\n}\n\nexports.default = getIndex;\nmodule.exports = exports[\"default\"];\n//# sourceMappingURL=get-index.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _matches = require('./matches');\n\nvar _matches2 = _interopRequireDefault(_matches);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getParent(parent, query, limitEl) {\n\n  limitEl = limitEl instanceof Array ? limitEl : [limitEl || document.body];\n\n  while (parent) {\n\n    if ((0, _matches2.default)(parent, query)) {\n      return parent;\n    }\n\n    if (limitEl.indexOf(parent) !== -1) {\n      return false;\n    }\n\n    parent = parent.parentNode;\n  }\n\n  return false;\n} /**\n   * # Get Parent\n   * See if an element has another element for a parent.\n   *\n   * @param {Element} parent\n   * @param {String} query\n   * @param {Array|Element} limitEl The last element we should check.\n   * @return {Boolean|Element}\n   *\n   * @module helpers/traversal/get-parent.js\n   */\n\nexports.default = getParent;\nmodule.exports = exports['default'];\n//# sourceMappingURL=get-parent.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Has Parent\n * See if an element has another element for a parent.\n *\n * @param {Element} child\n * @param {Element} possibleParent\n * @return {Boolean}\n *\n * @module helpers/traversal/has-parent.js\n */\nfunction hasParent(child, possibleParent) {\n\n  var parent = child.parentNode;\n\n  while (parent) {\n\n    if (parent === possibleParent) {\n      return true;\n    }\n\n    parent = parent.parentNode;\n  }\n\n  return false;\n}\n\nexports.default = hasParent;\nmodule.exports = exports[\"default\"];\n//# sourceMappingURL=has-parent.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Matches\n * See if an element matches a query selector.\n *\n * @param {Element} el\n * @param {String} query\n * @return {Boolean}\n *\n * @module helpers/traversal/matches.js\n */\nvar vendorMatch = typeof Element !== 'undefined' && (Element.prototype.matches || Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector);\n\nfunction matches(el, query) {\n\n  if (vendorMatch) return vendorMatch.call(el, query);\n\n  var nodes = el.parentNode ? el.parentNode.querySelectorAll(query) : [];\n\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i] === el) return true;\n  }\n\n  return false;\n}\n\nexports.default = matches;\nmodule.exports = exports['default'];\n//# sourceMappingURL=matches.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Each\n * Apply a callback function to a list of any kind: Array, NodeList, HTMLCollection or Object.\n *\n * @param {Array|NodeList|HTMLCollection|Object} list\n * @param {Function} cb\n *\n * @example\n * each([], callback);\n * each(el.children, callback);\n * each(el.childNodes, callback);\n * each({}, callback);\n *\n * @module helpers/util/each.js\n */\nfunction each(list, cb) {\n\n  if (!list) {\n    return;\n  }\n\n  if (typeof cb !== 'function') {\n    throw new Error('Cannot invoke `each` without a callback!');\n  }\n\n  var i = 0;\n  var len = list.length;\n\n  // Object\n  if (len === undefined) {\n    for (i in list) {\n      if (i !== 'prototype' && list.hasOwnProperty(i)) {\n        cb(i, list[i]);\n      }\n    }\n  }\n  // Array-like\n  else {\n      for (; i < len; i++) {\n        cb(list[i]);\n      }\n    }\n}\n\nexports.default = each;\nmodule.exports = exports['default'];\n//# sourceMappingURL=each.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Trim\n * Trim whitespace on a string.\n *\n * @param {String} str\n *\n * @module helpers/util/trim.js\n */\n\nvar trimRE = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\nfunction trim(str) {\n  return str.replace(trimRE, '');\n}\n\nexports.default = trim;\nmodule.exports = exports['default'];\n//# sourceMappingURL=trim.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}