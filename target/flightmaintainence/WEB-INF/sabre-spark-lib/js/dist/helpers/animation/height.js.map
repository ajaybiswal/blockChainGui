{"version":3,"sources":["helpers/animation/height.js"],"names":["noop","runningAnimations","els","completeCallbacks","getInverseToggleValue","el","property","originalValue","onComplete","params","toggleClassName","collapse","toggleEl","style","toggleProperty","height","marginBottom","marginTop","heightAnimationClass","runningIndex","indexOf","splice","animateHeight","action","querySelector","toggleClass","toggleStyles","window","getComputedStyle","originalToggleValue","toggleValue","completeCallback","clearTimeout","originalHeight","setTimeout","runAnimation","targetElHeight","targetToggleElHeight","originalToggleElHeight","push","animationDuration","undefined"],"mappings":"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","file":"height.js","sourcesContent":["/**\n * # Animate Height\n * Animate the height of an element since we can't do this w/ pure CSS. Sigh.\n *\n * @example\n * animateHeight({\n *   el: ...,\n *   toggleEl: ...,\n *   // Optional params\n *   action: 'collapse'|'expand',\n *   heightAnimationClass: 'spark-animate-height',\n *   opacityAnimationClass: 'spark-animate-opacity',\n *   toggleProperty: 'display'|'overflow'|'visibility',\n *   toggleValue: 'block'|'none'|'visible'|'hidden',\n *   animationDuration: 250\n * });\n *\n * @module helpers/animation/height.js\n */\n\nimport outerHeight from '../dom/outer-height';\nimport addClass from '../dom/add-class';\nimport removeClass from '../dom/remove-class';\nimport hasClass from '../dom/has-class';\nimport toggleClass from '../dom/toggle-class';\n\nconst noop = function() {};\nconst runningAnimations = {\n  els: [],\n  completeCallbacks: []\n};\n\n/**\n * Get the inverse toggle value\n * @param  {String} property\n * @param  {String} originalValue\n * @return {String}\n */\nfunction getInverseToggleValue(el, property, originalValue) {\n\n  // Get the value to toggle to for the given property\n  switch (property) {\n    case 'overflow':\n    case 'visibility':\n      return originalValue === 'visible' ? 'hidden' : 'visible';\n    default:\n      return originalValue === 'block' || originalValue === 'inline-block' ? 'none' : 'block';\n  }\n}\n\n/**\n * When an animation is complete, clean up and run the callback.\n * @param  {Object} params\n */\nfunction onComplete(params) {\n\n  // Reset toggle el visibility\n  if (params.toggleClassName) {\n    toggleClass(params.el, params.toggleClassName, !params.collapse);\n  }\n  else {\n    params.toggleEl.style[params.toggleProperty] = '';\n\n  }\n\n  // Remove the height property\n  params.el.style.height = '';\n  params.toggleEl.style.height = '';\n  params.toggleEl.style.marginBottom = '';\n  params.toggleEl.style.marginTop = '';\n\n  // Remove the spark-animate-height class so the transitions no longer apply\n  removeClass(params.el, params.heightAnimationClass);\n  removeClass(params.toggleEl, params.heightAnimationClass);\n\n  // Run the callback\n  params.onComplete();\n\n  // Remove the element and callback from their respective arrays\n  let runningIndex = runningAnimations.els.indexOf(params.el);\n  runningAnimations.els.splice(runningIndex, 1);\n  runningAnimations.completeCallbacks.splice(runningIndex, 1);\n}\n\n/**\n * @param {Object} params\n */\nfunction animateHeight(params) {\n\n  params = params || {};\n\n  let el = params.el;\n\n  if (!el) {\n    return;\n  }\n\n  let collapse = params.action && params.action === 'collapse';\n  let heightAnimationClass = params.heightAnimationClass || 'spark-animate-height';\n\n  // Allow for elements to be passed or selector strings\n  let toggleEl = typeof params.toggleEl === 'string' ? el.querySelector(params.toggleEl) : params.toggleEl;\n\n  // No element to be switching with toggling so we can't determine the desired height to animate to.\n  if (!toggleEl || hasClass(el, 'spark-no-animate')) {\n    return;\n  }\n\n  let toggleClassName = params.toggleClass;\n\n  // The style property to use when toggling visibility\n  let toggleProperty = params.toggleProperty || 'display';\n  let toggleStyles = window.getComputedStyle(toggleEl);\n  let originalToggleValue = toggleStyles[toggleProperty];\n  let toggleValue = params.toggleValue || getInverseToggleValue(toggleProperty, originalToggleValue);\n\n  // If we are already animating, stop now.\n  let runningIndex = runningAnimations.els.indexOf(el);\n  if (runningIndex !== -1) {\n\n    let completeCallback = runningAnimations.completeCallbacks[runningIndex];\n    if (completeCallback) {\n      clearTimeout(completeCallback);\n    }\n\n    onComplete({\n      el: el,\n      toggleEl: toggleEl,\n      onComplete: params.onComplete || noop,\n      collapse: collapse,\n      toggleProperty: toggleProperty,\n      toggleClassName: toggleClassName,\n      toggleValue: toggleValue,\n      heightAnimationClass: heightAnimationClass\n    });\n  }\n\n  // Store the current height\n  let originalHeight = outerHeight(el);\n\n  // Toggle the visible property\n  if (toggleClassName) {\n    toggleClass(el, toggleClassName, !collapse);\n  }\n  else {\n    toggleEl.style[toggleProperty] = toggleValue;\n  }\n\n  // When measuring the size for a collapse, we have to wait a tic for it to be\n  // accurate. Not sure why. Ugh.\n  if (collapse) {\n    setTimeout(runAnimation, 0);\n  }\n  else {\n    runAnimation();\n  }\n\n  function runAnimation() {\n\n    // Now that the toggle el is taking up space, get the new height which we will be animating to\n    let targetElHeight = outerHeight(el);\n\n    // We need to store the original and target toggle element heights. They differ depending on\n    // whether we are going to expand or collapse.\n    let targetToggleElHeight;\n    let originalToggleElHeight;\n\n    // If we are collapsing, reset the toggle style and set it when we're done. Set the height so\n    // that we can animate down to 0 or up to the target height.\n    if (collapse) {\n\n      if (toggleClassName) {\n        removeClass(el, toggleClassName);\n      }\n      else {\n        toggleEl.style[toggleProperty] = originalToggleValue;\n      }\n\n      originalToggleElHeight = outerHeight(toggleEl, toggleStyles);\n      targetToggleElHeight = 0;\n    }\n    else {\n      targetToggleElHeight = outerHeight(toggleEl, toggleStyles);\n      originalToggleElHeight = 0;\n    }\n\n    // Set the original height\n    el.style.height = originalHeight + 'px';\n    toggleEl.style.height = originalToggleElHeight + 'px';\n    toggleEl.style.marginBottom = '0px';\n    toggleEl.style.marginTop = '0px';\n\n    // Add the spark-animate-height class which will setup the transition-property and duration\n    addClass(el, heightAnimationClass);\n    addClass(toggleEl, heightAnimationClass);\n\n    runningAnimations.els.push(el);\n\n    // We need to wait a tick to toggle the height or else the animation class won't function\n    setTimeout(function() {\n\n      // Set the height to the target height\n      el.style.height = targetElHeight + 'px';\n      toggleEl.style.height = targetToggleElHeight + 'px';\n\n      // Remove inline styles after the animation is complete\n      runningAnimations.completeCallbacks.push(setTimeout(function() {\n        onComplete({\n          el: el,\n          toggleEl: toggleEl,\n          onComplete: params.onComplete || noop,\n          collapse: collapse,\n          toggleProperty: toggleProperty,\n          toggleClassName: toggleClassName,\n          toggleValue: toggleValue,\n          heightAnimationClass: heightAnimationClass\n        });\n      }, params.animationDuration !== undefined ? params.animationDuration : 201));\n    }, 0);\n  }\n}\n\nexport default animateHeight;\n"]}