{"version":3,"sources":["components/multi-select-input.js"],"names":["noop","MultiSelectInput","el","params","elRequired","_bindEventListenerCallbacks","_addEventListeners","getValue","vals","_isNative","selectEl","options","checkboxEls","o","checked","selected","push","value","setValue","setVals","propName","indexOf","onChange","clearValue","disable","setAttribute","enable","removeAttribute","_cacheElements","querySelector","querySelectorAll","length","Error","messageEl","_parseParams","_onInputBound","_onInput","bind","addEventListener","_removeEventListeners","removeEventListener","previousValue","prototype","_whitelistedParams","defaults","labelEl","_onFocusBound","_onBlurBound"],"mappings":"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","file":"multi-select-input.js","sourcesContent":["/**\n * # Multiple SelectInput\n * A multiple select input container.\n *\n * @example\n * new MultiSelectInput(el);\n *\n * @module components/multi-select-input.js\n */\nimport BaseComponent from './base';\nimport mixin from '../helpers/util/mixin';\nimport messaging from '../mixins/messaging';\nimport validation from '../mixins/validation';\nimport makeElement from '../helpers/dom/make-element';\nimport each from '../helpers/util/each';\n\nconst noop = function() {};\n\nclass MultiSelectInput extends BaseComponent {\n\n  /**\n   * MultiSelectInput constructor.\n   * @param {Element} el\n   * @param {Object} params\n   */\n  constructor(el, params = {}) {\n\n    params.elRequired = true;\n\n    if (!super(el, params)) {\n      return;\n    }\n\n    this._bindEventListenerCallbacks();\n    this._addEventListeners();\n  }\n\n\n  /**\n   * Get the value.\n   * @return {Array}\n   */\n  getValue() {\n\n    var vals = [];\n\n    each(this._isNative ? this.selectEl.options : this.checkboxEls, (o) => {\n      if (o.checked || o.selected) {\n        vals.push(o.value);\n      }\n    });\n\n    return vals;\n  }\n\n\n  /**\n   * Set the value.\n   * @param {Array} vals\n   */\n  setValue(vals) {\n\n    var setVals = [];\n    var propName = this._isNative ? 'selected' : 'checked';\n\n    each(this._isNative ? this.selectEl.options : this.checkboxEls, (o) => {\n\n      if (vals.indexOf(o.value) !== -1) {\n        o[propName] = true;\n        setVals.push(o.value);\n      }\n      else {\n        o[propName] = false;\n      }\n    });\n\n    (this.onChange || noop)(setVals, this);\n\n    return this;\n  }\n\n\n  /**\n   * Clear the selected value.\n   */\n  clearValue() {\n    return this.setValue([]);\n  }\n\n\n  /**\n   * Disable entry into the input.\n   */\n  disable() {\n    (this.selectEl || this.el).setAttribute('disabled', '');\n    return this;\n  }\n\n\n  /**\n   * Enable entry into the input.\n   */\n  enable() {\n    (this.selectEl || this.el).removeAttribute('disabled');\n    return this;\n  }\n\n\n  /**\n   * Store a reference to the needed elements.\n   * @param {Element} el\n   */\n  _cacheElements(el) {\n\n    this.el = el;\n    this.selectEl = this.el.querySelector('select');\n    this.checkboxEls = this.el.querySelectorAll('[type=\"checkbox\"]');\n\n    if (!this.selectEl && !this.checkboxEls.length) throw new Error('Multi select needs either a select input or a series of checkboxes.');\n\n    this.messageEl = this.el.querySelector('.spark-select__message') || makeElement('<span class=\"spark-select__message\"></span>');\n  }\n\n\n  /**\n   * Parse parameters.\n   */\n  _parseParams() {\n    this._isNative = this.selectEl ? true : false;\n  }\n\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n  _bindEventListenerCallbacks() {\n    this._onInputBound = this._onInput.bind(this);\n  }\n\n\n  /**\n   * Add event listeners for focus, blur and input.\n   */\n  _addEventListeners() {\n\n    if (this._isNative) {\n      this.selectEl.addEventListener('change', this._onInputBound);\n    }\n    else {\n      this.el.addEventListener('change', this._onInputBound, true);\n    }\n  }\n\n\n  /**\n   * Remove event listeners for focus, blur and input.\n   */\n  _removeEventListeners() {\n\n    if (this._isNative) {\n      this.selectEl.removeEventListener('change', this._onInputBound);\n    }\n    else {\n      this.el.removeEventListener('change', this._onInputBound, true);\n    }\n  }\n\n\n  /**\n   * When the value is about to change, run the validation, set the characters count\n   * and resize if we're a textarea.\n   * @param {Object} e\n   */\n  _onInput() {\n\n    var value = this.getValue();\n\n    if (value !== this.previousValue) {\n      this.previousValue = value;\n      (this.onChange || noop)(value, this);\n    }\n  }\n}\n\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\nMultiSelectInput.prototype._whitelistedParams = ['validate', 'onValidate', 'onChange'];\n\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nMultiSelectInput.prototype.defaults = {\n  el: null,\n  messageEl: null,\n  selectEl: null,\n  labelEl: null,\n  onChange: null,\n  previousValue: null,\n  _isNative: false,\n  _onFocusBound: null,\n  _onBlurBound: null,\n  _onInputBound: null\n};\n\nmixin(MultiSelectInput.prototype, messaging, validation);\n\nexport default MultiSelectInput;\n"]}