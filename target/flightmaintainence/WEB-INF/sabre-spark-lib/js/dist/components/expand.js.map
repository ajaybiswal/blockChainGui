{"version":3,"sources":["components/expand.js"],"names":["noop","Expand","el","params","elRequired","_bindEventListenerCallbacks","_addEventListeners","expand","onBeforeExpand","toggleClass","toggleEl","isExpanded","_updateClasses","e","document","createEvent","initEvent","dispatchEvent","querySelector","focus","onAfterExpand","collapse","onBeforeCollapse","toggleValue","action","onAfterCollapse","toggle","_cacheElements","accordionHeading","accordionContent","panelContent","panelCollapsedButton","panelExpandedButton","_updateAriaAttributes","setAttribute","_onClickBound","_onClick","bind","_onKeydownBound","_onKeydown","addEventListener","_removeEventListeners","removeEventListener","target","preventDefault","code","keyCode","which","prototype","_whitelistedParams","defaults"],"mappings":"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","file":"expand.js","sourcesContent":["/**\n * # Expand\n * Expand and collapse an element.\n *\n * @example\n * new Expand(el);\n *\n * @module components/expand.js\n */\nimport BaseComponent from './base';\nimport animateHeight from '../helpers/animation/height';\nimport toggleClass from '../helpers/dom/toggle-class';\nimport hasClass from '../helpers/dom/has-class';\nimport getParent from '../helpers/traversal/get-parent';\n\nconst noop = function() {};\n\nclass Expand extends BaseComponent {\n\n  /**\n   * Expand constructor.\n   * @param {Element} el\n   * @param {Object} params\n   */\n  constructor(el, params = {}) {\n\n    params.elRequired = true;\n\n    if (!super(el, params)) {\n      return;\n    }\n\n    this._bindEventListenerCallbacks();\n    this._addEventListeners();\n  }\n\n\n  /**\n   * Expand\n   */\n  expand() {\n\n    (this.onBeforeExpand || noop)();\n\n    animateHeight({\n      el: this.el,\n      toggleClass: 'expanded',\n      toggleEl: '.spark-expand__content, .spark-panel__content'\n    });\n\n    this.isExpanded = true;\n    this._updateClasses();\n    var e = document.createEvent('Event');\n    e.initEvent('spark.visible-children', true, true);\n    this.el.dispatchEvent(e);\n\n    // If the expand element have input, focus on the first one.\n    if(this.el.querySelector('input')) {\n      this.el.querySelector('input').focus();\n    }\n\n    (this.onAfterExpand || noop)();\n\n    return this;\n  }\n\n\n  /**\n   * Collapse\n   */\n  collapse() {\n\n    (this.onBeforeCollapse || noop)();\n\n    animateHeight({\n      el: this.el,\n      toggleEl: '.spark-expand__content, .spark-panel__content',\n      toggleValue: 'none',\n      action: 'collapse'\n    });\n\n    this.isExpanded = false;\n    this._updateClasses();\n\n    (this.onAfterCollapse || noop)();\n\n    return this;\n  }\n\n\n  /**\n   * Toggle the expand state.\n   */\n  toggle() {\n    return this[this.isExpanded ? 'collapse' : 'expand']();\n  }\n\n\n  /**\n   * Store a reference to the element.\n   * @param {Element} el\n   */\n  _cacheElements(el) {\n    this.el = el;\n    this.isExpanded = hasClass(this.el, 'expanded');\n\n    this.accordionHeading = this.el.querySelector('[role=\"heading\"]');\n    this.accordionContent = this.el.querySelector('.spark-panel__content');\n\n    this.panelContent = this.el.querySelector('.spark-expand__content');\n    this.panelCollapsedButton = this.el.querySelector('.spark-expand__hide--expanded');\n    this.panelExpandedButton = this.el.querySelector('.spark-expand__show--expanded');\n  }\n\n\n  /**\n   * Update classes for the expand or collapse state.\n   */\n  _updateClasses() {\n    toggleClass(this.el, 'expanded', this.isExpanded);\n    this._updateAriaAttributes();\n  }\n\n\n  /**\n   * Update aria attributes for the expand or collapse state.\n   */\n  _updateAriaAttributes() {\n    if (this.isExpanded) {\n      this.accordionHeading ? this.accordionHeading.setAttribute('aria-expanded', 'true') : null;\n      this.accordionContent ? this.accordionContent.setAttribute('aria-hidden', 'false') : null;\n\n      this.panelContent ? this.panelContent.setAttribute('aria-hidden', 'false') : null;\n      this.panelCollapsedButton ? this.panelCollapsedButton.setAttribute('aria-hidden', 'true') : null;\n      this.panelExpandedButton ? this.panelExpandedButton.setAttribute('aria-hidden', 'false') : null;\n    }\n    else {\n      this.accordionHeading ? this.accordionHeading.setAttribute('aria-expanded', 'false') : null;\n      this.accordionContent ? this.accordionContent.setAttribute('aria-hidden', 'true') : null;\n\n      this.panelContent ? this.panelContent.setAttribute('aria-hidden', 'true') : null;\n      this.panelCollapsedButton ? this.panelCollapsedButton.setAttribute('aria-hidden', 'false') : null;\n      this.panelExpandedButton ? this.panelExpandedButton.setAttribute('aria-hidden', 'true') : null;\n    }\n  }\n\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n  _bindEventListenerCallbacks() {\n    this._onClickBound = this._onClick.bind(this);\n    this._onKeydownBound = this._onKeydown.bind(this);\n  }\n\n\n  /**\n   * Add event listeners for DOM events.\n   */\n  _addEventListeners() {\n    this.el.addEventListener('click', this._onClickBound);\n    this.el.addEventListener('keydown', this._onKeydownBound);\n  }\n\n\n  /**\n   * Remove event listeners for DOM events..\n   */\n  _removeEventListeners() {\n    this.el.removeEventListener('click', this._onClickBound);\n    this.el.removeEventListener('keydown', this._onKeydownBound);\n  }\n\n\n  /**\n   * When we are clicked, toggle the expanded state.\n   * @param {Object} e\n   */\n  _onClick(e) {\n\n    if (!getParent(e.target, '.spark-expand__toggle, [data-role=\"toggle\"], [role=\"heading\"]', this.el)) {\n      return;\n    }\n\n    e.preventDefault();\n    this.toggle();\n  }\n\n\n  /**\n   * When the space or enter key is pressed on the toggle, toggle!\n   * @param {Object} e\n   */\n  _onKeydown(e) {\n\n    if (!getParent(e.target, '.spark-expand__toggle, [data-role=\"toggle\"], [role=\"heading\"]', this.el)) {\n      return;\n    }\n\n    var code = e.keyCode || e.which;\n\n    // Space or enter\n    if (code === 32 || code === 13) {\n      e.preventDefault();\n      this.toggle();\n    }\n  }\n}\n\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\nExpand.prototype._whitelistedParams = ['onBeforeExpand', 'onAfterExpand', 'onBeforeCollapse', 'onAfterCollapse'];\n\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nExpand.prototype.defaults = {\n  el: null,\n  isExpanded: false,\n  onBeforeExpand: null,\n  onAfterExpand: null,\n  onBeforeCollapse: null,\n  onAfterCollapse: null,\n  _onClickBound: null,\n  _onKeydownBound: null\n};\n\nexport default Expand;\n"]}