////
/// ## Date Inputs
/// @group components/date-input
////


/// Date input
.spark-date {

  // A direct input descendant should be an input with `type=date`.
  // We need to be this specific because the typeahead and calendar
  // widget also contain inputs.
  > .spark-input__field {
    overflow: hidden;
    text-indent: -9999px;

    // Hide the native controls
    &::-webkit-inner-spin-button,
    &::-webkit-calendar-picker-indicator {
      display: none;
      appearance: none;
    }
  }

  .spark-input__fields {
    .spark-input__field {
      width: 0;

      &:hover {
        border: 0;
      }
    }
  }

  &:not([data-error]):not([data-info]):not([data-warning]):not([data-success]):not(.focus):hover {
    .spark-input__fields {
      border: $input--hover__border;
    }
  }

  &[data-error]:hover {
    .spark-input__fields {
      border-color: $message--error__message__background-color;
    }
  }

  &[data-info]:hover {
    .spark-input__fields {
      border-color: $message--info__message__background-color;
    }
  }

  &[data-warning]:hover {
    .spark-input__fields {
      border-color: $message--warning__message__background-color;
    }
  }

  &[data-success]:hover {
    .spark-input__fields {
      border-color: $message--success__message__background-color;
    }
  }

  // When we're active or focused, show the value
  &.active > .spark-input__field,
  > .spark-input__field:focus {
    overflow: visible;
    text-indent: 0;
  }

  // A label for a date input needs to be the full height so that when clicking on the
  // input in it's unfocused state we can't accidentally click on a different label.
  &:not(.spark-date--select) .spark-label {
    line-height: 5rem;
    top: 0;
  }

  &:not(.spark-date--select) .spark-input__addon {
    line-height: 1rem;

    [class*="spark-icon-calendar"],
    [class^="spark-icon-calendar"] {
      line-height: 2rem;
    }
  }

  // When active, adjust the line height of the label
  &.active > .spark-label,
  > .spark-input__field:focus ~ .spark-label {
    line-height: 2rem;
    top: .5rem;
  }

  // Monospace overlay text to match
  .spark-input__overlay {
    font-family: $mono__font-family;
  }

  // When the container has a state, show it below.
  &[data-error],
  &[data-info],
  &[data-warning],
  &[data-success] {

    // Remove the bottom border from the input so the message stays flush
    .spark-select-group {
      .spark-select {
        // Round the edges of the first and last select
        &:first-child .spark-select__input {
          border-radius: $select__border-radius 0 0 0;
        }

        &:last-child .spark-select__input,
        &:nth-last-child(2) .spark-select__input {
          border-radius: 0 $select__border-radius 0 0;
        }
      }
    }

    .spark-input__message {
      display: block;
    }
  }

  @include inputMessageStates('input');

  // When the container has an error state, show it below.
  &[data-error] {
    .spark-input__field {
      border-color: $message--error__message__background-color;
    }
  }

  // When the container has an warning state, show it below.
  &[data-warning] {
    .spark-input__field {
      border-color: $message--warning__message__background-color;
    }
  }

  // When the container has an success state, show it below.
  &[data-success] {
    .spark-input__field {
      border-color: $message--success__message__background-color;
    }
  }

  // When the container has an info state, show it below.
  &[data-info] {
    .spark-input__field {
      border-color: $message--info__message__background-color;
    }
  }

  &.disabled {
    .spark-input__fields {
      background-color: $input--disabled__background-color;
      border: $input--disabled__border;
    }
  }
}

/// Calendar show/hide button
.spark-date__calendar-toggle {
  @extend %input-addon-button;
}
