////
/// ## Progress Indicator
/// @group components/progress-indicator
////


/// Spin an element around its origin
@keyframes spin {
  0% {
    transform: rotate(90deg);
  }

  100% {
    transform: rotate(810deg);
  }
}

/// Progress indicator.
.spark-progress {
  position: relative;
  max-width: 100%;
  min-height: 12rem;
  min-width: 12rem;
  width: 12rem;

  // A progress meter inside an indicator.
  .spark-progress__meter {
    height: 12rem;
    width: 12rem;
  }

  // Remove default styling from a `<progress>` element.
  progress {
    -moz-appearance: none;
    -webkit-appearance: none;
    appearance: none;
    background-color: transparent;
    border: none;
    color: transparent;
    position: absolute;
    display: none;

    // Hide the Firefox styling
    &::-moz-progress-bar {
      background-color: transparent;
    }

    // Hide the webkit styling
    &::-webkit-progress-bar,
    &::-webkit-progress-value {
      background-color: transparent;
    }
  }

  // When the progress element has a value, color the text.
  progress[value] ~ .spark-progress__text {
    color: $progress-indicator--indeterminate__text__color;
    @include useFont($weight: 300);

    // Show the states.
    .spark-progress__states {
      display: block;
    }
  }

  // When the progress element has a value, don't spin indeterminately.
  progress[value] ~ .spark-progress__meter::after {
    animation: none;
  }
}

/// The progress meter.
.spark-progress__meter {
  border-radius: 50%;
  background-color: $progress-indicator__meter__background-color;
  display: inline-block;
  max-width: 100%;
  overflow: hidden;
  position: relative;

  // White part in the middle.
  &::before {
    background-color: $progress-indicator__background-color;
    border: $progress-indicator__meter__border;
    border-radius: 50%;
    content: '';
    display: inline-block;
    height: calc(100% - 2rem);
    left: 50%;
    position: absolute;
    top: 50%;
    transform: translate(-50%, -50%);
    transition: background-color 100ms ease-in-out;
    width: calc(100% - 2rem);
    z-index: 5;
  }

  // The filled color
  &::after {
    animation: spin 800ms ease 0s infinite;
    background-color: $progress-indicator__fill__background-color;
    border-radius: 100% 0 0 0;
    content: '';
    display: inline-block;
    height: 50%;
    left: 0;
    position: absolute;
    transform: rotate(90deg);
    transform-origin: bottom right;
    transition: transform 100ms linear;
    width: 50%;
  }
}

/// An SVG version of the progress loader. This is created by the JS component.
svg.spark-progress__meter {
  background-color: transparent;

  // Colored fill
  .spark-progress__fill {
    stroke: $progress-indicator__fill__background-color;
    stroke-dasharray: 792;
    stroke-dashoffset: 0;
    transition-duration: 100ms;
    transition-timing-function: $ease-in-out-quint;
    transition-property: stroke, stroke-dashoffset;

    // Stop animation. Usually when the value is resetting.
    &.no-animation {
      transition-duration: 0ms;
    }
  }

  // Gray track
  .spark-progress__track {
    stroke: $progress-indicator__meter__background-color;
  }

  // Gray stroke
  .spark-progress__border {
    stroke: $progress-indicator__meter__border-color;
  }

  // Hide the white fill and track pseudo elements
  &::before,
  &::after {
    display: none;
  }
}

/// The progress text
.spark-progress__text {
  color: $progress-indicator__text__color;
  @include fontsize(epsilon);
  @include useFont($weight: 400);
}

/// A `<ul>` of text items to show at different percentages.
.spark-progress__states {
  @include fontsize(delta);
  line-height: 1.75rem;
  margin-bottom: -1rem;
  margin-left: 0;
  margin-top: .5rem;
  padding: 2rem;
  position: relative;
  z-index: 5;
  width: 100%;

  li {
    @extend %list-item-no-bullet;
    color: $progress-indicator__states__color;
    @include fontsize(zeta);
    left: 2rem;
    opacity: 0;
    margin: 0;
    line-height: initial;
    position: absolute;
    top: 50%;
    transform: translateY(50%);
    transition-duration: 250ms;
    transition-property: opacity transform;
    transition-timing-function: $ease-in-out-quint;
    white-space: nowrap;
    width: calc(100% - 4rem);

    &.active {
      opacity: 1;
      transform: translateY(-50%);
    }
  }
}

/// A progress indicator with an integrated value and copy.
.spark-progress--integrated {

  // The loading text. Centered.
  .spark-progress__text {
    @include fontsize(epsilon);
    left: 0;
    margin-bottom: 0;
    padding: 2rem;
    position: absolute;
    text-align: center;
    top: 50%;
    transform: translateY(-50%);
    z-index: 10;
    width: 100%;
  }

  // Align the states
  .spark-progress__states {
    text-align: center;
  }
}

/// A horizontal indicator treatment
.spark-progress--horizontal {
  align-items: center;
  display: flex;
  flex-direction: row;
  width: auto !important;

  // Align the text to the left and make sure it always comes after the meter.
  .spark-progress__text {
    flex: 0 1 auto;
    order: 2;
    text-align: left;
  }

  // Make the value text boldish
  .spark-progress__value {
    @include useFont($weight: 400);
  }

  // Align the states to the left and tighten up w/ the text
  .spark-progress__states {
    margin-bottom: 0;
    margin-top: 0;
    padding-left: 0;
    padding-top: 0;

    li {
      left: 0;
    }
  }

  // Make sure the meter comes first and add some spacing between it and the text.
  .spark-progress__meter {
    flex: 0 1 auto;
    margin-right: 2rem;
    order: -1;
  }
}

/// A large progress indicator
.spark-progress--lg {
  min-height: 22.5rem;
  min-width: 22.5rem;
  width: 22.5rem;

  // Make the progress text lighter
  .spark-progress__text {
    @include useFont($weight: 300);
  }

  // When the progress element has a value
  progress[value] ~ .spark-progress__text {
    @include fontsize(mega);
  }

  // Make the meter larger.
  .spark-progress__meter {
    height: 22.5rem;
    width: 22.5rem;

    // White part in the middle.
    &::before {
      height: calc(100% - 2rem);
      width: calc(100% - 2rem);
    }
  }

  // Bigger text.
  .spark-progress__text {
    @include fontsize(delta);
  }

  // Bigger state text.
  .spark-progress__states {
    @include fontsize(delta);
    margin-bottom: -2.5rem;

    li {
      white-space: normal;
    }
  }
}

/// A small progress indicator
.spark-progress--sm {
  height: 5rem;
  width: 5rem;

  // Smaller meter.
  .spark-progress__meter {
    height: 5rem;
    width: 5rem;

    /// White part in the middle.
    &::before {
      height: calc(100% - 1rem);
      width: calc(100% - 1rem);
    }
  }
}

/// An extra small or button progress indicator
.spark-progress--xs,
.spark-progress.spark-btn {
  .spark-progress__meter {
    height: 2rem;
    width: 2rem;

    // Fill part in the middle.
    &::before {
      border: none;
      height: calc(100% - .5rem);
      width: calc(100% - .5rem);
    }
  }
}

/// A button progress indicator
.spark-progress.spark-btn {
  align-items: center;
  align-content: center;
  background-color: $btn--default--hover__background-color;
  color: $btn--default--hover__color;
  cursor: wait;
  height: auto;
  min-height: 0;
  padding-left: 4.75rem;
  width: auto;

  // Hide the bottom border
  &::before {
    display: none;
  }

  // Space out the meter from the text and change the track color
  .spark-progress__meter {
    background-color: $progress-indicator--btn--default__track__background-color;
    left: 2.25rem;
    position: absolute;
    top: 50%;
    transform: translateY(-50%);

    // Circle color
    &::before {
      background-color: $btn--default--hover__background-color;
    }

    // Fill color
    &::after {
      background-color: $btn--default__color;
    }
  }

  // Default active state
  &:active {
    background-color: $btn--default--hover__background-color;
  }

  // Secondary button
  &.spark-btn--secondary {
    background-color: $btn--secondary--hover__background-color;
    border: $btn--secondary--hover__border;
    color: $btn--secondary--hover__color;

    .spark-progress__meter {
      background-color: $progress-indicator__meter__background-color;

      &::before {
        background-color: $btn--secondary--hover__background-color;
      }

      &::after {
        background-color: $progress-indicator__fill__background-color;
      }
    }

    &:active {
      background-color: $btn--secondary--hover__background-color;
      border: $btn--secondary--hover__border;
      color: $btn--secondary--hover__color;
    }
  }

  // Secondary button
  &.spark-btn--view-more {
    background-color: $btn--view-more--active__background-color;
    border: $btn--view-more--active__border;
    color: $btn--view-more--active__color;

    .spark-progress__meter {
      background-color: $progress-indicator__meter__background-color;

      &::before {
        background-color: $btn--view-more--active__background-color;
      }

      &::after {
        background-color: $progress-indicator__fill__background-color;
      }
    }

    &.active,
    &:active,
    &.active:hover,
    &:active:hover,
    &.focus,
    &:focus,
    &.focus:hover,
    &:focus:hover,
    &.hover,
    &:hover {
      background-color: $btn--view-more--active__background-color;
      border: $btn--view-more--active__border;
      color: $btn--view-more--active__color;
    }
  }
}

/// Progress indicator for lazy loading
.spark-progress--lazy-load {

  // Color the text
  .spark-progress__text {
    color: $btn--view-more--active__color;
    @include useFont($weight: $btn--default__font-weight);
    text-transform: uppercase;
  }

  &.spark-progress--disabled {

    // Hide the progress meter
    .spark-progress__meter {
      display: none;
    }

    // Change to a disabled color
    .spark-progress__text {
      color: $btn--default--disabled__color;
      @include useFont($weight: $btn--default__font-weight);
      text-transform: uppercase;
    }

  }
}
