{"version":3,"sources":["components/progress-indicator.js"],"names":["sizes","large","diameter","stroke","track","fill","border","small","extraSmall","ProgressIndicator","el","params","elRequired","_bindEventListenerCallbacks","_addEventListeners","set","val","value","isDeterminate","progressEl","setAttribute","Math","round","_updateDOM","_cacheElements","querySelector","statusEl","noteEl","meterEl","getAttribute","size","_determineSize","svg","_buildSVG","className","parentNode","replaceChild","fillEl","_parseNotes","_cacheSize","meterHeight","clientHeight","meterWidth","clientWidth","indexOf","template","div","document","createElement","innerHTML","children","notes","len","length","i","push","min","parseInt","max","updateTime","Date","now","precision","noAnimation","lastDOMUpdateTime","dashArray","PI","dashOffset","_onResizeBound","_onResize","bind","window","addEventListener","_removeEventListeners","removeEventListener","prototype","_whitelistedParams","defaults","noteEls"],"mappings":"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","file":"progress-indicator.js","sourcesContent":["/**\n * # ProgressIndicator\n *\n * @example\n * new ProgressIndicator(el, {\n *   // Optional. The precision of the progress percentage.\n *   precision: 10 // 10 decimal places\n * });\n *\n * @module components/progress-indicator.js\n */\nimport BaseComponent from './base';\nimport toggleClass from '../helpers/dom/toggle-class';\nimport round from '../helpers/util/round';\n\nconst sizes = {\n  large: {\n    diameter: 264,\n    stroke: 12,\n    track: 'M132 6c69.588 0 126 56.412 126 126s-56.412 126-126 126S6 201.588 6 132 62.412 6 132 6z',\n    fill: '',\n    border: 'M132 252c-66.274 0-120-53.726-120-120S65.726 12 132 12s120 53.726 120 120-53.726 120-120 120z'\n  },\n  small: {\n    diameter: 60,\n    stroke: 6,\n    track: 'M30 3c14.912 0 27 12.088 27 27S44.912 57 30 57 3 44.912 3 30 15.088 3 30 3z',\n    fill: '',\n    border: 'M30 54C16.745 54 6 43.255 6 30S16.745 6 30 6s24 10.745 24 24-10.745 24-24 24z'\n  },\n  extraSmall: {\n    diameter: 24,\n    stroke: 3,\n    track: 'M22.5 12c0 5.8-4.7 10.5-10.5 10.5S1.5 17.8 1.5 12 6.2 1.5 12 1.5 22.5 6.2 22.5 12z',\n    fill: '',\n    border: ''\n  }\n};\n\nclass ProgressIndicator extends BaseComponent {\n\n  /**\n   * ProgressIndicator constructor.\n   * @param {Element} el\n   * @param {Object} params\n   */\n  constructor(el, params = {}) {\n\n    params.elRequired = true;\n\n    if (!super(el, params)) {\n      return;\n    }\n\n    this._bindEventListenerCallbacks();\n    this._addEventListeners();\n  }\n\n\n  /**\n   * Set the value of the indicator.\n   * @param {Number} val\n   */\n  set(val) {\n\n    if (val === this.value) {\n      return this;\n    }\n\n    if (val > 1) {\n      val = 1;\n    }\n\n    this.value = val;\n\n    if (this.isDeterminate && this.progressEl) {\n      this.progressEl.setAttribute('value', Math.round(val * 100) / 100);\n    }\n\n    this._updateDOM();\n\n    return this;\n  }\n\n\n  /**\n   * Store a reference to all the needed elements.\n   * @param {Element} el\n   */\n  _cacheElements(el) {\n\n    this.el = el;\n    this.progressEl = this.el.querySelector('progress');\n    this.statusEl = this.el.querySelector('.spark-progress__value-status, [role=\"status\"]');\n    this.noteEl = this.el.querySelector('.spark-progress__states');\n    this.meterEl = this.el.querySelector('.spark-progress__meter');\n\n    this.isDeterminate = this.progressEl.getAttribute('value') !== null;\n    this.size = this._determineSize();\n\n    // If this is a determinate value, replace the meter with the SVG.\n    if (this.isDeterminate) {\n\n      var svg = this._buildSVG();\n      svg.setAttribute('class', this.meterEl.className);\n\n      this.meterEl.parentNode.replaceChild(svg, this.meterEl);\n      this.meterEl = svg;\n      this.fillEl = this.meterEl.querySelector('.spark-progress__fill');\n    }\n\n    if (this.noteEl) {\n      this._parseNotes(this.noteEl);\n    }\n\n    if (this.progressEl) {\n      this.value = this.progressEl.value;\n    }\n\n    this._cacheSize();\n\n    this._updateDOM();\n  }\n\n\n  /**\n   * Cache the size of the meter.\n   */\n  _cacheSize() {\n    this.meterHeight = this.meterEl.clientHeight;\n    this.meterWidth = this.meterEl.clientWidth;\n  }\n\n\n  /**\n   * Determine the size of the indicator.\n   * @return {String}\n   */\n  _determineSize() {\n\n    if (this.el.className.indexOf('progress--sm') !== -1) {\n      return 'small';\n    } else if (this.el.className.indexOf('progress--xs') !== -1) {\n      return 'extraSmall';\n    }\n\n    return 'large';\n  }\n\n\n  /**\n   * Build the proper SVG element for this size indicator.\n   * @return {Element}\n   */\n  _buildSVG() {\n    var size = sizes[this.size];\n    var template = '<svg viewBox=\"0 0 ' + size.diameter + ' ' + size.diameter + '\" xmlns=\"http://www.w3.org/2000/svg\"><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"' + size.track + '\" stroke-width=\"' + size.stroke + '\" class=\"spark-progress__track\"/><path d=\"' + (size.fill || size.track) + '\" stroke-width=\"' + size.stroke + '\" class=\"spark-progress__fill\"/><path d=\"' + size.border + '\" class=\"spark-progress__border\"/></g></g></svg>';\n    var div = document.createElement('div');\n    div.innerHTML = template;\n    return div.children[0];\n  }\n\n\n  /**\n   * Take an unordered list of notes and determine the ranges for\n   * when to show a given note.\n   * @param  {Element} el\n   * @return {Array}\n   */\n  _parseNotes(el) {\n\n    this.notes = this.notes || [];\n\n    var len = el.children.length;\n    var i = len - 1;\n\n    for (; i >= 0; i--) {\n      this.notes.push({\n        min: parseInt(el.children[i].getAttribute('data-value'), 10),\n        max: el.children[i + 1] ? parseInt(el.children[i + 1].getAttribute('data-value'), 10) - 1 : 100,\n        el: el.children[i]\n      });\n    }\n  }\n\n\n  /**\n   * Update the text visible based on the value. Also adjust the SVG.\n   */\n  _updateDOM() {\n\n    if (!this.isDeterminate) {\n      return;\n    }\n\n    var updateTime = Date.now();\n    var val = round(this.value * 100, this.precision);\n\n    // Don't animate if we're animating back to 0 or it's been less than 150ms since our last update.\n    var noAnimation = val === 0 || this.lastDOMUpdateTime + 150 > updateTime;\n    toggleClass(this.fillEl, 'no-animation', noAnimation);\n\n    this.statusEl.innerHTML = val + '%';\n\n    var dashArray = (sizes[this.size].diameter - sizes[this.size].stroke) * Math.PI;\n    var dashOffset = dashArray - (dashArray * (val / 100));\n\n    this.fillEl.setAttribute('style', 'stroke-dasharray: ' + dashArray + '; stroke-dashoffset: ' + dashOffset);\n\n    this.lastDOMUpdateTime = updateTime;\n\n    if (!this.notes) {\n      return;\n    }\n\n    var i = 0;\n    var len = this.notes.length;\n\n    for (; i < len; i++) {\n      toggleClass(this.notes[i].el, 'active', (this.notes[i].min <= val && this.notes[i].max >= val));\n    }\n  }\n\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n  _bindEventListenerCallbacks() {\n    this._onResizeBound = this._onResize.bind(this);\n  }\n\n\n  /**\n   * Add event listeners for DOM events.\n   */\n  _addEventListeners() {\n    window.addEventListener('resize', this._onResizeBound);\n  }\n\n\n  /**\n   * Remove event listeners for DOM events..\n   */\n  _removeEventListeners() {\n    window.removeEventListener('resize', this._onResizeBound);\n  }\n\n\n  /**\n   * When the window resizes, cache the dimensions.\n   * @param {Object} e\n   */\n  _onResize() {\n    this._cacheSize();\n  }\n}\n\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\nProgressIndicator.prototype._whitelistedParams = ['precision'];\n\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nProgressIndicator.prototype.defaults = {\n  el: null,\n  progressEl: null,\n  statusEl: null,\n  noteEls: null,\n  meterEl: null,\n  fillEl: null,\n  meterHeight: 0,\n  meterWidth: 0,\n  notes: null,\n  isDeterminate: false,\n  value: null,\n  precision: 0,\n  lastDOMUpdateTime: 0,\n  _onResizeBound: null\n};\n\nexport default ProgressIndicator;\n"]}