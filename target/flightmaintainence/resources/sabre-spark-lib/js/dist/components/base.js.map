{"version":3,"sources":["components/base.js"],"names":["noop","Base","el","params","elRequired","setParams","defaults","_cacheElements","call","_parseParams","remove","leaveElement","_removeEventListeners","parentNode","removeChild","unsetParams","update","_addEventListeners","force","k","v","_whitelistedParams","indexOf","keys","scope","Array","Object","prototype"],"mappings":";;;;;;AAWA;;;;;;0JAXA;;;;;;;;;;;AAaA,IAAMA,OAAO,SAAPA,IAAO,GAAW,CAAE,CAA1B;;IAEMC,I;;AAEJ;;;AAGA,gBAAYC,EAAZ,EAA6B;AAAA,QAAbC,MAAa,uEAAJ,EAAI;;AAAA;;AAE3B,QAAIA,OAAOC,UAAP,IAAqB,CAACF,EAA1B,EAA8B;AAC5B;AACD;;AAED,SAAKG,SAAL,CAAe,KAAKC,QAAL,IAAiB,EAAhC,EAAoC,IAApC;AACA,SAAKD,SAAL,CAAeF,MAAf;AACA,KAAC,KAAKI,cAAL,IAAuBP,IAAxB,EAA8BQ,IAA9B,CAAmC,IAAnC,EAAyCN,EAAzC,EAA6CC,MAA7C;AACA,KAAC,KAAKM,YAAL,IAAqBT,IAAtB,EAA4BQ,IAA5B,CAAiC,IAAjC;AACD;;AAGD;;;;;;iBAIAE,M,mBAAOC,Y,EAAc;;AAEnB,QAAI,KAAKC,qBAAT,EAAgC;AAC9B,WAAKA,qBAAL;AACD;;AAED,QAAI,CAACD,YAAD,IAAiB,KAAKT,EAAtB,IAA4B,KAAKA,EAAL,CAAQW,UAAxC,EAAoD;AAClD,WAAKX,EAAL,CAAQW,UAAR,CAAmBC,WAAnB,CAA+B,KAAKZ,EAApC;AACD;;AAED,SAAKa,WAAL,CAAiB,KAAKT,QAAtB;;AAEA,WAAO,IAAP;AACD,G;;AAGD;;;;;;;;iBAMAU,M,mBAAOd,E,EAAiB;AAAA,QAAbC,MAAa,uEAAJ,EAAI;;;AAEtB,QAAI,KAAKS,qBAAT,EAAgC;AAC9B,WAAKA,qBAAL;AACD;;AAED,KAAC,KAAKL,cAAL,IAAuBP,IAAxB,EAA8BQ,IAA9B,CAAmC,IAAnC,EAAyCN,MAAM,KAAKA,EAApD,EAAwDC,MAAxD;AACA,KAAC,KAAKM,YAAL,IAAqBT,IAAtB,EAA4BQ,IAA5B,CAAiC,IAAjC;;AAEA,QAAI,KAAKS,kBAAT,EAA6B;AAC3B,WAAKA,kBAAL;AACD;;AAED,WAAO,IAAP;AACD,G;;AAGD;;;;;;;;iBAMAZ,S,sBAAUF,M,EAAQe,K,EAAO;AAAA;;AAEvB,wBAAKf,MAAL,EAAa,UAACgB,CAAD,EAAIC,CAAJ,EAAU;AACrB,UAAI,MAAKC,kBAAL,CAAwBC,OAAxB,CAAgCH,CAAhC,MAAuC,CAAC,CAAxC,IAA6CD,KAAjD,EAAwD;AACtD,cAAKC,CAAL,IAAUC,CAAV;AACD;AACF,KAJD;;AAMA,WAAO,IAAP;AACD,G;;AAGD;;;;;;;iBAKAL,W,wBAAYQ,I,EAAMC,K,EAAO;;AAEvBD,WAAOA,gBAAgBE,KAAhB,GAAwBF,IAAxB,GAA+BG,OAAOH,IAAP,CAAYA,IAAZ,CAAtC;AACAC,YAAQA,SAAS,IAAjB;AACA,wBAAKD,IAAL,EAAW,UAACJ,CAAD,EAAO;AAChB,aAAOK,MAAML,CAAN,CAAP;AACD,KAFD;;AAIA,WAAO,IAAP;AACD,G;;;;;AAIH;;;;;;AAIAlB,KAAK0B,SAAL,CAAeN,kBAAf,GAAoC,EAApC;;AAGA;;;;;;AAMApB,KAAK0B,SAAL,CAAerB,QAAf,GAA0B,EAA1B;;kBAEeL,I","file":"base.js","sourcesContent":["/**\n * # Base Component\n * The base class for Spark JS components. This class should never be\n * instantiated directly.\n *\n * @param {Element} el\n * @param {Object} params\n *\n * @module components/base.js\n */\n\nimport each from '../helpers/util/each';\n\nconst noop = function() {};\n\nclass Base {\n\n  /**\n   * Set parameters and cache elements.\n   */\n  constructor(el, params = {}) {\n\n    if (params.elRequired && !el) {\n      return;\n    }\n\n    this.setParams(this.defaults || {}, true);\n    this.setParams(params);\n    (this._cacheElements || noop).call(this, el, params);\n    (this._parseParams || noop).call(this);\n  }\n\n\n  /**\n   * Remove the component from the DOM and prepare for garbage collection by dereferencing values.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n  remove(leaveElement) {\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    if (!leaveElement && this.el && this.el.parentNode) {\n      this.el.parentNode.removeChild(this.el);\n    }\n\n    this.unsetParams(this.defaults);\n\n    return this;\n  }\n\n\n  /**\n   * Update the component to use a new element or reparse from\n   * the existing element.\n   * @param {Element} el Optional\n   * @param {Object} params Optional\n   */\n  update(el, params = {}) {\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    (this._cacheElements || noop).call(this, el || this.el, params);\n    (this._parseParams || noop).call(this);\n\n    if (this._addEventListeners) {\n      this._addEventListeners();\n    }\n\n    return this;\n  }\n\n\n  /**\n   * Set a hash of parameters if they're whitelisted or we're told to force the set.\n   * This is used to set initial values as well as set passed parameters.\n   * @param {Object} params\n   * @param {Boolean} force Force setting even if the param is not whitelisted.\n   */\n  setParams(params, force) {\n\n    each(params, (k, v) => {\n      if (this._whitelistedParams.indexOf(k) !== -1 || force) {\n        this[k] = v;\n      }\n    });\n\n    return this;\n  }\n\n\n  /**\n   * Unset all parameters.\n   * @param {Array|Object} keys\n   * @param {Object} scope The object to unset the params from. Defaults to `this`.\n   */\n  unsetParams(keys, scope) {\n\n    keys = keys instanceof Array ? keys : Object.keys(keys);\n    scope = scope || this;\n    each(keys, (k) => {\n      delete scope[k];\n    });\n\n    return this;\n  }\n}\n\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\nBase.prototype._whitelistedParams = [];\n\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nBase.prototype.defaults = {};\n\nexport default Base;\n"]}