{"version":3,"sources":["components/text-input.js"],"names":["noop","TextInput","el","params","elRequired","_bindEventListenerCallbacks","_addEventListeners","_createTypeahead","inputEl","value","show","_onInput","isActive","_updateClass","hide","setValue","typeahead","getValue","clearValue","clear","disable","setAttribute","enable","removeAttribute","remove","leaveElement","update","getAttribute","onBlur","_onBlurBound","_cacheElements","querySelector","passwordToggleEl","Error","messageEl","clearEl","_parseParams","validatePattern","type","showCharacters","showCharactersRemaining","maxlength","isTextarea","nodeName","toLowerCase","_setCharactersCount","length","remaining","_setTextareaHeight","style","window","getComputedStyle","borders","parseInt","borderTopWidth","borderBottomWidth","height","scrollHeight","lines","innerHTML","split","Math","max","parseFloat","lineHeight","paddingTop","paddingBottom","_onFocusBound","_onFocus","bind","_onBlur","_onInputBound","_onTogglePasswordViewHideBound","_onTogglePasswordViewHide","_onClearClickBound","_onClearClick","addEventListener","_removeEventListeners","removeEventListener","onFocus","validate","onChange","e","preventDefault","prototype","_whitelistedParams","defaults","onValidate"],"mappings":"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","file":"text-input.js","sourcesContent":["/**\n * # TextInput\n * A text input container.\n *\n * @example\n * new TextInput(el, {\n *   // Optional. Callback for when the input value changes.\n *   onChange(value, inputInstance) {}\n * });\n *\n * @module components/text-input.js\n */\nimport BaseComponent from './base';\nimport Typeahead from './typeahead';\nimport toggleClass from '../helpers/dom/toggle-class';\nimport mixin from '../helpers/util/mixin';\nimport messaging from '../mixins/messaging';\nimport validation from '../mixins/validation';\nimport makeElement from '../helpers/dom/make-element';\n\nconst noop = function() {};\n\nclass TextInput extends BaseComponent {\n\n  /**\n   * TextInput constructor.\n   * @param {Element} el\n   * @param {Object} params\n   */\n  constructor(el, params = {}) {\n\n    params.elRequired = true;\n\n    if (!super(el, params)) {\n      return;\n    }\n\n    this._bindEventListenerCallbacks();\n    this._addEventListeners();\n    this._createTypeahead();\n\n    if (this.inputEl.value) {\n      this.show();\n      this._onInput();\n    }\n  }\n\n\n  /**\n   * Show the input by adding the active state and setting character counts (if necessary).\n   */\n  show() {\n    this.isActive = true;\n    this._updateClass();\n    return this;\n  }\n\n\n  /**\n   * Hide the input by removing the active state.\n   */\n  hide() {\n    this.isActive = false;\n    this._updateClass();\n    return this;\n  }\n\n\n  /**\n   * Set the value of the input.\n   * @param {Mixed} value\n   */\n  setValue(value) {\n\n    if (this.typeahead) {\n      this.typeahead.setValue(value);\n    }\n    else {\n      this.inputEl.value = value;\n      if (value) {\n        this.show();\n      }\n      else {\n        this.hide();\n      }\n    }\n\n    return this;\n  }\n\n\n  /**\n   * Get the value of the input.\n   * @return {String}\n   */\n  getValue() {\n    return this.inputEl.value;\n  }\n\n\n  /**\n   * Clear the value of the input.\n   */\n  clearValue() {\n    if (this.typeahead) this.typeahead.clear();\n    else this.inputEl.value = '';\n    return this;\n  }\n\n\n  /**\n   * Disable the input.\n   */\n  disable() {\n    if (this.typeahead) this.typeahead.disable();\n    else this.inputEl.setAttribute('disabled', '');\n    return this;\n  }\n\n\n  /**\n   * Enable the input.\n   */\n  enable() {\n    if (this.typeahead) this.typeahead.enable();\n    else this.inputEl.removeAttribute('disabled');\n    return this;\n  }\n\n\n  /**\n   * Remove.\n   * @param {Boolean} leaveElement\n   */\n  remove(leaveElement) {\n    if (this.typeahead) this.typeahead.remove(leaveElement);\n    return super.remove(leaveElement);\n  }\n\n\n  /**\n   * Update the element in use and the position.\n   * @param {Element} el\n   */\n  update(el) {\n    if (this.typeahead) this.typeahead.remove();\n    return super.update(el);\n  }\n\n\n  /**\n   * Create the typeahead instance.\n   */\n  _createTypeahead() {\n\n    if (this.typeahead === true || this.inputEl.getAttribute('data-typeahead') !== null) {\n      this.typeahead = new Typeahead(this.el, {\n        onBlur: this._onBlurBound\n      });\n    }\n  }\n\n\n  /**\n   * Store a reference to the needed elements.\n   * @param {Element} el\n   */\n  _cacheElements(el) {\n\n    this.el = el;\n    this.inputEl = this.el.querySelector('input, textarea');\n    this.passwordToggleEl = this.el.querySelector('.spark-input__password-toggle');\n\n    if (!this.inputEl) {\n      throw new Error('No <input> or <textarea> element present in input container!', this.el);\n    }\n\n    this.messageEl = this.el.querySelector('.spark-input__message') || makeElement('<span class=\"spark-input__message\"></span>');\n\n    this.clearEl = this.el.querySelector('.spark-input__clear');\n  }\n\n\n  /**\n   * Parse parameters from the elements.\n   */\n  _parseParams() {\n\n    this.validatePattern = this.validatePattern || this.inputEl.getAttribute('data-validate');\n    this.type = this.inputEl.getAttribute('type') || 'text';\n    this.showCharacters = this.el.getAttribute('data-characters') !== null ? true : false;\n    this.showCharactersRemaining = this.el.getAttribute('data-characters-remaining') !== null ? true : false;\n    this.maxlength = this.inputEl.getAttribute('maxlength') || this.inputEl.getAttribute('data-maxlength-soft') || null;\n    this.isTextarea = this.inputEl.nodeName.toLowerCase() === 'textarea' ? true : false;\n    this.isActive = this.inputEl.value ? true : false;\n  }\n\n\n  /**\n   * Set the characters count attribute.\n   */\n  _setCharactersCount() {\n\n    if (this.showCharacters) {\n      this.el.setAttribute('data-characters', this.inputEl.value.length);\n    } else if (this.showCharactersRemaining) {\n\n      var remaining = this.maxlength - this.inputEl.value.length;\n\n      this.el.setAttribute('data-characters-remaining', remaining);\n\n      if (remaining < 1) {\n        this.el.setAttribute('data-characters-remaining-danger', true);\n      } else {\n        this.el.removeAttribute('data-characters-remaining-danger');\n      }\n    }\n  }\n\n\n  /**\n   * Set the height of the textarea so that it doesn't scroll.\n   */\n  _setTextareaHeight() {\n\n    var style = window.getComputedStyle(this.inputEl);\n    var borders = parseInt(style.borderTopWidth, 10) + parseInt(style.borderBottomWidth, 10);\n\n    this.inputEl.style.height = null;\n\n    var height = this.inputEl.scrollHeight;\n    var lines;\n\n    // No height, most likely the element is invisible. Get a rough\n    // approximation of height so we have something.\n    if (!height) {\n      lines = this.inputEl.innerHTML.split('\\n');\n      height = (Math.max(parseFloat(style.lineHeight)) * (lines.length)) + parseFloat(style.paddingTop) + parseFloat(style.paddingBottom);\n    }\n\n    this.inputEl.style.height = (height + borders) + 'px';\n  }\n\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n  _bindEventListenerCallbacks() {\n    this._onFocusBound = this._onFocus.bind(this);\n    this._onBlurBound = this._onBlur.bind(this);\n    this._onInputBound = this._onInput.bind(this);\n    this._onTogglePasswordViewHideBound = this._onTogglePasswordViewHide.bind(this);\n    this._onClearClickBound = this._onClearClick.bind(this);\n  }\n\n\n  /**\n   * Add event listeners for focus, blur, input, and click.\n   */\n  _addEventListeners() {\n\n    this.inputEl.addEventListener('focus', this._onFocusBound);\n    this.inputEl.addEventListener('blur', this._onBlurBound);\n    this.inputEl.addEventListener('input', this._onInputBound);\n\n    if (this.passwordToggleEl) {\n      this.passwordToggleEl.addEventListener('click', this._onTogglePasswordViewHideBound);\n    }\n\n    if (this.clearEl) {\n      this.clearEl.addEventListener('click', this._onClearClickBound);\n    }\n  }\n\n\n  /**\n   * Remove event listeners for focus, blur and input.\n   */\n  _removeEventListeners() {\n\n    this.inputEl.removeEventListener('focus', this._onFocusBound);\n    this.inputEl.removeEventListener('blur', this._onBlurBound);\n    this.inputEl.removeEventListener('input', this._onInputBound);\n\n    if (this.passwordToggleEl) {\n      this.passwordToggleEl.removeEventListener('click', this._onTogglePasswordViewHideBound);\n    }\n\n    if (this.clearEl) {\n      this.clearEl.removeEventListener('click', this._onClearClickBound);\n    }\n  }\n\n\n  /**\n   * Update the active class.\n   */\n  _updateClass() {\n    toggleClass(this.el, 'active', this.isActive);\n  }\n\n\n  /**\n   * When the input element gains focus.\n   * @param {Object} e\n   */\n  _onFocus() {\n    this.show();\n    this._setCharactersCount();\n    toggleClass(this.el, 'focus', true);\n    (this.onFocus || noop)(this.inputEl.value, this);\n  }\n\n\n  /**\n   * When the input element loses focus.\n   * @param {Object} e\n   */\n  _onBlur() {\n    if (!this.inputEl.value) {\n      this.hide();\n    }\n    toggleClass(this.el, 'focus', false);\n    (this.onBlur || noop)(this.inputEl.value, this);\n  }\n\n\n  /**\n   * When the value is about to change, run the validation, set the characters count\n   * and resize if we're a textarea.\n   * @param {Object} e\n   */\n  _onInput() {\n\n    this.validate();\n    this._setCharactersCount();\n\n    if (this.isTextarea) {\n      this._setTextareaHeight();\n    }\n\n    (this.onChange || noop)(this.inputEl.value, this);\n  }\n\n\n  /**\n   * When a clear button is clicked, empty the field.\n   * @param {Object} e\n   */\n  _onClearClick() {\n    this.inputEl.value = '';\n    this.hide();\n    (this.onChange || noop)(this.inputEl.value, this);\n  }\n\n\n  /**\n   * Toggle the current type value (text/password) of password input.\n   * @param {Object} e\n   */\n  _onTogglePasswordViewHide(e) {\n    e.preventDefault();\n    this.inputEl.setAttribute('type', this.inputEl.getAttribute('type') === 'password' ? 'text' : 'password');\n  }\n}\n\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\nTextInput.prototype._whitelistedParams = ['validate', 'validatePattern', 'onValidate', 'onChange', 'onFocus', 'onBlur'];\n\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nTextInput.prototype.defaults = {\n  el: null,\n  messageEl: null,\n  inputEl: null,\n  passwordToggleEl: null,\n  clearEl: null,\n  isActive: false,\n  isTextarea: false,\n  validatePattern: false,\n  type: null,\n  showCharacters: false,\n  showCharactersRemaining: false,\n  maxlength: null,\n  typeahead: null,\n  onValidate: noop,\n  onChange: noop,\n  onFocus: noop,\n  onBlur: noop,\n  _onFocusBound: null,\n  _onBlurBound: null,\n  _onInputBound: null,\n  _onTogglePasswordViewHideBound: null,\n  _onClearClickBound: null\n};\n\nmixin(TextInput.prototype, messaging, validation);\n\nexport default TextInput;\n"]}