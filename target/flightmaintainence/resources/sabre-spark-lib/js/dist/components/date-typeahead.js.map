{"version":3,"sources":["components/date-typeahead.js"],"names":["noop","createDefaultElement","el","document","createElement","className","DateTypeahead","params","arguments","length","_bindEventListenerCallbacks","_createTypeahead","getValue","asInt","typeahead","setValue","val","clearValue","enable","disable","run","pause","resume","remove","leaveElement","_cacheElements","_parseParams","type","format","placeholder","len","ariaLabelPrefix","Error","_lengthToFormat","matchPlaceholderSize","onChange","_onTypeaheadChangeBound","onInput","_onTypeaheadInputBound","onFocus","_onTypeaheadFocusBound","onBlur","_onTypeaheadBlurBound","onBackspace","_onTypeaheadBackspaceBound","onEnd","_onTypeaheadEndBound","input","querySelector","getAttribute","setAttribute","_onTypeaheadChange","bind","_onTypeaheadInput","_onTypeaheadFocus","_onTypeaheadBlur","_onTypeaheadBackspace","_onTypeaheadEnd","i","ret","_checkValidity","allowEmpty","parseInt","origVal","isNumber","isNaN","Math","max","min","character","prototype","_whitelistedParams","defaults"],"mappings":"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","file":"date-typeahead.js","sourcesContent":["/**\n * # DateTypeahead\n * Listen to an input element and format it as the user types.\n *\n * @example\n * new DateTypeahead(el);\n *\n * @module components/date-typeahead.js\n */\nimport BaseComponent from './base';\nimport Typeahead from './typeahead';\nimport {string as parseStringAttribute, number as parseNumberAttribute} from '../helpers/dom/parse-attribute';\n\nconst noop = function() {};\n\nfunction createDefaultElement() {\n  var el = document.createElement('span');\n  el.className = 'spark-input';\n  return el;\n}\n\nclass DateTypeahead extends BaseComponent {\n\n  /**\n   * DateTypeahead constructor\n   * @param {Element} el Optional\n   * @param {Object} params Optional\n   */\n  constructor(el, params = {}) {\n\n    // If only one arg passed, assume it was a parameters\n    // object since the user MUST provide those but the element\n    // is optional. Doing it this way to keep the arity the same\n    // as other components.\n    if (arguments.length < 2) {\n      params = el || {};\n      el = createDefaultElement();\n    }\n\n    super(el, params);\n\n    this._bindEventListenerCallbacks();\n    this._createTypeahead(el, params);\n  }\n\n\n  /**\n   * Get the value.\n   * @param {Boolean} asInt Get the value as a parsed integer.\n   * @return {Mixed}\n   */\n  getValue(asInt) {\n    return this.typeahead.getValue(asInt);\n  }\n\n\n  /**\n   * Set the value.\n   * @param {Mixed} val\n   */\n  setValue(val) {\n    return this.typeahead.setValue(val);\n  }\n\n\n  /**\n   * Clear the value.\n   */\n  clearValue() {\n    return this.typeahead.clearValue();\n  }\n\n\n  /**\n   * Enable the input.\n   */\n  enable() {\n    return this.typeahead.enable();\n  }\n\n\n  /**\n   * Disable the input.\n   */\n  disable() {\n    return this.typeahead.disable();\n  }\n\n\n  /**\n   * Run the typeahead calculations.\n   */\n  run() {\n    return this.typeahead.run();\n  }\n\n\n  /**\n   * Pause the typeahead events.\n   */\n  pause() {\n    return this.typeahead.pause();\n  }\n\n\n  /**\n   * Reseume typeahead events.\n   */\n  resume() {\n    return this.typeahead.resume();\n  }\n\n\n  /**\n   * Augment default remove call w/ helper cleanup.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n  remove(leaveElement) {\n    this.typeahead.remove(leaveElement);\n    super.remove(leaveElement);\n    return this;\n  }\n\n\n  /**\n   * Cache elements.\n   * @param {Element} el\n   */\n  _cacheElements(el) {\n    this.el = el;\n  }\n\n\n  /**\n   * Parse parameters from the elements.\n   */\n  _parseParams() {\n\n    this.type = this.type !== null ? this.type : parseStringAttribute(this.el, 'data-type', 'day');\n    this.format = this.format !== null ? this.format : parseStringAttribute(this.el, 'data-format', null);\n    this.placeholder = this.placeholder !== null ? this.placeholder : parseStringAttribute(this.el, 'data-placeholder', null);\n    this.len = this.len !== null ? this.len : parseNumberAttribute(this.el, 'length', null);\n    this.ariaLabelPrefix = this.ariaLabelPrefix !== null ? this.ariaLabelPrefix : null;\n\n    if (!this.placeholder) {\n      throw new Error('You must provide a placeholder value for a DateTypeahead.');\n    }\n\n    if (this.len !== null) {\n      this.format = this._lengthToFormat(this.len);\n    }\n\n    if (!this.format) {\n      throw new Error('You must provide a format value for a DateTypeahead.');\n    }\n  }\n\n\n  /**\n   * Create a typeahead with the given format.\n   * @param {Object} el\n   */\n  _createTypeahead(el) {\n\n    this.typeahead = new Typeahead(el, {\n      placeholder: this.placeholder,\n      format: this.format,\n      matchPlaceholderSize: true,\n      onChange: this._onTypeaheadChangeBound,\n      onInput: this._onTypeaheadInputBound,\n      onFocus: this._onTypeaheadFocusBound,\n      onBlur: this._onTypeaheadBlurBound,\n      onBackspace: this._onTypeaheadBackspaceBound,\n      onEnd: this._onTypeaheadEndBound\n    });\n\n    // Ensure we have an ARIA label\n    var input = el.querySelector('input');\n    if (input && !input.getAttribute('aria-label')) {\n      input.setAttribute('aria-label', this.ariaLabelPrefix + ' ' + this.type);\n    }\n  }\n\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n  _bindEventListenerCallbacks() {\n    this._onTypeaheadChangeBound = this._onTypeaheadChange.bind(this);\n    this._onTypeaheadInputBound = this._onTypeaheadInput.bind(this);\n    this._onTypeaheadFocusBound = this._onTypeaheadFocus.bind(this);\n    this._onTypeaheadBlurBound = this._onTypeaheadBlur.bind(this);\n    this._onTypeaheadBackspaceBound = this._onTypeaheadBackspace.bind(this);\n    this._onTypeaheadEndBound = this._onTypeaheadEnd.bind(this);\n  }\n\n\n  /**\n   * Take a length and return a format string with that many digits.\n   * @param {Number} length\n   * @return {String}\n   */\n  _lengthToFormat(length) {\n\n    var i = 0;\n    var ret = '';\n\n    for (; i < length; i++) {\n      ret += '\\\\d';\n    }\n\n    return ret;\n  }\n\n\n  /**\n   * Check to see if an input value is valid.\n   * @param {Mixed} val\n   * @param {Boolean} allowEmpty All the value to be empty instead of 0.\n   */\n  _checkValidity(val, allowEmpty) {\n\n    val = parseInt(val, 10);\n\n    var origVal = val;\n    var isNumber = !isNaN(val);\n\n    // If we were passed an empty string or something, don't try to validate.\n    // Treat zeros as a non-entry for days and months.\n    if (isNumber) {\n\n      if (this.type === 'year') {\n        val = val === 0 ? (allowEmpty ? '' : 0) : Math.max(val, 0);\n      } else if (this.type === 'month') {\n        val = val ? Math.min(Math.max(val, 1), 12) : (allowEmpty ? '' : 0);\n      } else {\n        val = val ? Math.min(Math.max(val, 1), 31) : (allowEmpty ? '' : 0);\n      }\n    }\n\n    // Need to make sure we aren't looping forever on these updates.\n    if (isNumber && val !== origVal) {\n      this.typeahead.setValue(val + '');\n      return false;\n    }\n\n    return true;\n  }\n\n\n  /**\n   * When the typeahead changes, make sure the value is valid. This\n   * is very basic validation. More complex validation like the number\n   * of days in a specific month should be handled by the callback.\n   * And run our callback.\n   * @param {String} val The value of the input\n   * @param {String} oldVal The previous value\n   */\n  _onTypeaheadChange(val) {\n    if (this._checkValidity(val)) {\n      (this.onChange || noop)(val, this);\n    }\n  }\n\n  /**\n   * Callback for `input` event\n   * @param {String} val The value of the input\n   * @param {String} oldVal The previous value\n   *\n   */\n  _onTypeaheadInput(val) {\n    (this.onInput || noop)(val, this);\n  }\n\n\n  /**\n   * When the typeahead gains focus, let anyone who is interested know.\n   * @param {String} val\n   */\n  _onTypeaheadFocus(val) {\n    (this.onFocus || noop)(val, this);\n  }\n\n\n  /**\n   * When the typeahead loses focus, let anyone who is interested know.\n   * @param {String} val\n   */\n  _onTypeaheadBlur(val) {\n    this._checkValidity(val, true);\n    (this.onBlur || noop)(val, this);\n  }\n\n\n  /**\n   * When the typeahead fires a backspace event because it's empty and\n   * the user is hitting backspace, let anyone who is interested know.\n   * @param {String} val\n   */\n  _onTypeaheadBackspace(val) {\n    (this.onBackspace || noop)(val, this);\n  }\n\n\n  /**\n   * When the typeahead is full and at its end, let anyone who is interested know.\n   * @param {Object} typeahead\n   * @param {String} character Optional The character to pass to the next input.\n   */\n  _onTypeaheadEnd(typeahead, character) {\n    (this.onEnd || noop)(this, character);\n  }\n}\n\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\nDateTypeahead.prototype._whitelistedParams = ['type', 'format', 'ariaLabelPrefix', 'placeholder', 'len', 'onChange', 'onInput', 'onFocus', 'onBlur', 'onBackspace', 'onEnd'];\n\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nDateTypeahead.prototype.defaults = {\n  el: null,\n  type: null,\n  ariaLabelPrefix: null,\n  typeahead: null,\n  format: null,\n  placeholder: null,\n  len: null,\n  onChange: null,\n  onInput: null,\n  onFocus: null,\n  onBlur: null,\n  onBackspace: null,\n  onEnd: null,\n  _onTypeaheadChangeBound: null,\n  _onTypeaheadInputBound: null,\n  _onTypeaheadFocusBound: null,\n  _onTypeaheadBlurBound: null,\n  _onTypeaheadBackspaceBound: null,\n  _onTypeaheadEndBound: null\n};\n\nexport default DateTypeahead;\n"]}