{"version":3,"sources":["spark.jquery.js"],"names":["components","namespace","createjQueryPlugin","name","cls","$","fn","charAt","toUpperCase","substr","method","options","each","$this","data","Error","apply","i"],"mappings":";;AAAA;;IAAYA,U;;;;AAEZ,IAAIC,YAAY,OAAhB;;AAEA;;;;;AAKA,SAASC,kBAAT,CAA4BC,IAA5B,EAAkCC,GAAlC,EAAuC;;AAErCC,IAAEC,EAAF,CAAKL,YAAYE,KAAKI,MAAL,CAAY,CAAZ,EAAeC,WAAf,EAAZ,GAA2CL,KAAKM,MAAL,CAAY,CAAZ,CAAhD,IAAkE,UAASC,MAAT,EAA6B;AAAA,sCAATC,OAAS;AAATA,aAAS;AAAA;;AAE7F,WAAO,KAAKC,IAAL,CAAU,YAAW;;AAE1B,UAAIC,QAAQR,EAAE,IAAF,CAAZ;AACA,UAAIS,OAAOD,MAAMC,IAAN,CAAcb,SAAd,SAA2BE,IAA3B,CAAX;;AAEA;AACA,UAAI,CAACW,IAAL,EAAW;AACTD,cAAMC,IAAN,CAAcb,SAAd,SAA2BE,IAA3B,EAAoCW,OAAO,IAAIV,GAAJ,CAAQ,IAAR,CAA3C;AACD;;AAED;AACA,UAAI,OAAOM,MAAP,KAAkB,QAAtB,EAAgC;;AAE9B;AACA,YAAIA,OAAO,CAAP,MAAc,GAAlB,EAAuB;AACrB,gBAAM,IAAIK,KAAJ,CAAU,mCAAmCL,MAAnC,GAA4C,WAA5C,GAA0DP,IAA1D,GAAiE,SAA3E,CAAN;AACD;;AAED;AACA,YAAI,OAAOW,KAAKJ,MAAL,CAAP,KAAwB,UAA5B,EAAwC;AACtC,gBAAM,IAAIK,KAAJ,CAAU,gBAAgBL,MAAhB,GAAyB,sBAAzB,GAAkDP,IAAlD,GAAyD,SAAnE,CAAN;AACD;;AAEDW,aAAKJ,MAAL,EAAaM,KAAb,CAAmBF,IAAnB,EAAyBH,OAAzB;AACD;;AAED,aAAOG,IAAP;AACD,KA3BM,CAAP;AA4BD,GA9BD;AA+BD;;AAED;AACA,KAAK,IAAIG,CAAT,IAAcjB,UAAd,EAA0B;AACxBE,qBAAmBe,CAAnB,EAAsBjB,WAAWiB,CAAX,CAAtB;AACD","file":"spark.jquery.js","sourcesContent":["import * as components from './spark';\n\nlet namespace = 'spark';\n\n/**\n * Create a jQuery plugin version of a component.\n * @param  {String} name\n * @param  {Function} cls  The class constructor\n */\nfunction createjQueryPlugin(name, cls) {\n\n  $.fn[namespace + name.charAt(0).toUpperCase() + name.substr(1)] = function(method, ...options) {\n\n    return this.each(function() {\n\n      let $this = $(this);\n      let data = $this.data(`${namespace}.${name}`);\n\n      // Create a new instance\n      if (!data) {\n        $this.data(`${namespace}.${name}`, (data = new cls(this)));\n      }\n\n      // If we have a method to call, do so.\n      if (typeof method === 'string') {\n\n        // Pitch a fit if this is a private method.\n        if (method[0] === '_') {\n          throw new Error('Cannot access private method \"' + method + '\" on the ' + name + ' class.');\n        }\n\n        // Fail if this method doesn't exist.\n        if (typeof data[method] !== 'function') {\n          throw new Error('No method \"' + method + '\" is defined on the ' + name + ' class.');\n        }\n\n        data[method].apply(data, options);\n      }\n\n      return data;\n    });\n  };\n}\n\n// Create a plugin for each\nfor (let i in components) {\n  createjQueryPlugin(i, components[i]);\n}\n"]}