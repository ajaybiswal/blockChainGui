{"version":3,"sources":["modal.js"],"names":["Modal","el","params","elRequired","_bindEventListenerCallbacks","_addEventListeners","open","isActive","_addWindowEventListeners","_updateClasses","document","body","close","_removeWindowEventListeners","update","_removeEventListeners","_cacheElements","modalPassed","modalEl","querySelector","getAttribute","scrollEl","_onClickBound","_onClick","bind","_onKeyupBound","_onKeyup","_onModalClickBound","_onModalClick","addEventListener","removeEventListener","window","e","target","preventDefault","keyCode","prototype","defaults"],"mappings":";;;;;;AASA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;+eAdA;;;;;;;;;;;IAgBMA,K;;;AAEJ;;;;;AAKA,iBAAYC,EAAZ,EAA6B;AAAA;;AAAA,QAAbC,MAAa,uEAAJ,EAAI;;AAAA;;AAE3BA,WAAOC,UAAP,GAAoB,IAApB;;AAEA,QAAI,2CAAC,0BAAMF,EAAN,EAAUC,MAAV,CAAD,SAAJ,EAAwB;AACtB;AACD;;AAED,UAAKE,2BAAL;AACA,UAAKC,kBAAL;AAT2B;AAU5B;;AAGD;;;;;kBAGAC,I,mBAAO;;AAEL,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,wBAAL;AACA,SAAKC,cAAL;AACA,4BAASC,SAASC,IAAlB,EAAwB,kBAAxB;;AAEA,WAAO,IAAP;AACD,G;;AAGD;;;;;kBAGAC,K,oBAAQ;;AAEN,SAAKL,QAAL,GAAgB,KAAhB;AACA,SAAKM,2BAAL;AACA,SAAKJ,cAAL;AACA,+BAAYC,SAASC,IAArB,EAA2B,kBAA3B;;AAEA,WAAO,IAAP;AACD,G;;AAGD;;;;;;;;kBAMAG,M,mBAAOb,E,EAAiB;AAAA,QAAbC,MAAa,uEAAJ,EAAI;;;AAEtB,SAAKa,qBAAL;AACA,SAAKC,cAAL,CAAoBf,MAAM,KAAKA,EAA/B,EAAmCC,MAAnC;AACA,SAAKG,kBAAL;AACA,SAAKI,cAAL;AACA,SAAKI,2BAAL;;AAEA,QAAI,KAAKN,QAAT,EAAmB;AACjB,WAAKC,wBAAL;AACD;;AAED,WAAO,IAAP;AACD,G;;AAGD;;;;;;;;kBAMAQ,c,2BAAef,E,EAAIC,M,EAAQ;;AAEzB,QAAIe,cAAc,wBAAShB,EAAT,EAAa,aAAb,CAAlB;AACA,QAAIiB,UAAUhB,OAAOgB,OAArB;;AAEA,QAAID,WAAJ,EAAiB;AACf,WAAKC,OAAL,GAAejB,EAAf;AACD,KAFD,MAGK;AACH,WAAKA,EAAL,GAAUA,EAAV;AACA,WAAKiB,OAAL,GAAeA,WAAWR,SAASS,aAAT,CAAuBlB,GAAGmB,YAAH,CAAgB,YAAhB,CAAvB,CAA1B;AACD;;AAED,SAAKC,QAAL,GAAgB,KAAKH,OAAL,CAAaC,aAAb,CAA2B,sBAA3B,KAAsD,KAAKD,OAA3E;;AAEA,SAAKX,QAAL,GAAgB,wBAAS,KAAKN,EAAL,IAAW,KAAKiB,OAAzB,EAAkC,QAAlC,CAAhB;AACD,G;;AAGD;;;;;kBAGAT,c,6BAAiB;AACf,+BAAY,KAAKS,OAAjB,EAA0B,QAA1B,EAAoC,KAAKX,QAAzC;AACD,G;;AAGD;;;;;;;kBAKAH,2B,0CAA8B;AAC5B,SAAKkB,aAAL,GAAqB,KAAKC,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CAArB;AACA,SAAKC,aAAL,GAAqB,KAAKC,QAAL,CAAcF,IAAd,CAAmB,IAAnB,CAArB;AACA,SAAKG,kBAAL,GAA0B,KAAKC,aAAL,CAAmBJ,IAAnB,CAAwB,IAAxB,CAA1B;AACD,G;;AAGD;;;;;kBAGAnB,kB,iCAAqB;AACnB,QAAI,KAAKJ,EAAT,EAAa,KAAKA,EAAL,CAAQ4B,gBAAR,CAAyB,OAAzB,EAAkC,KAAKP,aAAvC;AACb,QAAI,KAAKJ,OAAT,EAAkB,KAAKA,OAAL,CAAaW,gBAAb,CAA8B,OAA9B,EAAuC,KAAKF,kBAA5C;AACnB,G;;AAGD;;;;;kBAGAZ,qB,oCAAwB;AACtB,QAAI,KAAKd,EAAT,EAAa,KAAKA,EAAL,CAAQ6B,mBAAR,CAA4B,OAA5B,EAAqC,KAAKR,aAA1C;AACb,QAAI,KAAKJ,OAAT,EAAkB,KAAKA,OAAL,CAAaY,mBAAb,CAAiC,OAAjC,EAA0C,KAAKH,kBAA/C;AACnB,G;;AAGD;;;;;kBAGAnB,wB,uCAA2B;AACzB,SAAKK,2BAAL;AACAkB,WAAOF,gBAAP,CAAwB,OAAxB,EAAiC,KAAKJ,aAAtC;AACD,G;;AAGD;;;;;kBAGAZ,2B,0CAA8B;AAC5BkB,WAAOD,mBAAP,CAA2B,OAA3B,EAAoC,KAAKL,aAAzC;AACD,G;;AAGD;;;;;;kBAIAF,Q,uBAAW;AACT,SAAKjB,IAAL;AACD,G;;AAGD;;;;;;kBAIAsB,a,0BAAcI,C,EAAG;;AAEf;AACA,QAAIA,EAAEC,MAAF,KAAa,KAAKZ,QAAlB,IAA8BW,EAAEC,MAAF,KAAa,KAAKf,OAAhD,IAA2D,yBAAUc,EAAEC,MAAZ,EAAoB,4CAApB,EAAkE,KAAKZ,QAAvE,CAA/D,EAAiJ;AAC/IW,QAAEE,cAAF;AACA,WAAKtB,KAAL;AACD;AACF,G;;AAGD;;;;;;kBAIAc,Q,qBAASM,C,EAAG;AACV,QAAIA,EAAEG,OAAF,KAAc,EAAlB,EAAsB;AACpB,WAAKvB,KAAL;AACD;AACF,G;;;;;AAGH;;;;;;;;AAMAZ,MAAMoC,SAAN,CAAgBC,QAAhB,GAA2B;AACzBpC,MAAI,IADqB;AAEzBiB,WAAS,IAFgB;AAGzBG,YAAU,IAHe;AAIzBd,YAAU,KAJe;AAKzBe,iBAAe,IALU;AAMzBG,iBAAe,IANU;AAOzBE,sBAAoB;AAPK,CAA3B;;kBAUe3B,K","file":"modal.js","sourcesContent":["/**\n * # Modal\n * Show content in a modal.\n *\n * @example\n * new Modal(el);\n *\n * @module components/modal.js\n */\nimport BaseComponent from './base';\nimport toggleClass from '../helpers/dom/toggle-class';\nimport addClass from '../helpers/dom/add-class';\nimport removeClass from '../helpers/dom/remove-class';\nimport hasClass from '../helpers/dom/has-class';\nimport getParent from '../helpers/traversal/get-parent';\n\nclass Modal extends BaseComponent {\n\n  /**\n   * Modal constructor.\n   * @param {Element} el\n   * @param {Object} params\n   */\n  constructor(el, params = {}) {\n\n    params.elRequired = true;\n\n    if (!super(el, params)) {\n      return;\n    }\n\n    this._bindEventListenerCallbacks();\n    this._addEventListeners();\n  }\n\n\n  /**\n   * Open\n   */\n  open() {\n\n    this.isActive = true;\n    this._addWindowEventListeners();\n    this._updateClasses();\n    addClass(document.body, 'spark-modal-open');\n\n    return this;\n  }\n\n\n  /**\n   * Close\n   */\n  close() {\n\n    this.isActive = false;\n    this._removeWindowEventListeners();\n    this._updateClasses();\n    removeClass(document.body, 'spark-modal-open');\n\n    return this;\n  }\n\n\n  /**\n   * Update the component to use a new element or reparse from\n   * the existing element.\n   * @param {Element} el Optional\n   * @param {Object} params\n   */\n  update(el, params = {}) {\n\n    this._removeEventListeners();\n    this._cacheElements(el || this.el, params);\n    this._addEventListeners();\n    this._updateClasses();\n    this._removeWindowEventListeners();\n\n    if (this.isActive) {\n      this._addWindowEventListeners();\n    }\n\n    return this;\n  }\n\n\n  /**\n   * Store a reference to the element. Either a modal itself\n   * or a button referencing a modal may be passed.\n   * @param {Element} el\n   * @param {Element} params @optional\n   */\n  _cacheElements(el, params) {\n\n    var modalPassed = hasClass(el, 'spark-modal');\n    var modalEl = params.modalEl;\n\n    if (modalPassed) {\n      this.modalEl = el;\n    }\n    else {\n      this.el = el;\n      this.modalEl = modalEl || document.querySelector(el.getAttribute('data-modal'));\n    }\n\n    this.scrollEl = this.modalEl.querySelector('.spark-modal__scroll') || this.modalEl;\n\n    this.isActive = hasClass(this.el || this.modalEl, 'active');\n  }\n\n\n  /**\n   * Update classes for the open or close state.\n   */\n  _updateClasses() {\n    toggleClass(this.modalEl, 'active', this.isActive);\n  }\n\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n  _bindEventListenerCallbacks() {\n    this._onClickBound = this._onClick.bind(this);\n    this._onKeyupBound = this._onKeyup.bind(this);\n    this._onModalClickBound = this._onModalClick.bind(this);\n  }\n\n\n  /**\n   * Add event listeners for DOM events.\n   */\n  _addEventListeners() {\n    if (this.el) this.el.addEventListener('click', this._onClickBound);\n    if (this.modalEl) this.modalEl.addEventListener('click', this._onModalClickBound);\n  }\n\n\n  /**\n   * Remove event listeners for DOM events..\n   */\n  _removeEventListeners() {\n    if (this.el) this.el.removeEventListener('click', this._onClickBound);\n    if (this.modalEl) this.modalEl.removeEventListener('click', this._onModalClickBound);\n  }\n\n\n  /**\n   * Add event listeners for DOM events.\n   */\n  _addWindowEventListeners() {\n    this._removeWindowEventListeners();\n    window.addEventListener('keyup', this._onKeyupBound);\n  }\n\n\n  /**\n   * Remove event listeners for DOM events..\n   */\n  _removeWindowEventListeners() {\n    window.removeEventListener('keyup', this._onKeyupBound);\n  }\n\n\n  /**\n   * When the button is clicked.\n   * @param {Object} e\n   */\n  _onClick() {\n    this.open();\n  }\n\n\n  /**\n   * When we are clicked, toggle the opened state.\n   * @param {Object} e\n   */\n  _onModalClick(e) {\n\n    // The close button is clicked or the actual modal (gray area)\n    if (e.target === this.scrollEl || e.target === this.modalEl || getParent(e.target, '.spark-modal__close, .spark-modal__dismiss', this.scrollEl)) {\n      e.preventDefault();\n      this.close();\n    }\n  }\n\n\n  /**\n   * When a key is pressed on the window and it's an ESC, close the modal.\n   * @param {Object} e\n   */\n  _onKeyup(e) {\n    if (e.keyCode === 27) {\n      this.close();\n    }\n  }\n}\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nModal.prototype.defaults = {\n  el: null,\n  modalEl: null,\n  scrollEl: null,\n  isActive: false,\n  _onClickBound: null,\n  _onKeyupBound: null,\n  _onModalClickBound: null\n};\n\nexport default Modal;\n"]}