////
/// ## Text Inputs
/// @group components/text-input
////


/// Wrapper around the input. Generally a `<label>` so that
/// clicking on any part of the container triggers an input focus.
.spark-input {
  cursor: pointer;
  display: block;
  margin-bottom: 1rem;
  position: relative;
  z-index: 10;

  // Move the label up when we're focused or active
  &.active .spark-label,
  &.has-partial-value .spark-label,
  &.focus .spark-label,
  .spark-input__field:focus ~ .spark-label {
    @include fontsize(eta);
    top: .5rem;
  }

  // Show the placeholder and dividers when we're focused or active
  &.active .spark-input__placeholder,
  &.has-partial-value .spark-input__placeholder,
  &.active .spark-input__divider,
  &.has-partial-value .spark-input__divider,
  .spark-input__field:focus ~ .spark-input__placeholder,
  .spark-input__divider:focus ~ .spark-input__placeholder {
    opacity: 1;
  }

  // When the input has a total character or remaining character count
  &.active[data-characters],
  &.active[data-characters-remaining] {

    // Add padding to the label to allow space for the count.
    .spark-label {
      padding-right: 3rem;
    }
  }

  // Character count should only be displayed on focus
  &.focus[data-characters],
  &.focus[data-characters-remaining] {

    // Place the count in the top right.
    &::before {
      color: $input__label__color;
      @include fontsize(eta);
      position: absolute;
      right: 1rem;
      top: 1.5rem;
      transform: translateY(-50%);
      text-shadow: 1px $input--active__background-color;
      z-index: 15;
    }
  }

  // Set the total characters count
  &.focus[data-characters] {
    &::before {
      content: attr(data-characters);
    }
  }

  // Set the total characters remaining count
  &.focus[data-characters-remaining] {
    &::before {
      content: attr(data-characters-remaining);
    }
  }

  // We've gone over our allotted character count
  &.focus[data-characters-remaining-danger] {
    &::before {
      color: $color-state-danger;
    }
  }

  // On hover, darken the border
  &:hover,
  &.hover {
    > .spark-input__field:not(:focus):not([disabled]) {
      border: $input--hover__border;
    }
  }

  // When the container has a state, show it below.
  &[data-error],
  &[data-info],
  &[data-warning],
  &[data-success] {

    // Remove the bottom border from the input so the message stays flush
    .spark-input__field,
    .spark-input__fields {
      border-radius: $input__border-radius $input__border-radius 0 0;
    }

    .spark-input__message {
      display: block;
    }
  }

  @include inputMessageStates('input');

  // When the container has an error state, show it below.
  &[data-error] {
    .spark-input__field,
    .spark-input__fields {
      border-color: $message--error__message__background-color;
    }
  }

  // When the container has an warning state, show it below.
  &[data-warning] {
    .spark-input__field,
    .spark-input__fields {
      border-color: $message--warning__message__background-color;
    }
  }

  // When the container has an success state, show it below.
  &[data-success] {
    .spark-input__field,
    .spark-input__fields {
      border-color: $message--success__message__background-color;
    }
  }

  // When the container has an info state, show it below.
  &[data-info] {
    .spark-input__field,
    .spark-input__fields {
      border-color: $message--info__message__background-color;
    }
  }

  // Center the label and addon
  .spark-label,
  .spark-input__addon {
    color: $input__label__color;
    @include fontsize(zeta);
    line-height: 2rem; // Set to 2rem to prevent overrides if placed inside another component e.g. Toolbar
    position: absolute;
    top: 1.5rem;
    transition-duration: 100ms;
    transition-property: font-size, color, top, line-height;
    transition-timing-function: $ease-in-out-quint;
    z-index: 10;
  }

  .spark-input__addon {
    top: 50%;
    transform: translateY(-50%);
  }

  // If we have an addon, we need to add some padding to the right.
  &.spark-input--addon {
    top: 50%;
    transform: translateY(-50%);

    .spark-input__field {
      padding-right: 3rem;
    }
  }

  // We need to bump the label 1px back to the right to account for the border.
  // Otherwise it doesn't align to the left.
  .spark-label {
    @include useFont($weight: $input__font-weight);
    left: 1rem;
    margin-left: 1px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    width: calc(100% - 2rem);

    .spark-thin {
      @include useFont($weight: $input__font-weight--thin);
    }
  }

  // Input fields and placeholders inside of the input container should have padding
  // to allow for the label.
  .spark-input__field,
  .spark-input__placeholder,
  .spark-input__overlay {
    padding: 2.25rem 1rem 0.5rem;
  }

  // Input dividers have the same top and bottom padding as fields and placeholders,
  // but they need to be snug.
  .spark-input__divider {
    padding: 2.25rem .5rem 0.5rem;
  }

  // Don't have a bottom margin if we're the last element in a group
  &:last-child {
    margin-bottom: 0;
  }
}

/// Inputs, placeholders and groups of inputs
.spark-input__field,
.spark-input__placeholder,
.spark-input__fields,
.spark-input__overlay {
  -moz-appearance: none;
  -webkit-appearance: none;
  appearance: none;
  background-color: transparent;
  border-radius: $input__border-radius;
  display: block;
  cursor: inherit;
  @include fontsize(zeta);
  @include useFont($body__font-family, $input__font-weight);
  height: 5rem;
  line-height: 2.1rem; /// Had to set this to 2.1 instead of 2 or else the placeholder wasn't aligning. @todo investigate why.
  padding: 0 1rem;
  transition-duration: 100ms;
  transition-property: background-color, border, border-radius;
  transition-timing-function: $ease-in-out-quint;
  width: 100%;
}

/// Input or a group of inputs should have the same appearance
.spark-input__field,
.spark-input__fields,
.spark-input__overlay {
  background-color: $input__background-color;
  border: $input__border;
  color: $input__color;
  position: relative;
  z-index: 5;
}

/// A text input field needs to have a bunch of resets done to it.
.spark-input__field {
  box-shadow: none;

  // Placeholder hidden by default
  @include placeholder {
    @include useFont($body__font-family, $input__placeholder__font-weight);
    color: $input__background-color;
    transition-duration: 100ms;
    transition-property: opacity;
    transition-timing-function: $ease-in-out-quint;
  }

  // Add opacity individually to browsers except IE as it currently doesn't work well with it
  &::-webkit-input-placeholder {
    opacity: 0;
  }

  &:-moz-placeholder {
    opacity: 0;
  }

  &::-moz-placeholder {
    opacity: 0;
  }

  // Remove custom IE stuff
  &::-ms-clear {
    // display: none;
  }

  // When the input is disabled, gray it out.
  &:disabled {
    background-color: $input--disabled__background-color;
    border: $input--disabled__border;

    & ~ .spark-label {
      color: $input--disabled__color;
    }

    &:-ms-input-placeholder {
      color: $input--disabled__background-color;
    }

    & ~ .spark-input__addon {
      color: $input--disabled__color;
    }
  }
}

/// Hide the placeholder on inputs with a typeahead
.spark-input__field[data-typeahead] {
  @include placeholder {
    @include useFont($mono__font-family);
  }

  // Add opacity individually to browsers except IE as it currently doesn't work well with it
  &::-webkit-input-placeholder {
    opacity: 0 !important;
  }

  &:-moz-placeholder {
    opacity: 0 !important;
  }

  &::-moz-placeholder {
    opacity: 0 !important;
  }
}

/// Typeahead fields should be monospaced to prevent jumping around
.spark-input__field[data-typeahead],
.spark-input__field[data-typeahead] ~ .spark-input__placeholder {
  @include useFont($mono__font-family);
}

/// When an input with a typeahead gains focus, make background transparent so
/// that we can see the placeholder behind it.
.spark-input__field[data-typeahead]:focus {
  background-color: transparent;
}

/// Give the placeholder the background color of the input since its
/// `background-color` is transparent on focus.
.spark-input__field[data-typeahead]:focus ~ .spark-input__placeholder {
  background-color: $input--active__background-color;
}

/// Textarea input
textarea.spark-input__field {
  overflow: auto;
  resize: none;
}

/// Input placeholder element for typeahead
.spark-input__placeholder {
  color: $input--typeahead__placeholder__color;
  left: 1px;
  opacity: 0;
  position: absolute;
  top: 1px;
  z-index: 0;

  // When inside of a field group, don't offset from the left.
  .spark-input__fields & {
    left: 0;
    top: 0;
  }
}

/// A group of fields should flex the content to fit on one line. If you want
/// inputs on multiple lines, don't use a group!
.spark-input__fields {
  display: flex;
  overflow: hidden;

  // Don't expand the size of each input
  .spark-input {
    flex: 0 0 auto;
    height: 100%;
  }

  // No background or border on nested input fields since we have that on the fields container
  .spark-input__field,
  .spark-input__placeholder {
    background-color: transparent;
    border: none;
    padding-left: 0;
    padding-right: 0;
    height: 100%;
  }

  // Don't put a border or background on the focused inputs
  .spark-input.focus & {
    .spark-input__field {
      border: none;
      background-color: transparent;
    }
  }
}

/// An overlay of the actual value of an input. Used in Date Typeahead to show a text
/// version of the value.
.spark-input__overlay {
  left: 0;
  position: absolute;
  top: 0;
  z-index: 5;
}

/// A focused group of fields and a focused field should behave the same.
.spark-input.focus .spark-input__fields,
.spark-input__field:focus {
  background-color: $input--active__background-color;
  outline: 0;

  @include placeholder {
    color: $input__placeholder__color;
    opacity: 1;
  }
}

/// A focused group of fields and a focused field should behave the same.
.spark-input.focus:not([data-error]):not([data-info]):not([data-warning]):not([data-success]) .spark-input__fields,
.spark-input__field:focus {
  border: $input--active__border;
}

/// Focus text
.spark-input.focus .spark-input__fields ~ .spark-label,
.spark-input__field:focus ~ .spark-label {
  color: $input--active__label__color;
}

/// Align the addon to the right.
.spark-input__addon {
  @extend %input-addon;
}

/// Addon which has some functionality.
.spark-input__addon-button {
  @extend %input-addon-button;
}

/// A divider between inline form fields
.spark-input__divider {
  align-items: center;
  display: flex;
  opacity: 0;
}

/// Holds any state messaging
.spark-input__message {
  @extend %input-message;
}

/// Hide both the password show and hide icons by default
.spark-input__password-show,
.spark-input__password-hide {
  display: none;
}

/// When we have a password input, show the toggle icon for hiding the password
.spark-input.active .spark-input__field[type="password"],
.spark-input__field[type="password"]:focus {
  ~ .spark-input__password-toggle {
    .spark-input__password-show {
      display: block;
    }
  }
}

/// When we have a text input, show the toggle icon for showing the password
.spark-input.active .spark-input__field[type="text"],
.spark-input__field[type="text"]:focus {
  ~ .spark-input__password-toggle {
    .spark-input__password-hide {
      display: block;
    }
  }
}


/// Small text input
.spark-input--sm {
  .spark-input__field {
    height: 3rem;
    padding: 0 1rem 0 1rem;

    @include placeholder {
      color: $input__label__color;
      opacity: 1;
    }
  }

  /// Don't show the label on a small text input.
  .spark-label {
    display: none;
  }
}
