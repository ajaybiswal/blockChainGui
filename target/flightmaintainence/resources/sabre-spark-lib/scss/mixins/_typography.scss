////
/// ## Typography
/// Typography-related mixins.
/// @group mixins/typography
////


$rootsizes-values: map-values($rootsizes);
$grid-breakpoints-values: map-values($grid-breakpoints);
$grid-breakpoints-keys: map-keys($grid-breakpoints);

/// Root font-size in %, outputted in correct breakpoints.
/// @output A `font-size` to use on the root element.
@mixin rootsize {
  font-size: remove-unit(nth($rootsizes-values, 1)) / 16 * 100%;

  // Loop through breakpoints.
  @for $i from 2 through length($rootsizes-values) {
    @media screen and (min-width: get-breakpoint-by-index($i) / 16 * 1em) {
      font-size: nth($rootsizes-values, $i) / 16 * 100%;
    }
  }
}

/// Set the font size in rems given a font name or pixel font value
/// @param {Number|String} $name
/// @param {String} $breakpoint Optional
/// @param {Boolean} $important Optional Add the `!important` tag
/// @param {Boolean} $line-height Optional Also output the `line-height`
/// @output A `font-size` to apply to an element
@mixin fontsize($name, $breakpoint: null, $important: false, $line-height: false) {

  //Set variable for scope
  $fontsize: null;

  // Run for each breakpoint
  @if $breakpoint == all {

    // Keep track of what the last breakpoint value was. Since all the breakpoint
    // definitions apply upwards, don't add a new declaration if the values are the
    // same as what we just ran.
    $lastVals: '';
    @each $bp in $grid-breakpoints-keys {
      $curVals: map-get(map-get($font-scales, $bp), $name) + '' + $important + '' + if($line-height, map-get(map-get($line-height-scales, $bp), $name), false);
      @if $curVals != $lastVals {
        @include fontsize($name, $bp, $important, $line-height);
      }
      $lastVals: $curVals;
    }
  }
  @else {

    // Get the font scale for this breakpoint
    $fontScale: map-get($font-scales, if($breakpoint, $breakpoint, xs));

    // Get the line-height scale for this breakpoint if we need to
    $lineScale: if($line-height, map-get($line-height-scales, if($breakpoint, $breakpoint, xs)), false);

    // Fontsize is a number
    @if type-of($name) == number {
      $fontsize: #{$name / map-get($rootsizes, if($breakpoint, $breakpoint, xs))}rem;
    }
    // If we have a scale that matches the breakpoint, get the font size
    @else if $fontScale and map-get($fontScale, $name) {
      $fontsize: #{(map-get($fontScale, $name) / map-get($rootsizes, if($breakpoint, $breakpoint, xs)))}rem;
    }
    // No scale and not a number. Oops!
    @else {
      @warn '#{$name} is not a valid font scale variable';
    }

    // Line-height is a number
    @if type-of($line-height) == number {
      $line-height: #{$line-height / map-get($rootsizes, if($breakpoint, $breakpoint, xs))}rem;
    }
    // If we have a scale that matches the breakpoint, get the font size
    @else if $lineScale and map-get($lineScale, $name) {
      $line-height: #{(map-get($lineScale, $name) / map-get($rootsizes, if($breakpoint, $breakpoint, xs)))}rem;
    }

    // If a breakpoint was specified, limit this to that breakpoint
    // Notice the added space for the ' !important', more consitent spacing
    // between the unit and the semi-colon at end of line
    @if $breakpoint {
      @include media-breakpoint-up($breakpoint) {
        @if $fontsize != null {
          font-size: $fontsize + if($important, unquote(' !important'), unquote(''));
        }
        @if $line-height {
          line-height: $line-height + if($important, unquote(' !important'), unquote(''));
        }
      }
    }
    @else {
      @if $fontsize != null {
        font-size: $fontsize + if($important, unquote(' !important'), unquote(''));
      }
      @if $line-height {
        line-height: $line-height + if($important, unquote(' !important'), unquote(''));
      }
    }
  }
}
