{"version":3,"sources":["js/dist/components/node_modules/browser-pack/_prelude.js","js/dist/components/js/dist/components/base.js","js/dist/components/js/dist/components/expand.js","js/dist/components/js/dist/components/table.js","js/dist/components/js/dist/helpers/animation/height.js","js/dist/components/js/dist/helpers/dom/add-class.js","js/dist/components/js/dist/helpers/dom/has-class.js","js/dist/components/js/dist/helpers/dom/outer-height.js","js/dist/components/js/dist/helpers/dom/remove-class.js","js/dist/components/js/dist/helpers/dom/toggle-class.js","js/dist/components/js/dist/helpers/form/form-data.js","js/dist/components/js/dist/helpers/form/set-caret.js","js/dist/components/js/dist/helpers/traversal/get-index.js","js/dist/components/js/dist/helpers/traversal/get-parent.js","js/dist/components/js/dist/helpers/traversal/get-sibling-after.js","js/dist/components/js/dist/helpers/traversal/get-sibling-before.js","js/dist/components/js/dist/helpers/traversal/matches.js","js/dist/components/js/dist/helpers/util/each.js","js/dist/components/js/dist/helpers/util/trim.js"],"names":[],"mappingsxzzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChpvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"table.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _each = require('../helpers/util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * # Base Component\n                                                                                                                                                           * The base class for Spark JS components. This class should never be\n                                                                                                                                                           * instantiated directly.\n                                                                                                                                                           *\n                                                                                                                                                           * @param {Element} el\n                                                                                                                                                           * @param {Object} params\n                                                                                                                                                           *\n                                                                                                                                                           * @module components/base.js\n                                                                                                                                                           */\n\nvar noop = function noop() {};\n\nvar Base = function () {\n\n  /**\n   * Set parameters and cache elements.\n   */\n  function Base(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Base);\n\n    if (params.elRequired && !el) {\n      return;\n    }\n\n    this.setParams(this.defaults || {}, true);\n    this.setParams(params);\n    (this._cacheElements || noop).call(this, el, params);\n    (this._parseParams || noop).call(this);\n  }\n\n  /**\n   * Remove the component from the DOM and prepare for garbage collection by dereferencing values.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n\n\n  Base.prototype.remove = function remove(leaveElement) {\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    if (!leaveElement && this.el && this.el.parentNode) {\n      this.el.parentNode.removeChild(this.el);\n    }\n\n    this.unsetParams(this.defaults);\n\n    return this;\n  };\n\n  /**\n   * Update the component to use a new element or reparse from\n   * the existing element.\n   * @param {Element} el Optional\n   * @param {Object} params Optional\n   */\n\n\n  Base.prototype.update = function update(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    (this._cacheElements || noop).call(this, el || this.el, params);\n    (this._parseParams || noop).call(this);\n\n    if (this._addEventListeners) {\n      this._addEventListeners();\n    }\n\n    return this;\n  };\n\n  /**\n   * Set a hash of parameters if they're whitelisted or we're told to force the set.\n   * This is used to set initial values as well as set passed parameters.\n   * @param {Object} params\n   * @param {Boolean} force Force setting even if the param is not whitelisted.\n   */\n\n\n  Base.prototype.setParams = function setParams(params, force) {\n    var _this = this;\n\n    (0, _each2.default)(params, function (k, v) {\n      if (_this._whitelistedParams.indexOf(k) !== -1 || force) {\n        _this[k] = v;\n      }\n    });\n\n    return this;\n  };\n\n  /**\n   * Unset all parameters.\n   * @param {Array|Object} keys\n   * @param {Object} scope The object to unset the params from. Defaults to `this`.\n   */\n\n\n  Base.prototype.unsetParams = function unsetParams(keys, scope) {\n\n    keys = keys instanceof Array ? keys : Object.keys(keys);\n    scope = scope || this;\n    (0, _each2.default)(keys, function (k) {\n      delete scope[k];\n    });\n\n    return this;\n  };\n\n  return Base;\n}();\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nBase.prototype._whitelistedParams = [];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nBase.prototype.defaults = {};\n\nexports.default = Base;\nmodule.exports = exports['default'];\n//# sourceMappingURL=base.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _height = require('../helpers/animation/height');\n\nvar _height2 = _interopRequireDefault(_height);\n\nvar _toggleClass = require('../helpers/dom/toggle-class');\n\nvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\nvar _hasClass = require('../helpers/dom/has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _getParent = require('../helpers/traversal/get-parent');\n\nvar _getParent2 = _interopRequireDefault(_getParent);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\nxpand\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Expand and collapse an element.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * new Expand(el);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module components/expand.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar noop = function noop() {};\n\nvar Expand = function (_BaseComponent) {\n  _inherits(Expand, _BaseComponent);\n\n  /**\n   * Expand constructor.\n   * @param {Element} el\n   * @param {Object} params\n   */\n  function Expand(el) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Expand);\n\n    params.elRequired = true;\n\n    if (!(_this = _possibleConstructorReturn(this, _BaseComponent.call(this, el, params)), _this)) {\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this._bindEventListenerCallbacks();\n    _this._addEventListeners();\n    return _possibleConstructorReturn(_this);\n  }\n\n  /**\n   * Expand\n   */\n\n\n  Expand.prototype.expand = function expand() {\n\n    (this.onBeforeExpand || noop)();\n\n    (0, _height2.default)({\n      el: this.el,\n      toggleClass: 'expanded',\n      toggleEl: '.spark-expand__content, .spark-panel__content'\n    });\n\n    this.isExpanded = true;\n    this._updateClasses();\n    var e = document.createEvent('Event');\n    e.initEvent('spark.visible-children', true, true);\n    this.el.dispatchEvent(e);\n\n    // If the expand element have input, focus on the first one.\n    if (this.el.querySelector('input')) {\n      this.el.querySelector('input').focus();\n    }\n\n    (this.onAfterExpand || noop)();\n\n    return this;\n  };\n\n  /**\n   * Collapse\n   */\n\n\n  Expand.prototype.collapse = function collapse() {\n\n    (this.onBeforeCollapse || noop)();\n\n    (0, _height2.default)({\n      el: this.el,\n      toggleEl: '.spark-expand__content, .spark-panel__content',\n      toggleValue: 'none',\n      action: 'collapse'\n    });\n\n    this.isExpanded = false;\n    this._updateClasses();\n\n    (this.onAfterCollapse || noop)();\n\n    return this;\n  };\n\n  /**\n   * Toggle the expand state.\n   */\n\n\n  Expand.prototype.toggle = function toggle() {\n    return this[this.isExpanded ? 'collapse' : 'expand']();\n  };\n\n  /**\n   * Store a reference to the element.\n   * @param {Element} el\n   */\n\n\n  Expand.prototype._cacheElements = function _cacheElements(el) {\n    this.el = el;\n    this.isExpanded = (0, _hasClass2.default)(this.el, 'expanded');\n\n    this.accordionHeading = this.el.querySelector('[role=\"heading\"]');\n    this.accordionContent = this.el.querySelector('.spark-panel__content');\n\n    this.panelContent = this.el.querySelector('.spark-expand__content');\n    this.panelCollapsedButton = this.el.querySelector('.spark-expand__hide--expanded');\n    this.panelExpandedButton = this.el.querySelector('.spark-expand__show--expanded');\n  };\n\n  /**\n   * Update classes for the expand or collapse state.\n   */\n\n\n  Expand.prototype._updateClasses = function _updateClasses() {\n    (0, _toggleClass2.default)(this.el, 'expanded', this.isExpanded);\n    this._updateAriaAttributes();\n  };\n\n  /**\n   * Update aria attributes for the expand or collapse state.\n   */\n\n\n  Expand.prototype._updateAriaAttributes = function _updateAriaAttributes() {\n    if (this.isExpanded) {\n      this.accordionHeading ? this.accordionHeading.setAttribute('aria-expanded', 'true') : null;\n      this.accordionContent ? this.accordionContent.setAttribute('aria-hidden', 'false') : null;\n\n      this.panelContent ? this.panelContent.setAttribute('aria-hidden', 'false') : null;\n      this.panelCollapsedButton ? this.panelCollapsedButton.setAttribute('aria-hidden', 'true') : null;\n      this.panelExpandedButton ? this.panelExpandedButton.setAttribute('aria-hidden', 'false') : null;\n    } else {\n      this.accordionHeading ? this.accordionHeading.setAttribute('aria-expanded', 'false') : null;\n      this.accordionContent ? this.accordionContent.setAttribute('aria-hidden', 'true') : null;\n\n      this.panelContent ? this.panelContent.setAttribute('aria-hidden', 'true') : null;\n      this.panelCollapsedButton ? this.panelCollapsedButton.setAttribute('aria-hidden', 'false') : null;\n      this.panelExpandedButton ? this.panelExpandedButton.setAttribute('aria-hidden', 'true') : null;\n    }\n  };\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n\n\n  Expand.prototype._bindEventListenerCallbacks = function _bindEventListenerCallbacks() {\n    this._onClickBound = this._onClick.bind(this);\n    this._onKeydownBound = this._onKeydown.bind(this);\n  };\n\n  /**\n   * Add event listeners for DOM events.\n   */\n\n\n  Expand.prototype._addEventListeners = function _addEventListeners() {\n    this.el.addEventListener('click', this._onClickBound);\n    this.el.addEventListener('keydown', this._onKeydownBound);\n  };\n\n  /**\n   * Remove event listeners for DOM events..\n   */\n\n\n  Expand.prototype._removeEventListeners = function _removeEventListeners() {\n    this.el.removeEventListener('click', this._onClickBound);\n    this.el.removeEventListener('keydown', this._onKeydownBound);\n  };\n\n  /**\n   * When we are clicked, toggle the expanded state.\n   * @param {Object} e\n   */\n\n\n  Expand.prototype._onClick = function _onClick(e) {\n\n    if (!(0, _getParent2.default)(e.target, '.spark-expand__toggle, [data-role=\"toggle\"], [role=\"heading\"]', this.el)) {\n      return;\n    }\n\n    e.preventDefault();\n    this.toggle();\n  };\n\n  /**\n   * When the space or enter key is pressed on the toggle, toggle!\n   * @param {Object} e\n   */\n\n\n  Expand.prototype._onKeydown = function _onKeydown(e) {\n\n    if (!(0, _getParent2.default)(e.target, '.spark-expand__toggle, [data-role=\"toggle\"], [role=\"heading\"]', this.el)) {\n      return;\n    }\n\n    var code = e.keyCode || e.which;\n\n    // Space or enter\n    if (code === 32 || code === 13) {\n      e.preventDefault();\n      this.toggle();\n    }\n  };\n\n  return Expand;\n}(_base2.default);\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nExpand.prototype._whitelistedParams = ['onBeforeExpand', 'onAfterExpand', 'onBeforeCollapse', 'onAfterCollapse'];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nExpand.prototype.defaults = {\n  el: null,\n  isExpanded: false,\n  onBeforeExpand: null,\n  onAfterExpand: null,\n  onBeforeCollapse: null,\n  onAfterCollapse: null,\n  _onClickBound: null,\n  _onKeydownBound: null\n};\n\nexports.default = Expand;\nmodule.exports = exports['default'];\n//# sourceMappingURL=expand.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _expand = require('./expand');\n\nvar _expand2 = _interopRequireDefault(_expand);\n\nvar _setCaret = require('../helpers/form/set-caret');\n\nvar _setCaret2 = _interopRequireDefault(_setCaret);\n\nvar _formData = require('../helpers/form/form-data');\n\nvar _each = require('../helpers/util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nvar _hasClass = require('../helpers/dom/has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _toggleClass = require('../helpers/dom/toggle-class');\n\nvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\nvar _addClass = require('../helpers/dom/add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('../helpers/dom/remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nvar _getParent = require('../helpers/traversal/get-parent');\n\nvar _getParent2 = _interopRequireDefault(_getParent);\n\nvar _getIndex = require('../helpers/traversal/get-index');\n\nvar _getIndex2 = _interopRequireDefault(_getIndex);\n\nvar _getSiblingBefore = require('../helpers/traversal/get-sibling-before');\n\nvar _getSiblingBefore2 = _interopRequireDefault(_getSiblingBefore);\n\nvar _getSiblingAfter = require('../helpers/traversal/get-sibling-after');\n\nvar _getSiblingAfter2 = _interopRequireDefault(_getSiblingAfter);\n\nvar _matches = require('../helpers/traversal/matches');\n\nvar _matches2 = _interopRequireDefault(_matches);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\nable\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * new Table(el);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module components/table.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar noop = function noop() {};\n\nvar Table = function (_BaseComponent) {\n  _inherits(Table, _BaseComponent);\n\n  /**\n   * Table constructor.\n   * @param {Element} el\n   * @param {Object} params\n   */\n  function Table(el) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Table);\n\n    params.elRequired = true;\n\n    if (!(_this = _possibleConstructorReturn(this, _BaseComponent.call(this, el, params)), _this)) {\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this._bindEventListenerCallbacks();\n    _this._addEventListeners();\n\n    _this._initRows();\n\n    if (_this.isSpreadsheet || _this.isEditRows) {\n      _this._deactivateAllInputs();\n    }\n\n    if (_this.isResizable) {\n      _this._initResize();\n    }\n\n    _this._disableRowsColumnsCells();\n\n    _this._initExpands();\n    return _possibleConstructorReturn(_this);\n  }\n\n  /**\n   * Disable the form field in a table cell.\n   * @param {Element} el\n   */\n\n\n  Table.prototype.disableCell = function disableCell(el) {\n    el.disabled = true;\n    (0, _addClass2.default)((0, _getParent2.default)(el, 'td'), 'spark-table__disabled-cell');\n    return this;\n  };\n\n  /**\n   * Enable the form field in a table cell.\n   * @param {Element} el\n   */\n\n\n  Table.prototype.enableCell = function enableCell(el) {\n    el.disabled = false;\n    (0, _removeClass2.default)((0, _getParent2.default)(el, 'td'), 'spark-table__disabled-cell');\n    return this;\n  };\n\n  /**\n   * Disable a row and all the cells inside of it.\n   * @param {Element} el\n   */\n\n\n  Table.prototype.disableRow = function disableRow(el) {\n    (0, _addClass2.default)(el, 'spark-table__disabled-row');\n    (0, _each2.default)(el.querySelectorAll('input, button, a'), function (i) {\n      i.disabled = true;\n    });\n    return this;\n  };\n\n  /**\n   * Enable a row and all the cells inside of it.\n   * @param {Element} el\n   */\n\n\n  Table.prototype.enableRow = function enableRow(el) {\n    (0, _removeClass2.default)(el, 'spark-table__disabled-row');\n    (0, _each2.default)(el.querySelectorAll('input, button, a'), function (i) {\n      i.disabled = false;\n    });\n    return this;\n  };\n\n  /**\n   * Disable a column and all the cells inside of it.\n   * @param {Element} el\n   */\n\n\n  Table.prototype.disableColumn = function disableColumn(el) {\n\n    var index = (0, _getIndex2.default)(el.parentNode.children, el);\n\n    (0, _each2.default)(this.tableEl.querySelectorAll('tbody tr'), function (row) {\n      this.disableCell(row.children[index].querySelector('input'));\n    }.bind(this));\n\n    (0, _addClass2.default)(el, 'spark-table__disabled-column');\n\n    return this;\n  };\n\n  /**\n   * Enable a column and all the cells inside of it.\n   * @param {Element} el\n   */\n\n\n  Table.prototype.enableColumn = function enableColumn(el) {\n\n    var index = (0, _getIndex2.default)(el.parentNode.children, el);\n\n    (0, _each2.default)(this.tableEl.querySelectorAll('tbody tr'), function (row) {\n      this.enableCell(row.children[index].querySelector('input'));\n    }.bind(this));\n\n    (0, _removeClass2.default)(el, 'spark-table__disabled-column');\n\n    return this;\n  };\n\n  /**\n   * Remove the table anc cleanup.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n\n\n  Table.prototype.remove = function remove(leaveElement) {\n    (0, _each2.default)(this._expands, function (e) {\n      e.remove(leaveElement);\n    });\n    return _BaseComponent.prototype.remove.call(this, leaveElement);\n  };\n\n  /**\n   * Activate a row.\n   * @param {Number|Element} row\n   */\n\n\n  Table.prototype.activateRow = function activateRow(row) {\n    row = typeof row === 'number' ? this.tableEl.querySelectorAll('tbody tr')[row] : row;\n    if (row) this._makeRowActive(row);\n    return this;\n  };\n\n  /**\n   * Activate multiple rows.\n   * @param {Array} rows\n   */\n\n\n  Table.prototype.activateRows = function activateRows(rows) {\n    (0, _each2.default)(rows, this.activateRow.bind(this));\n    return this;\n  };\n\n  /**\n   * Deactivate a row.\n   * @param {Number|Element} row\n   */\n\n\n  Table.prototype.deactivateRow = function deactivateRow(row) {\n    row = typeof row === 'number' ? this.tableEl.querySelectorAll('tbody tr')[row] : row;\n    if (row) this._makeRowInActive(row);\n    return this;\n  };\n\n  /**\n   * Deactivate multiple rows.\n   * @param {Array} rows\n   */\n\n\n  Table.prototype.deactivateRows = function deactivateRows(rows) {\n    (0, _each2.default)(rows, this.deactivateRow.bind(this));\n    return this;\n  };\n\n  /**\n   * Get an array of currently active rows.\n   * @return {Array}\n   */\n\n\n  Table.prototype.getActiveRows = function getActiveRows() {\n\n    var arr = [];\n\n    (0, _each2.default)(this.el.querySelectorAll('tbody tr.active'), function (tr) {\n      arr.push(tr);\n    });\n\n    return arr;\n  };\n\n  /**\n   * Update the component to use a new element or reparse from\n   * the existing element.\n   * @param {Element} el Optional\n   */\n\n\n  Table.prototype.update = function update(el) {\n\n    this._removeEventListeners();\n\n    this._cacheElements(el || this.el);\n    this._parseParams();\n\n    this._addEventListeners();\n\n    this._initRows();\n\n    if (this.isSpreadsheet || this.isEditRows) {\n      this._deactivateAllInputs();\n    }\n\n    if (this.isResizable) {\n      this._initResize();\n    }\n\n    this._disableRowsColumnsCells();\n\n    this._initExpands();\n\n    return this;\n  };\n\n  /**\n   * Store a reference to the tabs list, each tab and each panel.\n   * Set which tab is active, or use the first.\n   * @param {Element} el\n   */\n\n\n  Table.prototype._cacheElements = function _cacheElements(el) {\n    this.el = el;\n    this.tableEl = el.querySelector('table');\n  };\n\n  /**\n   * Parse parameters from the elements.\n   */\n\n\n  Table.prototype._parseParams = function _parseParams() {\n\n    if (!this.tableEl) {\n      return;\n    }\n\n    this.isSpreadsheet = this.isSpreadsheet !== null ? this.isSpreadsheet : (0, _hasClass2.default)(this.el, 'spark-table--spreadsheet') ? true : false;\n    this.isEditRows = this.isEditRows !== null ? this.isEditRows : (0, _hasClass2.default)(this.el, 'spark-table--edit-rows') ? true : false;\n    this.isResizable = this.isResizable !== null ? this.isResizable : (0, _hasClass2.default)(this.el, 'spark-table--resizable') ? true : false;\n  };\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n\n\n  Table.prototype._bindEventListenerCallbacks = function _bindEventListenerCallbacks() {\n\n    this._onClickBound = this._onClick.bind(this);\n    this._onChangeBound = this._onChange.bind(this);\n    this._onFocusBound = this._onFocus.bind(this);\n    this._onBlurBound = this._onBlur.bind(this);\n\n    this._onTouchstartBound = this._onTouchstart.bind(this);\n    this._onTouchendBound = this._onTouchend.bind(this);\n    this._onKeydownBound = this._onKeydown.bind(this);\n\n    this._onMouseDownBound = this._onMouseDown.bind(this);\n    this._onMouseMoveBound = this._onMouseMove.bind(this);\n    this._onMouseUpBound = this._onMouseUp.bind(this);\n  };\n\n  /**\n   * Add event listeners for DOM events.\n   */\n\n\n  Table.prototype._addEventListeners = function _addEventListeners() {\n\n    this.el.addEventListener('click', this._onClickBound, false);\n    this.el.addEventListener('change', this._onChangeBound, false);\n    this.el.addEventListener('focus', this._onFocusBound, true);\n    this.el.addEventListener('blur', this._onBlurBound, true);\n\n    if (this.isSpreadsheet) {\n      this.el.addEventListener('touchstart', this._onTouchstartBound, false);\n      this.el.addEventListener('touchend', this._onTouchendBound, false);\n      this.el.addEventListener('keydown', this._onKeydownBound, false);\n    }\n\n    if (this.isResizable) {\n      this.tableEl.addEventListener('mousedown', this._onMouseDownBound, false);\n    }\n  };\n\n  /**\n   * Remove event listeners for DOM events..\n   */\n\n\n  Table.prototype._removeEventListeners = function _removeEventListeners() {\n\n    this.el.removeEventListener('click', this._onClickBound);\n    this.el.removeEventListener('change', this._onChangeBound);\n    this.el.removeEventListener('focus', this._onFocusBound);\n    this.el.removeEventListener('blur', this._onBlurBound);\n\n    this.el.removeEventListener('touchstart', this._onTouchstartBound);\n    this.el.removeEventListener('touchend', this._onTouchendBound);\n    this.el.removeEventListener('keydown', this._onKeydownBound);\n\n    this.tableEl.removeEventListener('mousedown', this._onMouseDownBound);\n\n    this._removeResizeListeners();\n  };\n\n  /**\n   * Add listeners for mousemove and mouseup events.\n   */\n\n\n  Table.prototype._addResizeListeners = function _addResizeListeners() {\n    window.addEventListener('mousemove', this._onMouseMoveBound, false);\n    window.addEventListener('mouseup', this._onMouseUpBound, false);\n  };\n\n  /**\n   * Remove listeners for mosuemove and mouseup.\n   */\n\n\n  Table.prototype._removeResizeListeners = function _removeResizeListeners() {\n    window.removeEventListener('mousemove', this._onMouseMoveBound);\n    window.removeEventListener('mouseup', this._onMouseUpBound);\n  };\n\n  /**\n   * Toggle the active state on a row.\n   * @param {Object} row\n   */\n\n\n  Table.prototype._toggleRowActive = function _toggleRowActive(row) {\n\n    if ((0, _hasClass2.default)(row, 'active')) {\n      this._makeRowInActive(row);\n      this._uncheckSelectAll();\n    } else {\n      this._makeRowActive(row);\n    }\n  };\n\n  /**\n   * Make a row active\n   * @param {Element} row\n   */\n\n\n  Table.prototype._makeRowActive = function _makeRowActive(row) {\n    (0, _addClass2.default)(row, 'active');\n    (row.querySelector('.spark-table__checkbox input[type=\"checkbox\"]:not([disabled])') || {}).checked = true;\n  };\n\n  /**\n   * Make a row active\n   * @param  {Element} row\n   */\n\n\n  Table.prototype._makeRowInActive = function _makeRowInActive(row) {\n    (0, _removeClass2.default)(row, 'active');\n    (row.querySelector('.spark-table__checkbox input[type=\"checkbox\"]:not([disabled])') || {}).checked = false;\n  };\n\n  /**\n   * Toggle active on each row.\n   * @param {NodeList} rows\n   * @param {Boolean} active\n   */\n\n\n  Table.prototype._toggleRowsActive = function _toggleRowsActive(rows, active) {\n\n    var func = active ? '_makeRowActive' : '_makeRowInActive';\n    var i = 0;\n    var len = rows.length;\n\n    for (; i < len; i++) {\n      this[func](rows[i]);\n    }\n  };\n\n  /**\n   * Toggle whether everything should be selected. Find the checkbox input inside of the\n   * given element and invert its state.\n   * @param {Element} el\n   */\n\n\n  Table.prototype._toggleSelectAll = function _toggleSelectAll(el) {\n\n    var checkbox = el.querySelector('.spark-table__select-all input[type=\"checkbox\"]');\n\n    if (!checkbox) {\n      return;\n    }\n\n    this._toggleRowsActive(this.el.querySelectorAll('tbody tr'), !checkbox.checked);\n\n    checkbox.checked = !checkbox.checked;\n  };\n\n  /**\n   * Uncheck the select all checkboxes.\n   */\n\n\n  Table.prototype._uncheckSelectAll = function _uncheckSelectAll() {\n\n    var checkboxes = this.el.querySelectorAll('.spark-table__select-all input[type=\"checkbox\"]');\n    var i = 0;\n    var len = checkboxes.length;\n\n    for (; i < len; i++) {\n      checkboxes[i].checked = false;\n    }\n  };\n\n  /**\n   * Deactivate editing in all input fields.\n   */\n\n\n  Table.prototype._deactivateAllInputs = function _deactivateAllInputs() {\n\n    if (!this.tableEl) {\n      return;\n    }\n\n    this._deactivateInputs(this.tableEl);\n  };\n\n  /**\n   * Deactivate all the inputs inside an element\n   * @param {Element} el\n   */\n\n\n  Table.prototype._deactivateInputs = function _deactivateInputs(el) {\n\n    var inputs = el.querySelectorAll('input:not([type=\"checkbox\"])');\n    var i = 0;\n\n    var len = inputs.length;\n\n    for (; i < len; i++) {\n      this._deactivateInput(inputs[i]);\n    }\n  };\n\n  /**\n   * Make an input field readonly.\n   * @param {Element} input\n   */\n\n\n  Table.prototype._deactivateInput = function _deactivateInput(input) {\n    input.setAttribute('readonly', '');\n    (0, _removeClass2.default)(input.parentNode, 'editing');\n  };\n\n  /**\n   * Activate all the inputs inside an element\n   * @param {Element} el\n   */\n\n\n  Table.prototype._activateInputs = function _activateInputs(el) {\n\n    var inputs = el.querySelectorAll('input:not([type=\"checkbox\"])');\n    var i = 0;\n\n    var len = inputs.length;\n\n    for (; i < len; i++) {\n      this._activateInput(inputs[i]);\n    }\n  };\n\n  /**\n   * Make an input field readable.\n   * @param {Element} input\n   */\n\n\n  Table.prototype._activateInput = function _activateInput(input) {\n    input.removeAttribute('readonly');\n    (0, _addClass2.default)(input.parentNode, 'editing');\n    if (input.type !== 'checkbox' && input.type !== 'radio') {\n      (0, _setCaret2.default)(input, -1);\n    }\n  };\n\n  /**\n   * Activate an input, unless it's already enabled in which case\n   * the focus should move down a row.\n   * @param {Element} input\n   */\n\n\n  Table.prototype._activateInputOrFocusDown = function _activateInputOrFocusDown(input) {\n\n    // Currently readonly\n    if (input.getAttribute('readonly') === '') {\n      this._activateInput(input);\n      return;\n    }\n\n    this._focusDown(input, true);\n  };\n\n  /**\n   * Find all the rows, columns and cells that should be disabled.\n   */\n\n\n  Table.prototype._disableRowsColumnsCells = function _disableRowsColumnsCells() {\n    (0, _each2.default)(this.tableEl.querySelectorAll('td input[disabled]'), this.disableCell.bind(this));\n    (0, _each2.default)(this.tableEl.querySelectorAll('.spark-table__disabled-row'), this.disableRow.bind(this));\n    (0, _each2.default)(this.tableEl.querySelectorAll('.spark-table__disabled-column'), this.disableColumn.bind(this));\n  };\n\n  /**\n   * Move our focus up a row from the given element.\n   * @param {Element} input\n   * @param {Boolean} force Force the move even if the element is active.\n   */\n\n\n  Table.prototype._focusUp = function _focusUp(input, force) {\n    return this._focusUpDown(input, 'up', force);\n  };\n\n  /**\n   * Move our focus down a row from the given element.\n   * @param {Element} input\n   * @param {Boolean} force Force the move even if the element is active.\n   */\n\n\n  Table.prototype._focusDown = function _focusDown(input, force) {\n    return this._focusUpDown(input, 'down', force);\n  };\n\n  /**\n   * Focus on a row up or down from the given element.\n   * @param {Element} input\n   * @param {String} direction up|down\n   * @param {Boolean} force Force the move even if the element is active.\n   */\n\n\n  Table.prototype._focusUpDown = function _focusUpDown(input, direction, force) {\n\n    // If we're not being told to force and the item is not read only\n    if (!force && input.getAttribute('readonly') === null) {\n      return;\n    }\n\n    this._deactivateInput(input);\n    var td = (0, _getParent2.default)(input, 'td', this.el);\n\n    if (!td) {\n      return;\n    }\n\n    var index = (0, _getIndex2.default)(td.parentNode.children, td);\n    var nextRow = (direction === 'up' ? _getSiblingBefore2.default : _getSiblingAfter2.default)(td.parentNode, 'tr');\n\n    if (!nextRow) {\n      return;\n    }\n\n    var newTd = nextRow.children[index];\n\n    if (!newTd) {\n      return;\n    }\n\n    var newInput = newTd.querySelector('input:not([type=\"checkbox\"]), select');\n\n    if (newInput) {\n      if (newInput.disabled) {\n        this._focusUpDown(newInput, direction, force);\n      } else {\n        newInput.focus();\n      }\n    }\n  };\n\n  /**\n   * Move our focus left a cell from the given element.\n   * @param {Element} input\n   * @param {Boolean} force Force the move even if the element is active.\n   */\n\n\n  Table.prototype._focusLeft = function _focusLeft(input, force) {\n    return this._focusLeftRight(input, 'left', force);\n  };\n\n  /**\n   * Move our focus right a cell from the given element.\n   * @param {Element} input\n   * @param {Boolean} force Force the move even if the element is active.\n   */\n\n\n  Table.prototype._focusRight = function _focusRight(input, force) {\n    return this._focusLeftRight(input, 'right', force);\n  };\n\n  /**\n   * Focus on a cell left or down from the given element.\n   * @param {Element} input\n   * @param {String} direction up|down\n   * @param {Boolean} force Force the move even if the element is active.\n   */\n\n\n  Table.prototype._focusLeftRight = function _focusLeftRight(input, direction, force) {\n\n    // If we're not being told to force and the item is not read only\n    if (!force && input.getAttribute('readonly') === null) {\n      return;\n    }\n\n    this._deactivateInput(input);\n    var td = (0, _getParent2.default)(input, 'td', this.el);\n\n    if (!td) {\n      return;\n    }\n\n    var newTd = (direction === 'left' ? _getSiblingBefore2.default : _getSiblingAfter2.default)(td, 'td');\n\n    if (!newTd) {\n      return;\n    }\n\n    var newInput = newTd.querySelector('input:not([type=\"checkbox\"]), select');\n\n    if (newInput) {\n      if (newInput.disabled) {\n        this._focusLeftRight(newInput, direction, force);\n      } else {\n        newInput.focus();\n      }\n    }\n  };\n\n  /**\n   * Check for two click events on the same element in short succession.\n   * @param {Element} el\n   */\n\n\n  Table.prototype._checkDoubleClick = function _checkDoubleClick(el) {\n\n    var now = Date.now();\n    var lastTime = this._lastClickTime;\n    var lastEl = this._lastClickEl;\n\n    this._lastClickTime = now;\n    this._lastClickEl = el;\n\n    if (el === lastEl && now - 500 < lastTime) {\n      return true;\n    }\n\n    return false;\n  };\n\n  /**\n   * Unset the last clicked element.\n   */\n\n\n  Table.prototype._clearClicked = function _clearClicked() {\n    this._lastClickEl = null;\n  };\n\n  /**\n   * Enable editing on a row.\n   * @param {Element} row\n   */\n\n\n  Table.prototype._editRow = function _editRow(row) {\n\n    if (!row) {\n      return;\n    }\n\n    this._editingCount++;\n\n    this._activateInputs(row);\n    (0, _formData.store)(row);\n    (0, _addClass2.default)(row, 'editing');\n    this._updateBindings();\n  };\n\n  /**\n   * Cancel editing a row.\n   * @param {Element} row\n   */\n\n\n  Table.prototype._cancelRow = function _cancelRow(row) {\n\n    if (!row) {\n      return;\n    }\n\n    this._editingCount--;\n\n    this._deactivateInputs(row);\n    (0, _formData.restore)(row);\n    (0, _removeClass2.default)(row, 'editing');\n    this._updateBindings();\n  };\n\n  /**\n   * Save a row.\n   * @param {Element} row\n   */\n\n\n  Table.prototype._saveRow = function _saveRow(row) {\n\n    if (!row) {\n      return;\n    }\n\n    this._editingCount--;\n\n    this._deactivateInputs(row);\n    (0, _formData.clear)(row);\n    (0, _removeClass2.default)(row, 'editing');\n    this._updateBindings();\n\n    (this.onRowSave || noop)((0, _getIndex2.default)(row.parentNode.children, row), row);\n  };\n\n  /**\n   * Delete a row.\n   * @param {Element} row\n   */\n\n\n  Table.prototype._deleteRow = function _deleteRow(row) {\n\n    if (!row) {\n      return;\n    }\n\n    (this.onRowDelete || noop)((0, _getIndex2.default)(row.parentNode.children, row), row);\n    row.parentNode.removeChild(row);\n  };\n\n  /**\n   * Confirm the deletion of a row.\n   * @param {Element} row\n   */\n\n\n  Table.prototype._confirmDelete = function _confirmDelete(row) {\n\n    if (!this.confirmDelete || typeof this.confirmDelete !== 'function') {\n      this._deleteRow(row);\n    } else {\n      this.confirmDelete(row, this._deleteRow);\n    }\n  };\n\n  /**\n   * Update data bindings.\n   */\n\n\n  Table.prototype._updateBindings = function _updateBindings() {\n    (0, _toggleClass2.default)(this.el, 'editing', this._editingCount);\n  };\n\n  /**\n   * Add handles to the header that can be grabbed for resizing.\n   */\n\n\n  Table.prototype._initResize = function _initResize() {\n\n    this._resizeEls = [];\n\n    var ths = this.tableEl.querySelectorAll('thead th');\n\n    (0, _each2.default)(ths, function (th) {\n      th.innerHTML = '<span class=\"spark-table__resize spark-table__resize--left\"></span>' + th.innerHTML + '<span class=\"spark-table__resize spark-table__resize--right\"></span>';\n      this._resizeEls.push(th);\n    }.bind(this));\n  };\n\n  /**\n   * Initialize rows active states.\n   */\n\n\n  Table.prototype._initRows = function _initRows() {\n\n    (0, _each2.default)(this.tableEl.querySelectorAll('td.spark-table__checkbox input:checked'), function (c) {\n      this._makeRowActive((0, _getParent2.default)(c, 'tr'));\n    }.bind(this));\n  };\n\n  /**\n   * Set the size of each column as a percentage so it can be adjusted\n   * while cells are resized.\n   * @param {String} unit Optional\n   * @param {Boolean} force Optional\n   */\n\n\n  Table.prototype._sizeColumns = function _sizeColumns(unit, force) {\n\n    unit = unit || '%';\n\n    if (this._sizeColumnsRun && !force) {\n      return;\n    }\n\n    var width = this.tableEl.offsetWidth;\n\n    (0, _each2.default)(this.tableEl.querySelectorAll('thead th'), function (th) {\n      if (unit === '%') th.style.width = Math.round(th.offsetWidth / width * 100000) / 100000 * 100 + '%';else th.style.width = th.offsetWidth + 'px';\n    }.bind(this));\n\n    this._sizeColumnsRun = true;\n  };\n\n  /**\n   * Initialize expand/collapse rows.\n   */\n\n\n  Table.prototype._initExpands = function _initExpands() {\n\n    var expands = this.tableEl.querySelectorAll('.spark-table-expand');\n\n    this._expands = [];\n\n    (0, _each2.default)(expands, function (e) {\n      this._expands.push(new _expand2.default(e, {\n        onBeforeExpand: this._onBeforeExpand.bind(this)\n      }));\n    }.bind(this));\n  };\n\n  /**\n   * Before an expand is called, size all the columns so that\n   * the expand does cause width changes.\n   */\n\n\n  Table.prototype._onBeforeExpand = function _onBeforeExpand() {\n    this._sizeColumns();\n  };\n\n  /**\n   * When we are clicked determine the proper action to take.\n   * @param  {Object} e\n   */\n\n\n  Table.prototype._onClick = function _onClick(e) {\n\n    var target = e.target || e.srcElement;\n    var row;\n    var selectAll;\n    var actionTaken = false;\n    var clearClicked = true;\n\n    // Select all rows checkbox\n    if ((selectAll = (0, _getParent2.default)(target, '.spark-table__select-all', this.el)) && !(0, _matches2.default)(target, 'input[type=\"checkbox\"]')) {\n      this._toggleSelectAll(selectAll);\n      actionTaken = true;\n    }\n    // Editable field\n    else if ((0, _matches2.default)(target, 'input:not([type=\"checkbox\"]):not([type=\"file\"]), select')) {\n\n        if (!target.disabled) {\n\n          // Listen for double clicks on a spreadsheet\n          if (this.isSpreadsheet) {\n            clearClicked = false;\n            if (this._checkDoubleClick(target)) {\n              clearClicked = true;\n              this._activateInput(target);\n            }\n          }\n\n          actionTaken = true;\n        }\n      }\n      // Edit button\n      else if ((0, _matches2.default)(target, '.spark-table__edit-row')) {\n          this._editRow((0, _getParent2.default)(target, 'tr', this.el));\n          actionTaken = true;\n        }\n        // Delete button\n        else if ((0, _matches2.default)(target, '.spark-table__delete-row')) {\n            this._confirmDelete((0, _getParent2.default)(target, 'tr', this.el));\n            actionTaken = true;\n          }\n          // Save button\n          else if ((0, _matches2.default)(target, '.spark-table__edit-row-save')) {\n              this._saveRow((0, _getParent2.default)(target, 'tr', this.el));\n              actionTaken = true;\n            }\n            // Cancel button\n            else if ((0, _matches2.default)(target, '.spark-table__edit-row-cancel')) {\n                this._cancelRow((0, _getParent2.default)(target, 'tr', this.el));\n                actionTaken = true;\n              }\n              // Select a row\n              else if (!(0, _getParent2.default)(target, 'button, a, .spark-toggle-switch', this.el) && !(0, _matches2.default)(target, '.spark-table__checkbox input[type=\"checkbox\"], select') && (row = (0, _getParent2.default)(target, 'tbody tr', this.el))) {\n                  if (!(row.querySelector('.spark-table__checkbox input[type=\"checkbox\"]') || {}).disabled) {\n                    this._toggleRowActive(row);\n                    actionTaken = true;\n                  }\n                }\n\n    if (clearClicked) {\n      this._clearClicked();\n    }\n\n    if (actionTaken) {\n      e.preventDefault();\n    }\n  };\n\n  /**\n   * When the change event fires on our element.\n   * @param {Object} e\n   */\n\n\n  Table.prototype._onChange = function _onChange(e) {\n\n    var target = e.target || e.srcElement;\n    var row;\n    var selectAll;\n\n    // Select all rows checkbox. We have to invert the checked value here because it\n    // get toggled back in the select all call.\n    if (selectAll = (0, _getParent2.default)(target, '.spark-table__select-all', this.el)) {\n      target.checked = !target.checked;\n      this._toggleSelectAll(selectAll);\n    }\n    // Checkbox for a row\n    else if ((0, _matches2.default)(target, '.spark-table__checkbox input[type=\"checkbox\"]') && (row = (0, _getParent2.default)(target, 'tbody tr', this.el))) {\n        this._toggleRowActive(row);\n      }\n  };\n\n  /**\n   * If this is a spreadsheet, whenever a field gains focus, highlight its parent.\n   * @param {Object} e\n   */\n\n\n  Table.prototype._onFocus = function _onFocus(e) {\n\n    var target = e.target || e.srcElement;\n\n    if (!this.isSpreadsheet || !(0, _matches2.default)(target, 'input:not([type=\"checkbox\"]), select')) {\n      return;\n    }\n\n    var td = (0, _getParent2.default)(target, 'td', this.el);\n    (0, _addClass2.default)(td, 'focus');\n  };\n\n  /**\n   * If this is a spreadsheet, whenever a field gains focus, highlight its parent.\n   * @param {Object} e\n   */\n\n\n  Table.prototype._onBlur = function _onBlur(e) {\n\n    if (!this.isSpreadsheet) {\n      return;\n    }\n\n    var target = e.target || e.srcElement;\n    var td = (0, _getParent2.default)(target, 'td', this.el);\n    (0, _removeClass2.default)(td, 'focus');\n    this._deactivateInput(target);\n  };\n\n  /**\n   * When a key is pressed, if this is a spreadsheet then we should detect\n   * enter or arrow keys.\n   * @param {Object} e\n   */\n\n\n  Table.prototype._onKeydown = function _onKeydown(e) {\n\n    var target = e.target || e.srcElement;\n\n    if (!this.isSpreadsheet || !(0, _matches2.default)(target, 'input:not([type=\"checkbox\"]), select')) {\n      return;\n    }\n\n    var code = e.keyCode || e.which;\n\n    switch (code) {\n      case this._keyCodes.ENTER:\n        this._activateInputOrFocusDown(target);\n        break;\n      case this._keyCodes.ESCAPE:\n        this._deactivateInput(target);\n        break;\n      case this._keyCodes.DOWN:\n        this._focusDown(target);\n        break;\n      case this._keyCodes.UP:\n        this._focusUp(target);\n        break;\n      case this._keyCodes.LEFT:\n        this._focusLeft(target);\n        break;\n      case this._keyCodes.RIGHT:\n        this._focusRight(target);\n        break;\n    }\n  };\n\n  /**\n   * Listen for a touch and hold on an input.\n   * @param {Object} e\n   */\n\n\n  Table.prototype._onTouchstart = function _onTouchstart(e) {\n\n    var target = e.target || e.srcElement;\n\n    if (!this.isSpreadsheet || !(0, _matches2.default)(target, 'input:not([type=\"checkbox\"])')) {\n      return;\n    }\n\n    this._touchStartEl = target;\n    this._touchStartTime = Date.now();\n    this._touchStartTimer = setTimeout(this._onTouchHold.bind(this), 1000);\n  };\n\n  /**\n   * Listen for the end of a touch to cancel the hold timer.\n   * @param {Object} e\n   */\n\n\n  Table.prototype._onTouchend = function _onTouchend(e) {\n\n    var target = e.target || e.srcElement;\n\n    if (!this._touchStartEl || target !== this._touchStartEl) {\n      return;\n    }\n\n    this._touchStartEl = null;\n    this._touchStartTime = null;\n    clearTimeout(this._touchStartTimer);\n  };\n\n  /**\n   * When the user has held on an input for the defined amount of time.\n   */\n\n\n  Table.prototype._onTouchHold = function _onTouchHold() {\n\n    this._activateInput(this._touchStartEl);\n\n    this._touchStartEl = null;\n    this._touchStartTime = null;\n    clearTimeout(this._touchStartTimer);\n  };\n\n  /**\n   * When the mouse is depressed.\n   * @param {Object} e\n   */\n\n\n  Table.prototype._onMouseDown = function _onMouseDown(e) {\n\n    var target = e.target || e.srcElement;\n\n    if (!this.isResizable || !(0, _matches2.default)(target, '.spark-table__resize')) {\n      return;\n    }\n\n    e.preventDefault();\n\n    this._lastScreenX = e.screenX;\n\n    this._sizeColumns('px', true);\n\n    this._resizingEl = target.parentNode;\n    var index = this._resizeEls.indexOf(this._resizingEl);\n\n    if ((0, _hasClass2.default)(target, 'spark-table__resize--left')) {\n      this._resizingEl = this._resizeEls[index - 1];\n    }\n\n    if (!this._resizingEl) {\n      return;\n    }\n\n    this._addResizeListeners();\n  };\n\n  /**\n   * When the mouse moves after being depressed, resize the columns.\n   * @param {Object} e\n   */\n\n\n  Table.prototype._onMouseMove = function _onMouseMove(e) {\n\n    var x = e.screenX;\n    var d = x - this._lastScreenX;\n\n    // No delta change\n    if (!d) {\n      return;\n    }\n\n    e.preventDefault();\n\n    var w = this._resizingEl.offsetWidth;\n    var tW = this.tableEl.offsetWidth;\n    var newW = w + d;\n    var newTW = tW + d;\n\n    this._resizingEl.style.width = newW + 'px';\n    this.tableEl.style.width = newTW + 'px';\n\n    // Size was not affected because we're too small\n    if (this._resizingEl.offsetWidth === w || this.tableEl.offsetWidth < this.tableEl.parentNode.offsetWidth) {\n      this._resizingEl.style.width = w + 'px';\n      this.tableEl.style.width = tW + 'px';\n    }\n\n    this._lastScreenX = x;\n  };\n\n  /**\n   * When the mouse is released, stop tracking mouse move events and\n   * convert table sizes to percentages.\n   * @param {Object} e\n   */\n\n\n  Table.prototype._onMouseUp = function _onMouseUp() {\n    this._sizeColumns('%', true);\n    this.tableEl.style.width = this.tableEl.offsetWidth / this.tableEl.parentNode.offsetWidth * 100 + '%';\n    this._removeResizeListeners();\n  };\n\n  return Table;\n}(_base2.default);\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nTable.prototype._whitelistedParams = ['isSpreadsheet', 'isEditRows', 'isResizable', 'confirmDelete', 'onRowSave', 'onRowDelete'];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nTable.prototype.defaults = {\n  el: null,\n  tableEl: null,\n  isSpreadsheet: null,\n  isEditRows: null,\n  isResizable: null,\n  onRowSave: null,\n  onRowDelete: null,\n  confirmDelete: null,\n  _expands: null,\n  _keyCodes: {\n    ENTER: 13,\n    UP: 38,\n    DOWN: 40,\n    LEFT: 37,\n    RIGHT: 39,\n    ESCAPE: 27\n  },\n  _editingCount: 0,\n  _lastClickTime: 0,\n  _lastClickEl: null,\n  _lastScreenX: 0,\n  _touchStartTime: 0,\n  _touchStartEl: null,\n  _resizeEls: null,\n  _resizingEl: null,\n  _sizeColumnsRun: false,\n  _onClickBound: null,\n  _onChangeBound: null,\n  _onFocusBound: null,\n  _onBlurBound: null,\n  _onKeydownBound: null,\n  _onTouchstartBound: null,\n  _onTouchendBound: null,\n  _onMouseDownBound: null,\n  _onMouseMoveBound: null,\n  _onMouseUpBound: null\n};\n\nexports.default = Table;\nmodule.exports = exports['default'];\n//# sourceMappingURL=table.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _outerHeight = require('../dom/outer-height');\n\nvar _outerHeight2 = _interopRequireDefault(_outerHeight);\n\nvar _addClass = require('../dom/add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('../dom/remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nvar _hasClass = require('../dom/has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _toggleClass = require('../dom/toggle-class');\n\nvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar noop = function noop() {}; /**\n                                * # Animate Height\n                                * Animate the height of an element since we can't do this w/ pure CSS. Sigh.\n                                *\n                                * @example\n                                * animateHeight({\n                                *   el: ...,\n                                *   toggleEl: ...,\n                                *   // Optional params\n                                *   action: 'collapse'|'expand',\n                                *   heightAnimationClass: 'spark-animate-height',\n                                *   opacityAnimationClass: 'spark-animate-opacity',\n                                *   toggleProperty: 'display'|'overflow'|'visibility',\n                                *   toggleValue: 'block'|'none'|'visible'|'hidden',\n                                *   animationDuration: 250\n                                * });\n                                *\n                                * @module helpers/animation/height.js\n                                */\n\nvar runningAnimations = {\n  els: [],\n  completeCallbacks: []\n};\n\n/**\n * Get the inverse toggle value\n * @param  {String} property\n * @param  {String} originalValue\n * @return {String}\n */\nfunction getInverseToggleValue(el, property, originalValue) {\n\n  // Get the value to toggle to for the given property\n  switch (property) {\n    case 'overflow':\n    case 'visibility':\n      return originalValue === 'visible' ? 'hidden' : 'visible';\n    default:\n      return originalValue === 'block' || originalValue === 'inline-block' ? 'none' : 'block';\n  }\n}\n\n/**\n * When an animation is complete, clean up and run the callback.\n * @param  {Object} params\n */\nfunction onComplete(params) {\n\n  // Reset toggle el visibility\n  if (params.toggleClassName) {\n    (0, _toggleClass2.default)(params.el, params.toggleClassName, !params.collapse);\n  } else {\n    params.toggleEl.style[params.toggleProperty] = '';\n  }\n\n  // Remove the height property\n  params.el.style.height = '';\n  params.toggleEl.style.height = '';\n  params.toggleEl.style.marginBottom = '';\n  params.toggleEl.style.marginTop = '';\n\n  // Remove the spark-animate-height class so the transitions no longer apply\n  (0, _removeClass2.default)(params.el, params.heightAnimationClass);\n  (0, _removeClass2.default)(params.toggleEl, params.heightAnimationClass);\n\n  // Run the callback\n  params.onComplete();\n\n  // Remove the element and callback from their respective arrays\n  var runningIndex = runningAnimations.els.indexOf(params.el);\n  runningAnimations.els.splice(runningIndex, 1);\n  runningAnimations.completeCallbacks.splice(runningIndex, 1);\n}\n\n/**\n * @param {Object} params\n */\nfunction animateHeight(params) {\n\n  params = params || {};\n\n  var el = params.el;\n\n  if (!el) {\n    return;\n  }\n\n  var collapse = params.action && params.action === 'collapse';\n  var heightAnimationClass = params.heightAnimationClass || 'spark-animate-height';\n\n  // Allow for elements to be passed or selector strings\n  var toggleEl = typeof params.toggleEl === 'string' ? el.querySelector(params.toggleEl) : params.toggleEl;\n\n  // No element to be switching with toggling so we can't determine the desired height to animate to.\n  if (!toggleEl || (0, _hasClass2.default)(el, 'spark-no-animate')) {\n    return;\n  }\n\n  var toggleClassName = params.toggleClass;\n\n  // The style property to use when toggling visibility\n  var toggleProperty = params.toggleProperty || 'display';\n  var toggleStyles = window.getComputedStyle(toggleEl);\n  var originalToggleValue = toggleStyles[toggleProperty];\n  var toggleValue = params.toggleValue || getInverseToggleValue(toggleProperty, originalToggleValue);\n\n  // If we are already animating, stop now.\n  var runningIndex = runningAnimations.els.indexOf(el);\n  if (runningIndex !== -1) {\n\n    var completeCallback = runningAnimations.completeCallbacks[runningIndex];\n    if (completeCallback) {\n      clearTimeout(completeCallback);\n    }\n\n    onComplete({\n      el: el,\n      toggleEl: toggleEl,\n      onComplete: params.onComplete || noop,\n      collapse: collapse,\n      toggleProperty: toggleProperty,\n      toggleClassName: toggleClassName,\n      toggleValue: toggleValue,\n      heightAnimationClass: heightAnimationClass\n    });\n  }\n\n  // Store the current height\n  var originalHeight = (0, _outerHeight2.default)(el);\n\n  // Toggle the visible property\n  if (toggleClassName) {\n    (0, _toggleClass2.default)(el, toggleClassName, !collapse);\n  } else {\n    toggleEl.style[toggleProperty] = toggleValue;\n  }\n\n  // When measuring the size for a collapse, we have to wait a tic for it to be\n  // accurate. Not sure why. Ugh.\n  if (collapse) {\n    setTimeout(runAnimation, 0);\n  } else {\n    runAnimation();\n  }\n\n  function runAnimation() {\n\n    // Now that the toggle el is taking up space, get the new height which we will be animating to\n    var targetElHeight = (0, _outerHeight2.default)(el);\n\n    // We need to store the original and target toggle element heights. They differ depending on\n    // whether we are going to expand or collapse.\n    var targetToggleElHeight = void 0;\n    var originalToggleElHeight = void 0;\n\n    // If we are collapsing, reset the toggle style and set it when we're done. Set the height so\n    // that we can animate down to 0 or up to the target height.\n    if (collapse) {\n\n      if (toggleClassName) {\n        (0, _removeClass2.default)(el, toggleClassName);\n      } else {\n        toggleEl.style[toggleProperty] = originalToggleValue;\n      }\n\n      originalToggleElHeight = (0, _outerHeight2.default)(toggleEl, toggleStyles);\n      targetToggleElHeight = 0;\n    } else {\n      targetToggleElHeight = (0, _outerHeight2.default)(toggleEl, toggleStyles);\n      originalToggleElHeight = 0;\n    }\n\n    // Set the original height\n    el.style.height = originalHeight + 'px';\n    toggleEl.style.height = originalToggleElHeight + 'px';\n    toggleEl.style.marginBottom = '0px';\n    toggleEl.style.marginTop = '0px';\n\n    // Add the spark-animate-height class which will setup the transition-property and duration\n    (0, _addClass2.default)(el, heightAnimationClass);\n    (0, _addClass2.default)(toggleEl, heightAnimationClass);\n\n    runningAnimations.els.push(el);\n\n    // We need to wait a tick to toggle the height or else the animation class won't function\n    setTimeout(function () {\n\n      // Set the height to the target height\n      el.style.height = targetElHeight + 'px';\n      toggleEl.style.height = targetToggleElHeight + 'px';\n\n      // Remove inline styles after the animation is complete\n      runningAnimations.completeCallbacks.push(setTimeout(function () {\n        onComplete({\n          el: el,\n          toggleEl: toggleEl,\n          onComplete: params.onComplete || noop,\n          collapse: collapse,\n          toggleProperty: toggleProperty,\n          toggleClassName: toggleClassName,\n          toggleValue: toggleValue,\n          heightAnimationClass: heightAnimationClass\n        });\n      }, params.animationDuration !== undefined ? params.animationDuration : 201));\n    }, 0);\n  }\n}\n\nexports.default = animateHeight;\nmodule.exports = exports['default'];\n//# sourceMappingURL=height.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _trim = require('../util/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nvar _hasClass = require('./has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * # Add Class\n * Add a class on an element.\n *\n * @param {Element|Array} el An element or array of elements to update.\n * @param {String} name\n * @return {Element}\n *\n * @module helpers/dom/add-class.js\n */\n\nvar ws = /\\s+/;\nvar cleanup = /\\s{2,}/g;\n\nfunction addClass(el, name) {\n\n  if (arguments.length === 2 && typeof name === 'string') {\n    name = (0, _trim2.default)(name).split(ws);\n  } else {\n    name = name instanceof Array ? name : Array.prototype.slice.call(arguments, 1);\n  }\n\n  // optimize for best, most common case\n  if (name.length === 1 && el.classList) {\n    if (name[0]) {\n      el.classList.add(name[0]);\n    }\n    return el;\n  }\n\n  var toAdd = [];\n  var i = 0;\n  var l = name.length;\n  var item = void 0;\n  var clsName = typeof el.className === 'string' ? el.className : el.getAttribute ? el.getAttribute('class') : '';\n\n  // see if we have anything to add\n  for (; i < l; i++) {\n    item = name[i];\n    if (item && !(0, _hasClass2.default)(clsName, item)) {\n      toAdd.push(item);\n    }\n  }\n\n  if (toAdd.length) {\n    if (typeof el.className === 'string') {\n      el.className = (0, _trim2.default)((clsName + ' ' + toAdd.join(' ')).replace(cleanup, ' '));\n    } else if (el.setAttribute) {\n      el.setAttribute('class', (0, _trim2.default)((clsName + ' ' + toAdd.join(' ')).replace(cleanup, ' ')));\n    }\n  }\n\n  return el;\n}\n\nexports.default = addClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=add-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * # Has Class\n * See if an element has a class.\n *\n * @param {Element|String} el\n * @param {String} name\n * @return {Boolean}\n *\n * @module helpers/dom/has-class.js\n */\nfunction hasClass(el, name) {\n  var cName = ((typeof el === 'undefined' ? 'undefined' : _typeof(el)) === 'object' ? el.className || el.getAttribute && el.getAttribute('class') || '' : el || '').replace(/[\\t\\r\\n\\f]/g, ' ');\n  return (' ' + cName + ' ').indexOf(' ' + name + ' ') !== -1;\n}\n\nexports.default = hasClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=has-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _each = require('../util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar props = ['marginTop', 'marginBottom', 'borderTop', 'borderBottom']; /**\n                                                                         * # Outer Height\n                                                                         * Get the outer height of an element (including margin and border)\n                                                                         *\n                                                                         * @param {Element} el\n                                                                         * @param {Object} styles Optional Already have computed styles? Pass them in.\n                                                                         *\n                                                                         * @example\n                                                                         * outerHeight(el, computedStyles);\n                                                                         *\n                                                                         * @module helpers/outer-height.js\n                                                                         */\n\n\nfunction outerHeight(el, styles) {\n\n  styles = styles || window.getComputedStyle(el);\n\n  var height = el.clientHeight;\n\n  (0, _each2.default)(props, function (prop) {\n    height += parseInt(styles[prop] || 0, 10);\n  });\n\n  return height;\n}\n\nexports.default = outerHeight;\nmodule.exports = exports['default'];\n//# sourceMappingURL=outer-height.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _trim = require('../util/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ws = /\\s+/; /**\n                 * # Remove Class\n                 * Remove a class on an element.\n                 *\n                 * @param {Element|Array} el An element or array of elements to update.\n                 * @param {String} name\n                 * @return {Element}\n                 *\n                 * @module helpers/dom/remove-class.js\n                 */\n\nvar cleanup = /\\s{2,}/g;\n\nfunction removeClass(el, name) {\n\n  if (arguments.length === 2 && typeof name === 'string') {\n    name = (0, _trim2.default)(name).split(ws);\n  } else {\n    name = name instanceof Array ? name : Array.prototype.slice.call(arguments, 1);\n  }\n\n  // optimize for best, most common case\n  if (name.length === 1 && el.classList) {\n    if (name[0]) el.classList.remove(name[0]);\n    return el;\n  }\n\n  // store two copies\n  var clsName = ' ' + (typeof el.className === 'string' ? el.className : el.getAttribute ? el.getAttribute('class') : '') + ' ';\n  var result = clsName;\n  var current = void 0;\n  var start = void 0;\n  for (var i = 0, l = name.length; i < l; i++) {\n    current = name[i];\n    start = current ? result.indexOf(' ' + current + ' ') : -1;\n    if (start !== -1) {\n      start += 1;\n      result = result.slice(0, start) + result.slice(start + current.length);\n    }\n  }\n\n  // only write if modified\n  if (clsName !== result) {\n    if (typeof el.className === 'string') {\n      el.className = (0, _trim2.default)(result.replace(cleanup, ' '));\n    } else if (el.setAttribute) {\n      el.setAttribute('class', (0, _trim2.default)(result.replace(cleanup, ' ')));\n    }\n  }\n\n  return el;\n}\n\nexports.default = removeClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=remove-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _hasClass = require('./has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _addClass = require('./add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('./remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction toggleClass(el, name, enable) {\n\n  if (!el) {\n    return;\n  }\n\n  // If we're passed an array, toggle the class on each.\n  if (el instanceof NodeList || el instanceof Array) {\n\n    for (var i = 0, len = el.length; i < len; i++) {\n      toggleClass(el[i], name, enable);\n    }\n\n    return;\n  }\n\n  var action = void 0;\n  if (enable !== undefined) {\n    enable = typeof enable === 'function' ? enable.call(null, el) : enable;\n    action = enable ? 'add' : 'remove';\n  } else {\n    action = (0, _hasClass2.default)(el, name) ? 'remove' : 'add';\n  }\n\n  return (action === 'add' ? _addClass2.default : _removeClass2.default)(el, name);\n} /**\n   * # Toggle Class\n   * Toggle a class on an element given a condition.\n   *\n   * @param {Element|Array} el An element or array of elements to update.\n   * @param {String} name\n   * @param {Boolean} enable\n   * @return {Element}\n   *\n   * @module  helpers/dom/toggle-class.js\n   */\n\nexports.default = toggleClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=toggle-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clear = exports.restore = exports.store = undefined;\n\nvar _each = require('../util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Find all the form elements inside a given element and run a callback on each.\n * @param  {Element} el\n * @param  {Function} cb\n */\nfunction findAll(el, cb) {\n  (0, _each2.default)(el.querySelectorAll('input, select, textarea'), function (i) {\n    cb(i);\n  });\n}\n\n/**\n * Find all the form elements inside a given element and store their current\n * value as a data attribute.\n * @param {Element} el\n */\n/**\n * # Form Data\n * Store and restore the data of form fields inline so it can be reverted.\n *\n * @example\n * formData.store(el);\n * formData.revert(el);\n *\n * @module helpers/form/form-data.js\n */\n\nfunction store(el) {\n\n  findAll(el, function (input) {\n\n    var name = input.nodeName.toLowerCase();\n    var value = void 0;\n\n    switch (name) {\n      case 'select':\n        value = input.selectedIndex;\n        break;\n      default:\n        value = encodeURI(input.value);\n        break;\n    }\n\n    input.setAttribute('data-stored-value', value);\n  });\n}\n\n/**\n * Revert all the form elements inside of a given element.\n * @param {Element} el\n */\nfunction restore(el) {\n\n  findAll(el, function (input) {\n\n    var name = input.nodeName.toLowerCase();\n    var value = input.getAttribute('data-stored-value');\n\n    // No stored value\n    if (!value && value !== '') {\n      return;\n    }\n\n    switch (name) {\n      case 'select':\n        input.options[value].selected = true;\n        break;\n      default:\n        input.value = decodeURI(value);\n        break;\n    }\n\n    input.removeAttribute('data-stored-value');\n  });\n}\n\n/**\n * Clear the stored data on all the form elements inside of a given element.\n * @param {Element} el\n */\nfunction clear(el) {\n  findAll(el, function (input) {\n    input.removeAttribute('data-stored-value');\n  });\n}\n\nexports.store = store;\nexports.restore = restore;\nexports.clear = clear;\n//# sourceMappingURL=form-data.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Set Caret\n * Set the caret position in an input.\n *\n * @param {Element} el\n * @param {Number} start\n * @param {Number} end\n *\n * @example\n * setCaret(el, -1);\n * setCaret(el, 2);\n *\n * @module helpers/form/set-caret.js\n */\nfunction setCaret(el, start, end) {\n\n  var originalActiveElement = document.activeElement;\n\n  start = start < 0 ? el.value.length + start + 1 : start;\n  end = end < 0 ? el.value.length + end + 1 : end;\n\n  // IE support\n  if (document.selection) {\n    el.focus();\n    var sel = document.selection.createRange();\n    sel.moveStart('character', -el.value.length);\n    sel.moveStart('character', start);\n    sel.moveEnd('character', end !== undefined ? end : start);\n    sel.select();\n  } else if (el.selectionStart || el.selectionStart === 0) {\n    el.selectionStart = start;\n    el.selectionEnd = end !== undefined ? end : start;\n  }\n\n  // If we didn't have focus, go back to focusing on the original\n  if (originalActiveElement !== el) {\n    el.blur();\n    originalActiveElement.focus();\n  }\n\n  return {\n    start: start,\n    end: end\n  };\n}\n\nexports.default = setCaret;\nmodule.exports = exports['default'];\n//# sourceMappingURL=set-caret.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Get Index\n * Get the index of an element in a nodelist.\n *\n * @param {NodeList} els\n * @param {Node} el\n * @return {Number}\n *\n * @module helpers/traversal/get-index.js\n */\nfunction getIndex(els, el) {\n  return Array.prototype.indexOf.call(els, el);\n}\n\nexports.default = getIndex;\nmodule.exports = exports[\"default\"];\n//# sourceMappingURL=get-index.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _matches = require('./matches');\n\nvar _matches2 = _interopRequireDefault(_matches);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getParent(parent, query, limitEl) {\n\n  limitEl = limitEl instanceof Array ? limitEl : [limitEl || document.body];\n\n  while (parent) {\n\n    if ((0, _matches2.default)(parent, query)) {\n      return parent;\n    }\n\n    if (limitEl.indexOf(parent) !== -1) {\n      return false;\n    }\n\n    parent = parent.parentNode;\n  }\n\n  return false;\n} /**\n   * # Get Parent\n   * See if an element has another element for a parent.\n   *\n   * @param {Element} parent\n   * @param {String} query\n   * @param {Array|Element} limitEl The last element we should check.\n   * @return {Boolean|Element}\n   *\n   * @module helpers/traversal/get-parent.js\n   */\n\nexports.default = getParent;\nmodule.exports = exports['default'];\n//# sourceMappingURL=get-parent.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _matches = require('./matches');\n\nvar _matches2 = _interopRequireDefault(_matches);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getSiblingAfter(el, query) {\n\n  while (el = el.nextElementSibling) {\n    if ((0, _matches2.default)(el, query)) {\n      return el;\n    }\n  }\n\n  return null;\n} /**\n   * # Get Sibling After\n   * Get a nearest sibling after the given element which matches\n   * the given query selector.\n   *\n   * @param {Element} el\n   * @param {String} query\n   * @return {Element|Null}\n   *\n   * @module helpers/traversal/get-sibling-after.js\n   */\n\nexports.default = getSiblingAfter;\nmodule.exports = exports['default'];\n//# sourceMappingURL=get-sibling-after.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _matches = require('./matches');\n\nvar _matches2 = _interopRequireDefault(_matches);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getSiblingBefore(el, query) {\n\n  while (el = el.previousElementSibling) {\n    if ((0, _matches2.default)(el, query)) {\n      return el;\n    }\n  }\n\n  return null;\n} /**\n   * # Get Sibling Before\n   * Get a nearest sibling before the given element which matches\n   * the given query selector.\n   *\n   * @param {Element} el\n   * @param {String} query\n   * @return {Element|Null}\n   *\n   * @module helpers/traversal/get-sibling-before.js\n   */\n\nexports.default = getSiblingBefore;\nmodule.exports = exports['default'];\n//# sourceMappingURL=get-sibling-before.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Matches\n * See if an element matches a query selector.\n *\n * @param {Element} el\n * @param {String} query\n * @return {Boolean}\n *\n * @module helpers/traversal/matches.js\n */\nvar vendorMatch = typeof Element !== 'undefined' && (Element.prototype.matches || Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector);\n\nfunction matches(el, query) {\n\n  if (vendorMatch) return vendorMatch.call(el, query);\n\n  var nodes = el.parentNode ? el.parentNode.querySelectorAll(query) : [];\n\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i] === el) return true;\n  }\n\n  return false;\n}\n\nexports.default = matches;\nmodule.exports = exports['default'];\n//# sourceMappingURL=matches.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Each\n * Apply a callback function to a list of any kind: Array, NodeList, HTMLCollection or Object.\n *\n * @param {Array|NodeList|HTMLCollection|Object} list\n * @param {Function} cb\n *\n * @example\n * each([], callback);\n * each(el.children, callback);\n * each(el.childNodes, callback);\n * each({}, callback);\n *\n * @module helpers/util/each.js\n */\nfunction each(list, cb) {\n\n  if (!list) {\n    return;\n  }\n\n  if (typeof cb !== 'function') {\n    throw new Error('Cannot invoke `each` without a callback!');\n  }\n\n  var i = 0;\n  var len = list.length;\n\n  // Object\n  if (len === undefined) {\n    for (i in list) {\n      if (i !== 'prototype' && list.hasOwnProperty(i)) {\n        cb(i, list[i]);\n      }\n    }\n  }\n  // Array-like\n  else {\n      for (; i < len; i++) {\n        cb(list[i]);\n      }\n    }\n}\n\nexports.default = each;\nmodule.exports = exports['default'];\n//# sourceMappingURL=each.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Trim\n * Trim whitespace on a string.\n *\n * @param {String} str\n *\n * @module helpers/util/trim.js\n */\n\nvar trimRE = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\nfunction trim(str) {\n  return str.replace(trimRE, '');\n}\n\nexports.default = trim;\nmodule.exports = exports['default'];\n//# sourceMappingURL=trim.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}