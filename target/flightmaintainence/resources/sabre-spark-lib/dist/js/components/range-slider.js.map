{"version":3,"sources":["js/dist/components/node_modules/browser-pack/_prelude.js","js/dist/components/js/dist/components/base.js","js/dist/components/js/dist/components/range-slider.js","js/dist/components/js/dist/helpers/animation/height.js","js/dist/components/js/dist/helpers/dom/add-class.js","js/dist/components/js/dist/helpers/dom/has-class.js","js/dist/components/js/dist/helpers/dom/make-element.js","js/dist/components/js/dist/helpers/dom/offset.js","js/dist/components/js/dist/helpers/dom/outer-height.js","js/dist/components/js/dist/helpers/dom/remove-class.js","js/dist/components/js/dist/helpers/dom/toggle-class.js","js/dist/components/js/dist/helpers/traversal/get-index.js","js/dist/components/js/dist/helpers/util/each.js","js/dist/components/js/dist/helpers/util/mixin.js","js/dist/components/js/dist/helpers/util/trim.js","js/dist/components/js/dist/mixins/messaging.js","js/dist/components/js/dist/mixins/validation.js"],"names":[],"mappingsxhhCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvfile":"range-slider.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _each = require('../helpers/util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * # Base Component\n                                                                                                                                                           * The base class for Spark JS components. This class should never be\n                                                                                                                                                           * instantiated directly.\n                                                                                                                                                           *\n                                                                                                                                                           * @param {Element} el\n                                                                                                                                                           * @param {Object} params\n                                                                                                                                                           *\n                                                                                                                                                           * @module components/base.js\n                                                                                                                                                           */\n\nvar noop = function noop() {};\n\nvar Base = function () {\n\n  /**\n   * Set parameters and cache elements.\n   */\n  function Base(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Base);\n\n    if (params.elRequired && !el) {\n      return;\n    }\n\n    this.setParams(this.defaults || {}, true);\n    this.setParams(params);\n    (this._cacheElements || noop).call(this, el, params);\n    (this._parseParams || noop).call(this);\n  }\n\n  /**\n   * Remove the component from the DOM and prepare for garbage collection by dereferencing values.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n\n\n  Base.prototype.remove = function remove(leaveElement) {\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    if (!leaveElement && this.el && this.el.parentNode) {\n      this.el.parentNode.removeChild(this.el);\n    }\n\n    this.unsetParams(this.defaults);\n\n    return this;\n  };\n\n  /**\n   * Update the component to use a new element or reparse from\n   * the existing element.\n   * @param {Element} el Optional\n   * @param {Object} params Optional\n   */\n\n\n  Base.prototype.update = function update(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    (this._cacheElements || noop).call(this, el || this.el, params);\n    (this._parseParams || noop).call(this);\n\n    if (this._addEventListeners) {\n      this._addEventListeners();\n    }\n\n    return this;\n  };\n\n  /**\n   * Set a hash of parameters if they're whitelisted or we're told to force the set.\n   * This is used to set initial values as well as set passed parameters.\n   * @param {Object} params\n   * @param {Boolean} force Force setting even if the param is not whitelisted.\n   */\n\n\n  Base.prototype.setParams = function setParams(params, force) {\n    var _this = this;\n\n    (0, _each2.default)(params, function (k, v) {\n      if (_this._whitelistedParams.indexOf(k) !== -1 || force) {\n        _this[k] = v;\n      }\n    });\n\n    return this;\n  };\n\n  /**\n   * Unset all parameters.\n   * @param {Array|Object} keys\n   * @param {Object} scope The object to unset the params from. Defaults to `this`.\n   */\n\n\n  Base.prototype.unsetParams = function unsetParams(keys, scope) {\n\n    keys = keys instanceof Array ? keys : Object.keys(keys);\n    scope = scope || this;\n    (0, _each2.default)(keys, function (k) {\n      delete scope[k];\n    });\n\n    return this;\n  };\n\n  return Base;\n}();\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nBase.prototype._whitelistedParams = [];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nBase.prototype.defaults = {};\n\nexports.default = Base;\nmodule.exports = exports['default'];\n//# sourceMappingURL=base.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _toggleClass = require('../helpers/dom/toggle-class');\n\nvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\nvar _offset = require('../helpers/dom/offset');\n\nvar _offset2 = _interopRequireDefault(_offset);\n\nvar _getIndex = require('../helpers/traversal/get-index');\n\nvar _getIndex2 = _interopRequireDefault(_getIndex);\n\nvar _messaging = require('../mixins/messaging');\n\nvar _messaging2 = _interopRequireDefault(_messaging);\n\nvar _mixin = require('../helpers/util/mixin');\n\nvar _mixin2 = _interopRequireDefault(_mixin);\n\nvar _validation = require('../mixins/validation');\n\nvar _validation2 = _interopRequireDefault(_validation);\n\nvar _makeElement = require('../helpers/dom/make-element');\n\nvar _makeElement2 = _interopRequireDefault(_makeElement);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\nangeSlider\ndual slider for number inputs.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @todo : probably a lot of refactoring that could happen between this and slider.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * new RangeSlider(el, {\nptional. Slide along the x or y-axis?\nisX: true,\nonChange: function(inst, index, value){},\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * });\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module components/range-slider.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar noop = function noop() {};\n\nvar RangeSlider = function (_BaseComponent) {\n  _inherits(RangeSlider, _BaseComponent);\n\n  /**\n   * RangeSlider constructor.\n   * @param {Element} el\n   * @param {Object} params\n   */\n  function RangeSlider(el) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, RangeSlider);\n\n    params.elRequired = true;\n\n    if (!(_this = _possibleConstructorReturn(this, _BaseComponent.call(this, el, params)), _this)) {\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this._bindEventListenerCallbacks();\n    _this._addEventListeners();\n    _this._updateDisabledClasses();\n    return _possibleConstructorReturn(_this);\n  }\n\n  /**\n   * Start the slider moving.\n   * @param {Number} index The index of the handle or input element.\n   * @param {Number} position The position of the pointer.\n   * @param {String} type Optional Which type of events to listen for.\n   */\n\n\n  RangeSlider.prototype.start = function start(index, position, type) {\n\n    // Noop if we're disabled or an invalid index was passed\n    if (index < 0 || this.inputEls[index].getAttribute('disabled') !== null) {\n      return this;\n    }\n\n    this._addMoveEventListeners(type || 'mouse');\n    this._cacheSize();\n\n    this.isActive = this.isActive || [];\n    this.isActive[index] = true;\n\n    this.currentIndex = index;\n    this._updateActiveClasses(index);\n    this._updateDisabledClasses();\n    this._oldVal = this.values[index];\n    this.move(position);\n\n    return this;\n  };\n\n  /**\n   * Move the value to a given position\n   * @param {Number} position\n   * @param {Boolean} force Force the move Optional\n   */\n\n\n  RangeSlider.prototype.move = function move(position, force) {\n\n    // Noop if an invalid index was passed we haven't yet started dragging\n    if ((!position || !this.isActive || !this.isActive[this.currentIndex]) && !force) {\n      return this;\n    }\n\n    // Treat positions beyond the boundaries as the boundaries\n    if (this.isX) {\n\n      // Too far left\n      if (position < this.offsetLeft) {\n        position = this.offsetLeft;\n      }\n      // Too far right\n      else if (position > this.offsetLeft + this.width) {\n          position = this.offsetLeft + this.width;\n        }\n    } else {\n\n      // Too far top\n      if (position < this.offsetTop) {\n        position = this.offsetTop;\n      }\n      // Too far bottom\n      else if (position > this.offsetTop + this.height) {\n          position = this.offsetTop + this.height;\n        }\n    }\n\n    // The percentage of the new position relative to slider-container width or height.\n    var percentage = this.isX ? (position - this.offsetLeft) / (this.width - this.handleSize) : (position - this.offsetTop) / this.height;\n\n    // The value of the input as a percentage of the value range.\n    this.setValue(this.currentIndex, Math.round((percentage - this.handleSizePercentage / 2) * (this.highestMax - this.lowestMin)) + this.lowestMin);\n\n    return this;\n  };\n\n  /**\n   * Stop listening to movements.\n   * @param {Number} index Optional The index of the handle or input element.\n   * @param {String} type Optional Which type of events to listen for.\n   */\n\n\n  RangeSlider.prototype.stop = function stop(index, type) {\n\n    if (index !== null && index !== undefined && this.currentIndex !== index) {\n      return this;\n    }\n\n    this.isActive[this.currentIndex] = false;\n    this.lastIndex = this.currentIndex;\n\n    if (this._oldVal !== this.values[this.currentIndex]) {\n      (this.onChange || noop)(this.currentIndex, this.values[this.currentIndex], this);\n    }\n\n    this.currentIndex = null;\n    this._updateActiveClasses(index);\n    this._removeMoveEventListeners(type || 'mouse');\n\n    return this;\n  };\n\n  /**\n   * Set the value of the handle.\n   * @param {Number} index The index of the input element.\n   * @param {Number} value\n   */\n\n\n  RangeSlider.prototype.setValue = function setValue(index, value) {\n\n    // We don't have an input element at that index, so something went wrong.\n    if (!this.inputEls[index]) {\n      throw new Error('Cannot set value on a slider input element with an index of ' + index + '. That element does not exist.');\n    }\n\n    // Move in increments if we have a defined step size\n    if (this.steps[index]) {\n      value = value - value % this.steps[index];\n    }\n\n    this.values = this.values || [];\n\n    // Check bounds of the new value\n    if (value > this.maxes[index]) {\n      value = this.maxes[index];\n    } else if (value < this.mins[index]) {\n      value = this.mins[index];\n    }\n\n    // If there is an input that comes after this, make sure we aren't going beyond it\n    if (this.values[index + 1] !== undefined && value >= this.values[index + 1]) {\n      value = this.values[index + 1] - (this.steps[index] || 1);\n    }\n    // If there is an input that comes before this, make sure we aren't going below it\n    else if (this.values[index - 1] !== undefined && value <= this.values[index - 1]) {\n        value = this.values[index - 1] + (this.steps[index] || 1);\n      }\n\n    // If there is an onWillChange callback, run it. If it returns\n    // false, then this new value should be considered invalid.\n    if (typeof this.onWillChange === 'function') {\n      var change = this.onWillChange(index, value, this);\n      if (typeof change === 'number') {\n        value = change;\n      }\n    }\n\n    // Store value\n    this.values[index] = value;\n\n    // Update elements\n    this.inputEls[index].value = this.values[index];\n    this.handleEls[index].setAttribute('data-value', this.values[index]);\n    this.handleEls[index].setAttribute('aria-valuenow', this.values[index]);\n    this.handleEls[index].setAttribute('aria-valuetext', this.values[index]);\n\n    // Set the percentage\n    this.percentages = this.percentages || [];\n    this.percentages[index] = (this.values[index] - this.lowestMin) / (this.highestMax - this.lowestMin);\n\n    // Update the position of the handle\n    this._updateHandlePosition(index);\n\n    return this;\n  };\n\n  /**\n   * Get the value.\n   * @param {Number} index\n   * @return {Number}\n   */\n\n\n  RangeSlider.prototype.getValue = function getValue(index) {\n\n    // We don't have an input element at that index, so something went wrong.\n    if (!this.inputEls[index]) {\n      throw new Error('Cannot get value from a slider input element with an index of ' + index + '. That element does not exist.');\n    }\n\n    return this.values[index];\n  };\n\n  /**\n   * Clear the value.\n   * @param {Number} index\n   */\n\n\n  RangeSlider.prototype.clearValue = function clearValue(index) {\n    return this.setValue(index, 0);\n  };\n\n  /**\n   * Enable the input.\n   * @param {Number} index\n   */\n\n\n  RangeSlider.prototype.enable = function enable(index) {\n\n    // We don't have an input element at that index, so something went wrong.\n    if (!this.inputEls[index] || !this.handleEls[index]) {\n      throw new Error('Cannot get value from a slider input element with an index of ' + index + '. That element does not exist.');\n    }\n\n    this.inputEls[index].removeAttribute('disabled');\n    this.inputEls[index].removeAttribute('tabindex');\n    this.handleEls[index].removeAttribute('disabled');\n    this.handleEls[index].removeAttribute('tabindex');\n    this._updateDisabledClasses();\n\n    return this;\n  };\n\n  /**\n   * Disable the input.\n   * @param {Number} index\n   */\n\n\n  RangeSlider.prototype.disable = function disable(index) {\n\n    // We don't have an input element at that index, so something went wrong.\n    if (!this.inputEls[index] || !this.handleEls[index]) {\n      throw new Error('Cannot get value from a slider input element with an index of ' + index + '. That element does not exist.');\n    }\n\n    this.inputEls[index].setAttribute('disabled', '');\n    this.inputEls[index].setAttribute('tabindex', '-1');\n    this.handleEls[index].setAttribute('disabled', '');\n    this.handleEls[index].setAttribute('tabindex', '-1');\n    this._updateDisabledClasses();\n\n    return this;\n  };\n\n  /**\n   * Increment the value by the step size.\n   * @param {Boolean} useMultiplier Optional Increment by a multiplied version of the step\n   */\n\n\n  RangeSlider.prototype.increment = function increment(useMultiplier) {\n    return this.setValue(this.currentIndex, this.values[this.currentIndex] + this.steps[this.currentIndex] * (useMultiplier ? 10 : 1));\n  };\n\n  /**\n   * Decrement the value by the step size.\n   * @param {Boolean} useMultiplier Optional Increment by a multiplied version of the step\n   */\n\n\n  RangeSlider.prototype.decrement = function decrement(useMultiplier) {\n    return this.setValue(this.currentIndex, this.values[this.currentIndex] - this.steps[this.currentIndex] * (useMultiplier ? 10 : 1));\n  };\n\n  /**\n   * Remove the element from the DOM and prepare for garbage collection by dereferencing values.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n\n\n  RangeSlider.prototype.remove = function remove(leaveElement) {\n    this._removeMoveEventListeners('touch');\n    this._removeMoveEventListeners('mouse');\n    this._removeMoveEventListeners('keyboard');\n    return _BaseComponent.prototype.remove.call(this, leaveElement);\n  };\n\n  /**\n   * Update the component to use a new element or reparse from\n   * the existing element.\n   * @param {Element} el Optional\n   */\n\n\n  RangeSlider.prototype.update = function update(el) {\n\n    this._removeEventListeners();\n    this._removeMoveEventListeners('touch');\n    this._removeMoveEventListeners('mouse');\n    this._removeMoveEventListeners('keyboard');\n\n    this._cacheElements(el);\n    this._addEventListeners();\n    this._updateDisabledClasses();\n\n    for (var i = 0; i < this.handleEls.length; i++) {\n      this._updateHandlePosition(i);\n    }\n\n    return this;\n  };\n\n  /**\n   * Store a reference to the whole slider, as well as the\n   * input element. Also, get some default values from the input\n   * element (min, max, steps).\n   * @param {Element} el\n   */\n\n\n  RangeSlider.prototype._cacheElements = function _cacheElements(el) {\n\n    this.el = el;\n    this.controlsEl = this.el.querySelector('.spark-slider__controls');\n    this.inputEls = this.el.querySelectorAll('input[type=\"number\"]');\n    this.handleEls = this.el.querySelectorAll('.spark-slider__handle');\n    this.trackEl = this.el.querySelector('.spark-slider__track');\n    this.trackFillEl = this.trackEl.querySelector('.spark-slider__track-fill');\n\n    this.messageEl = this.el.querySelector('.spark-slider__message') || (0, _makeElement2.default)('<span class=\"spark-slider__message\"></span>');\n\n    if (!this.inputEls || this.inputEls.length <= 1) {\n      throw new Error('Tried to create a slider instance without two number inputs.');\n    }\n\n    if (!this.handleEls || this.handleEls.length <= 1) {\n      throw new Error('Tried to create a slider instance without two handle buttons.');\n    }\n\n    var lowestMin = Infinity;\n    var highestMax = -Infinity;\n    var i = 0;\n    var len = this.inputEls.length;\n    var values = [];\n    this.mins = [];\n    this.maxes = [];\n    this.steps = [];\n\n    // Cache the size of the element so that we can properly set values on handles.\n    this._cacheSize();\n\n    // Set the minimum and max values for each element. Also set any predefined value.\n    for (; i < len; i++) {\n      var parsedMin = parseInt(this.inputEls[i].getAttribute('min'), 10);\n      this.mins[i] = parsedMin === 0 ? parsedMin : parsedMin || null; // Ternary operator to prevent null when we have actual 0 value\n\n      var parsedMax = parseInt(this.inputEls[i].getAttribute('max'), 10);\n      this.maxes[i] = parsedMax === 0 ? parsedMax : parsedMax || null; // Ternary operator to prevent null when we have actual 0 value\n\n      this.steps[i] = parseInt(this.inputEls[i].getAttribute('step'), 10) || 1;\n\n      if (this.mins[i] < lowestMin) {\n        lowestMin = this.mins[i];\n      }\n\n      if (this.maxes[i] > highestMax) {\n        highestMax = this.maxes[i];\n      }\n    }\n\n    this.lowestMin = lowestMin;\n    this.highestMax = highestMax;\n\n    i = 0;\n\n    // If we have a default value, set it.\n    for (; i < len; i++) {\n\n      values[i] = parseInt(this.inputEls[i].getAttribute('value'), 10);\n\n      // It's a number\n      if (!isNaN(values[i])) {\n        this.setValue(i, values[i]);\n      } else {\n\n        // Set as the minimum unless this is the last handle.\n        if (i + 1 === len) {\n          this.setValue(i, this.maxes[i] !== null ? this.maxes[i] : 0);\n        } else {\n          this.setValue(i, this.mins[i] !== null ? this.mins[i] : 0);\n        }\n      }\n    }\n  };\n\n  /**\n   * Save the element dimensions.\n   */\n\n\n  RangeSlider.prototype._cacheSize = function _cacheSize() {\n    this.width = this.trackEl.offsetWidth;\n    this.height = this.trackEl.offsetHeight;\n\n    this.handleSize = this.isX ? this.handleEls[0].offsetWidth : this.handleEls[0].offsetHeight;\n    this.handleSizePercentage = this.isX ? this.handleEls[0].offsetWidth / this.width : this.handleEls[0].offsetHeight / this.height;\n\n    var offset = (0, _offset2.default)(this.controlsEl);\n    this.offsetLeft = offset.left;\n    this.offsetTop = offset.top;\n  };\n\n  /**\n   * Set the position of the handle.\n   * @param {Number} index The index of the handle element to update.\n   */\n\n\n  RangeSlider.prototype._updateHandlePosition = function _updateHandlePosition(index) {\n    // Track and Track-Fill elements\n    var firstPercentage = this.percentages[0];\n    var lastPercentage = this.percentages[this.percentages.length - 1];\n    this.trackFillEl.setAttribute('style', 'width: ' + (lastPercentage - firstPercentage) * 100 + '%; left: ' + firstPercentage * 100 + '%;');\n\n    // Handle position\n    var handlePos = this.handleSize / 2 + (this.values[index] - this.lowestMin) * ((this.width - this.handleSize) / (this.highestMax - this.lowestMin));\n    var handlePosPercentage = handlePos / this.width * 100;\n    this.handleEls[index].setAttribute('style', 'left: ' + handlePosPercentage + '%;');\n  };\n\n  /**\n   * Update the active class on the handle.\n   * @param {Number} index The index of the handle element to update.\n   */\n\n\n  RangeSlider.prototype._updateActiveClasses = function _updateActiveClasses(index) {\n\n    (0, _toggleClass2.default)(this.handleEls, 'active', false);\n    (0, _toggleClass2.default)(this.handleEls[index], 'active', this.isActive[index]);\n\n    if (this.isActive.indexOf(true) !== -1) {\n      this.el.setAttribute('data-active-index', this.isActive.indexOf(true));\n    } else {\n      this.el.removeAttribute('data-active-index');\n    }\n  };\n\n  /**\n   * Update which handles are disabled.\n   */\n\n\n  RangeSlider.prototype._updateDisabledClasses = function _updateDisabledClasses() {\n\n    var disabledCount = 0;\n\n    for (var i = 0, len = this.inputEls.length; i < len; i++) {\n\n      if (this.inputEls[i].getAttribute('disabled') !== null) {\n        (0, _toggleClass2.default)(this.handleEls[i], 'disabled', true);\n        disabledCount++;\n      } else {\n        (0, _toggleClass2.default)(this.handleEls[i], 'disabled', false);\n      }\n    }\n\n    (0, _toggleClass2.default)(this.el, 'all-disabled', disabledCount === this.handleEls.length);\n  };\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n\n\n  RangeSlider.prototype._bindEventListenerCallbacks = function _bindEventListenerCallbacks() {\n\n    this._onTouchStartBound = this._onTouchStart.bind(this);\n    this._onTouchMoveBound = this._onTouchMove.bind(this);\n    this._onTouchEndBound = this._onTouchEnd.bind(this);\n\n    this._onClickBound = this._onClick.bind(this);\n    this._onMouseDownBound = this._onMouseDown.bind(this);\n    this._onMouseMoveBound = this._onMouseMove.bind(this);\n    this._onMouseUpBound = this._onMouseUp.bind(this);\n\n    this._onFocusBound = this._onFocus.bind(this);\n    this._onKeydownBound = this._onKeydown.bind(this);\n    this._onBlurBound = this._onBlur.bind(this);\n\n    this._onChangeBound = this._onChange.bind(this);\n\n    this._onResizeBound = this._onResize.bind(this);\n\n    this._onVisibleChildrenBound = this._onVisibleChildren.bind(this);\n  };\n\n  /**\n   * Add event listeners for touchstart and mouse click.\n   */\n\n\n  RangeSlider.prototype._addEventListeners = function _addEventListeners() {\n\n    this.controlsEl.addEventListener('touchstart', this._onTouchStartBound);\n    this.controlsEl.addEventListener('mousedown', this._onMouseDownBound);\n\n    for (var i = 0, len = this.inputEls.length; i < len; i++) {\n      this.inputEls[i].addEventListener('change', this._onChangeBound);\n    }\n\n    for (var j = 0, len2 = this.handleEls.length; j < len2; j++) {\n      this.handleEls[j].addEventListener('focus', this._onFocusBound);\n      this.handleEls[j].addEventListener('click', this._onClickBound);\n    }\n\n    document.addEventListener('spark.visible-children', this._onVisibleChildrenBound, true);\n\n    window.addEventListener('resize', this._onResizeBound);\n    window.addEventListener('orientationchange', this._onResizeBound);\n  };\n\n  /**\n   * Remove event listeners for touchstart and mouse click.\n   */\n\n\n  RangeSlider.prototype._removeEventListeners = function _removeEventListeners() {\n\n    this.controlsEl.removeEventListener('touchstart', this._onTouchStartBound);\n    this.controlsEl.removeEventListener('mousedown', this._onMouseDownBound);\n\n    document.removeEventListener('spark.visible-children', this._onVisibleChildrenBound);\n\n    for (var i = 0, len = this.inputEls.length; i < len; i++) {\n      this.inputEls[i].removeEventListener('change', this._onChangeBound);\n    }\n\n    for (var j = 0, len2 = this.handleEls.length; i < len2; i++) {\n      this.handleEls[j].removeEventListener('focus', this._onFocusBound);\n      this.handleEls[j].removeEventListener('click', this._onClickBound);\n    }\n\n    window.removeEventListener('resize', this._onResizeBound);\n    window.removeEventListener('orientationchange', this._onResizeBound);\n  };\n\n  /**\n   * Add event listeners for touchmove, touchend, mousemove and mouseup.\n   * We add these to the window so that the user can move off of the element\n   * but keep dragging the slider handle. Otherwise it's really hard to\n   * use the slider unless it's massive.\n   * @param {String} type Which type of listeners to add\n   */\n\n\n  RangeSlider.prototype._addMoveEventListeners = function _addMoveEventListeners(type) {\n\n    // Only listen for events of the type we asked for.\n    switch (type) {\n      case 'mouse':\n        window.addEventListener('mousemove', this._onMouseMoveBound);\n        window.addEventListener('mouseout', this._onMouseOutBound);\n        window.addEventListener('mouseup', this._onMouseUpBound);\n        break;\n      case 'touch':\n        window.addEventListener('touchmove', this._onTouchMoveBound);\n        window.addEventListener('touchend', this._onTouchEndBound);\n        break;\n      case 'keyboard':\n        window.addEventListener('keydown', this._onKeydownBound);\n        for (var i = 0, len = this.handleEls.length; i < len; i++) {\n          this.handleEls[i].addEventListener('blur', this._onBlurBound);\n        }\n        break;\n    }\n  };\n\n  /**\n   * Remove event listeners for move events.\n   * @param {String} type Which type of listeners to add\n   */\n\n\n  RangeSlider.prototype._removeMoveEventListeners = function _removeMoveEventListeners(type) {\n\n    // Only unbind events of the type we asked for.\n    switch (type) {\n      case 'mouse':\n        window.removeEventListener('mousemove', this._onMouseMoveBound);\n        window.removeEventListener('mouseup', this._onMouseUpBound);\n        break;\n      case 'touch':\n        window.removeEventListener('touchmove', this._onTouchMoveBound);\n        window.removeEventListener('touchend', this._onTouchEndBound);\n        break;\n      case 'keyboard':\n        window.removeEventListener('keydown', this._onKeydownBound);\n        for (var i = 0, len = this.handleEls.length; i < len; i++) {\n          this.handleEls[i].removeEventListener('blur', this._onBlurBound);\n        }\n        break;\n    }\n  };\n\n  /**\n   * When the touch starts, start the slider.\n   * @param {Object} e\n   */\n\n\n  RangeSlider.prototype._onTouchStart = function _onTouchStart(e) {\n    this.start((0, _getIndex2.default)(this.handleEls, e.target), this.isX ? e.touches[0].pageX : e.touches[0].pageY, 'touch');\n  };\n\n  /**\n   * When the window fires a touchmove event, adjust our value accordingly\n   * @param {Object} e\n   */\n\n\n  RangeSlider.prototype._onTouchMove = function _onTouchMove(e) {\n\n    if (!this.isActive[this.currentIndex]) {\n      return;\n    }\n\n    e.preventDefault();\n\n    this.move(this.isX ? e.touches[0].pageX : e.touches[0].pageY);\n  };\n\n  /**\n   * When the window fires a touchend event, stop tracking touches\n   * @param {Object} e\n   */\n\n\n  RangeSlider.prototype._onTouchEnd = function _onTouchEnd(e) {\n\n    if (!this.isActive[this.currentIndex]) {\n      return;\n    }\n\n    e.preventDefault();\n\n    this.stop((0, _getIndex2.default)(this.handleEls, e.target), 'touch');\n  };\n\n  /**\n   * When the mouse presses down, start the slider.\n   * @param {Object} e\n   */\n\n\n  RangeSlider.prototype._onMouseDown = function _onMouseDown(e) {\n    this.start((0, _getIndex2.default)(this.handleEls, e.target), this.isX ? e.pageX : e.pageY, 'mouse');\n  };\n\n  /**\n   * When the window fires a mousemove event, adjust our value accordingly\n   * @param {Object} e\n   */\n\n\n  RangeSlider.prototype._onMouseMove = function _onMouseMove(e) {\n\n    if (!this.isActive[this.currentIndex]) {\n      return;\n    }\n\n    e.preventDefault();\n\n    this.move(this.isX ? e.pageX : e.pageY);\n  };\n\n  /**\n   * When the window fires a mouseup event, stop tracking\n   * @param {Object} e\n   */\n\n\n  RangeSlider.prototype._onMouseUp = function _onMouseUp() {\n\n    if (!this.isActive[this.currentIndex]) {\n      return;\n    }\n\n    this.stop(null, 'mouse');\n  };\n\n  /**\n   * Handle the spark.visible-children event\n   * @param {Object} e\n   */\n\n\n  RangeSlider.prototype._onVisibleChildren = function _onVisibleChildren(e) {\n    if (e.target.contains(this.el)) {\n      window.setTimeout(function () {\n        this._onResize();\n      }.bind(this), 0);\n    }\n  };\n\n  /**\n   * When the window resizes, cache size values for the slider.\n   * @param {Object} e\n   */\n\n\n  RangeSlider.prototype._onResize = function _onResize() {\n    this._cacheSize();\n    this._updateDisabledClasses();\n    for (var i = 0; i < this.handleEls.length; i++) {\n      this._updateHandlePosition(i);\n    }\n  };\n\n  /**\n   * When the element receives focus, start listening for keyboard events\n   * @param {Object} e\n   */\n\n\n  RangeSlider.prototype._onFocus = function _onFocus(e) {\n    this.start((0, _getIndex2.default)(this.handleEls, e.target), null, 'keyboard');\n  };\n\n  /**\n   * When a key is pressed, see if it's one of the Arrow, Page up, Page down, Home\n   * or End keys move the handle accordingly. If the shift key is pressed in combination\n   * with the arrow keys, we'll increment and decrement by bigger values.\n   * @param {Object} e\n   */\n\n\n  RangeSlider.prototype._onKeydown = function _onKeydown(e) {\n\n    if ((0, _getIndex2.default)(this.inputEls, e.target) !== -1) {\n      return;\n    }\n\n    if (e.keyCode === 39 || e.keyCode === 38) {\n      // Right or Up arrow\n      this.increment(e.shiftKey);\n    } else if (e.keyCode === 37 || e.keyCode === 40) {\n      // Left or down arrow\n      this.decrement(e.shiftKey);\n    } else if (e.keyCode === 33) {\n      // Page Up\n      this.increment(true);\n    } else if (e.keyCode === 34) {\n      // Page Down\n      this.decrement(true);\n    } else if (e.keyCode === 35) {\n      // End\n      this.setValue(this.max);\n    } else if (e.keyCode === 36) {\n      // Home\n      this.setValue(this.min);\n    }\n  };\n\n  /**\n   * When the element loses focus, stop listening for keyboard events\n   * @param {Object} e\n   */\n\n\n  RangeSlider.prototype._onBlur = function _onBlur(e) {\n    this.stop((0, _getIndex2.default)(this.handleEls, e.target), 'keyboard');\n  };\n\n  /**\n   * When the input value changes, set our interal value if it's not already our value.\n   * @param {Object} e\n   */\n\n\n  RangeSlider.prototype._onChange = function _onChange(e) {\n\n    var index = (0, _getIndex2.default)(this.inputEls, e.target);\n\n    this._updateDisabledClasses();\n\n    if (e.target.value !== this.values[index]) {\n      this.setValue(index, e.target.value);\n    }\n    (this.onChange || noop)(index, this.values[index], this);\n  };\n\n  /**\n   * Prevent click events on the button. This way we don't accidentally submit the form.\n   * @param {Object} e\n   */\n\n\n  RangeSlider.prototype._onClick = function _onClick(e) {\n    e.preventDefault();\n  };\n\n  return RangeSlider;\n}(_base2.default);\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nRangeSlider.prototype._whitelistedParams = ['isX', 'validate', 'onValidate', 'onChange', 'onWillChange'];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nRangeSlider.prototype.defaults = {\n  el: null,\n  messageEl: null,\n  controlsEl: null,\n  inputEls: null,\n  handleEls: null,\n  trackEl: null,\n  trackFillEl: null,\n  isActive: null,\n  isX: true,\n  onValidate: null,\n  onChange: null,\n  onWillChange: null,\n  position: 0,\n  width: 0,\n  height: 0,\n  mins: null,\n  maxes: null,\n  steps: null,\n  values: null,\n  percentages: null,\n  offsetLeft: 0,\n  offsetTop: 0,\n  handleSizePercentage: 0,\n  currentIndex: null,\n  lastIndex: null,\n  _oldVal: null,\n  _onTouchStartBound: null,\n  _onTouchMoveBound: null,\n  _onTouchEndBound: null,\n  _onMouseDownBound: null,\n  _onMouseMoveBound: null,\n  _onMouseUpBound: null,\n  _onMouseOutBound: null,\n  _onFocusBound: null,\n  _onKeydownBound: null,\n  _onBlurBound: null,\n  _onChangeBound: null,\n  _onResizeBound: null,\n  _onClickBound: null,\n  _onVisibleChildrenBound: null\n};\n\n(0, _mixin2.default)(RangeSlider.prototype, _messaging2.default, _validation2.default);\n\nexports.default = RangeSlider;\nmodule.exports = exports['default'];\n//# sourceMappingURL=range-slider.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _outerHeight = require('../dom/outer-height');\n\nvar _outerHeight2 = _interopRequireDefault(_outerHeight);\n\nvar _addClass = require('../dom/add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('../dom/remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nvar _hasClass = require('../dom/has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _toggleClass = require('../dom/toggle-class');\n\nvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar noop = function noop() {}; /**\n                                * # Animate Height\n                                * Animate the height of an element since we can't do this w/ pure CSS. Sigh.\n                                *\n                                * @example\n                                * animateHeight({\n                                *   el: ...,\n                                *   toggleEl: ...,\n                                *   // Optional params\n                                *   action: 'collapse'|'expand',\n                                *   heightAnimationClass: 'spark-animate-height',\n                                *   opacityAnimationClass: 'spark-animate-opacity',\n                                *   toggleProperty: 'display'|'overflow'|'visibility',\n                                *   toggleValue: 'block'|'none'|'visible'|'hidden',\n                                *   animationDuration: 250\n                                * });\n                                *\n                                * @module helpers/animation/height.js\n                                */\n\nvar runningAnimations = {\n  els: [],\n  completeCallbacks: []\n};\n\n/**\n * Get the inverse toggle value\n * @param  {String} property\n * @param  {String} originalValue\n * @return {String}\n */\nfunction getInverseToggleValue(el, property, originalValue) {\n\n  // Get the value to toggle to for the given property\n  switch (property) {\n    case 'overflow':\n    case 'visibility':\n      return originalValue === 'visible' ? 'hidden' : 'visible';\n    default:\n      return originalValue === 'block' || originalValue === 'inline-block' ? 'none' : 'block';\n  }\n}\n\n/**\n * When an animation is complete, clean up and run the callback.\n * @param  {Object} params\n */\nfunction onComplete(params) {\n\n  // Reset toggle el visibility\n  if (params.toggleClassName) {\n    (0, _toggleClass2.default)(params.el, params.toggleClassName, !params.collapse);\n  } else {\n    params.toggleEl.style[params.toggleProperty] = '';\n  }\n\n  // Remove the height property\n  params.el.style.height = '';\n  params.toggleEl.style.height = '';\n  params.toggleEl.style.marginBottom = '';\n  params.toggleEl.style.marginTop = '';\n\n  // Remove the spark-animate-height class so the transitions no longer apply\n  (0, _removeClass2.default)(params.el, params.heightAnimationClass);\n  (0, _removeClass2.default)(params.toggleEl, params.heightAnimationClass);\n\n  // Run the callback\n  params.onComplete();\n\n  // Remove the element and callback from their respective arrays\n  var runningIndex = runningAnimations.els.indexOf(params.el);\n  runningAnimations.els.splice(runningIndex, 1);\n  runningAnimations.completeCallbacks.splice(runningIndex, 1);\n}\n\n/**\n * @param {Object} params\n */\nfunction animateHeight(params) {\n\n  params = params || {};\n\n  var el = params.el;\n\n  if (!el) {\n    return;\n  }\n\n  var collapse = params.action && params.action === 'collapse';\n  var heightAnimationClass = params.heightAnimationClass || 'spark-animate-height';\n\n  // Allow for elements to be passed or selector strings\n  var toggleEl = typeof params.toggleEl === 'string' ? el.querySelector(params.toggleEl) : params.toggleEl;\n\n  // No element to be switching with toggling so we can't determine the desired height to animate to.\n  if (!toggleEl || (0, _hasClass2.default)(el, 'spark-no-animate')) {\n    return;\n  }\n\n  var toggleClassName = params.toggleClass;\n\n  // The style property to use when toggling visibility\n  var toggleProperty = params.toggleProperty || 'display';\n  var toggleStyles = window.getComputedStyle(toggleEl);\n  var originalToggleValue = toggleStyles[toggleProperty];\n  var toggleValue = params.toggleValue || getInverseToggleValue(toggleProperty, originalToggleValue);\n\n  // If we are already animating, stop now.\n  var runningIndex = runningAnimations.els.indexOf(el);\n  if (runningIndex !== -1) {\n\n    var completeCallback = runningAnimations.completeCallbacks[runningIndex];\n    if (completeCallback) {\n      clearTimeout(completeCallback);\n    }\n\n    onComplete({\n      el: el,\n      toggleEl: toggleEl,\n      onComplete: params.onComplete || noop,\n      collapse: collapse,\n      toggleProperty: toggleProperty,\n      toggleClassName: toggleClassName,\n      toggleValue: toggleValue,\n      heightAnimationClass: heightAnimationClass\n    });\n  }\n\n  // Store the current height\n  var originalHeight = (0, _outerHeight2.default)(el);\n\n  // Toggle the visible property\n  if (toggleClassName) {\n    (0, _toggleClass2.default)(el, toggleClassName, !collapse);\n  } else {\n    toggleEl.style[toggleProperty] = toggleValue;\n  }\n\n  // When measuring the size for a collapse, we have to wait a tic for it to be\n  // accurate. Not sure why. Ugh.\n  if (collapse) {\n    setTimeout(runAnimation, 0);\n  } else {\n    runAnimation();\n  }\n\n  function runAnimation() {\n\n    // Now that the toggle el is taking up space, get the new height which we will be animating to\n    var targetElHeight = (0, _outerHeight2.default)(el);\n\n    // We need to store the original and target toggle element heights. They differ depending on\n    // whether we are going to expand or collapse.\n    var targetToggleElHeight = void 0;\n    var originalToggleElHeight = void 0;\n\n    // If we are collapsing, reset the toggle style and set it when we're done. Set the height so\n    // that we can animate down to 0 or up to the target height.\n    if (collapse) {\n\n      if (toggleClassName) {\n        (0, _removeClass2.default)(el, toggleClassName);\n      } else {\n        toggleEl.style[toggleProperty] = originalToggleValue;\n      }\n\n      originalToggleElHeight = (0, _outerHeight2.default)(toggleEl, toggleStyles);\n      targetToggleElHeight = 0;\n    } else {\n      targetToggleElHeight = (0, _outerHeight2.default)(toggleEl, toggleStyles);\n      originalToggleElHeight = 0;\n    }\n\n    // Set the original height\n    el.style.height = originalHeight + 'px';\n    toggleEl.style.height = originalToggleElHeight + 'px';\n    toggleEl.style.marginBottom = '0px';\n    toggleEl.style.marginTop = '0px';\n\n    // Add the spark-animate-height class which will setup the transition-property and duration\n    (0, _addClass2.default)(el, heightAnimationClass);\n    (0, _addClass2.default)(toggleEl, heightAnimationClass);\n\n    runningAnimations.els.push(el);\n\n    // We need to wait a tick to toggle the height or else the animation class won't function\n    setTimeout(function () {\n\n      // Set the height to the target height\n      el.style.height = targetElHeight + 'px';\n      toggleEl.style.height = targetToggleElHeight + 'px';\n\n      // Remove inline styles after the animation is complete\n      runningAnimations.completeCallbacks.push(setTimeout(function () {\n        onComplete({\n          el: el,\n          toggleEl: toggleEl,\n          onComplete: params.onComplete || noop,\n          collapse: collapse,\n          toggleProperty: toggleProperty,\n          toggleClassName: toggleClassName,\n          toggleValue: toggleValue,\n          heightAnimationClass: heightAnimationClass\n        });\n      }, params.animationDuration !== undefined ? params.animationDuration : 201));\n    }, 0);\n  }\n}\n\nexports.default = animateHeight;\nmodule.exports = exports['default'];\n//# sourceMappingURL=height.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _trim = require('../util/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nvar _hasClass = require('./has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * # Add Class\n * Add a class on an element.\n *\n * @param {Element|Array} el An element or array of elements to update.\n * @param {String} name\n * @return {Element}\n *\n * @module helpers/dom/add-class.js\n */\n\nvar ws = /\\s+/;\nvar cleanup = /\\s{2,}/g;\n\nfunction addClass(el, name) {\n\n  if (arguments.length === 2 && typeof name === 'string') {\n    name = (0, _trim2.default)(name).split(ws);\n  } else {\n    name = name instanceof Array ? name : Array.prototype.slice.call(arguments, 1);\n  }\n\n  // optimize for best, most common case\n  if (name.length === 1 && el.classList) {\n    if (name[0]) {\n      el.classList.add(name[0]);\n    }\n    return el;\n  }\n\n  var toAdd = [];\n  var i = 0;\n  var l = name.length;\n  var item = void 0;\n  var clsName = typeof el.className === 'string' ? el.className : el.getAttribute ? el.getAttribute('class') : '';\n\n  // see if we have anything to add\n  for (; i < l; i++) {\n    item = name[i];\n    if (item && !(0, _hasClass2.default)(clsName, item)) {\n      toAdd.push(item);\n    }\n  }\n\n  if (toAdd.length) {\n    if (typeof el.className === 'string') {\n      el.className = (0, _trim2.default)((clsName + ' ' + toAdd.join(' ')).replace(cleanup, ' '));\n    } else if (el.setAttribute) {\n      el.setAttribute('class', (0, _trim2.default)((clsName + ' ' + toAdd.join(' ')).replace(cleanup, ' ')));\n    }\n  }\n\n  return el;\n}\n\nexports.default = addClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=add-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * # Has Class\n * See if an element has a class.\n *\n * @param {Element|String} el\n * @param {String} name\n * @return {Boolean}\n *\n * @module helpers/dom/has-class.js\n */\nfunction hasClass(el, name) {\n  var cName = ((typeof el === 'undefined' ? 'undefined' : _typeof(el)) === 'object' ? el.className || el.getAttribute && el.getAttribute('class') || '' : el || '').replace(/[\\t\\r\\n\\f]/g, ' ');\n  return (' ' + cName + ' ').indexOf(' ' + name + ' ') !== -1;\n}\n\nexports.default = hasClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=has-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (html) {\n\n  if (!html) {\n    throw new Error('Cannot create element with no HTML!');\n  }\n\n  var el = document.createElement('div');\n  el.innerHTML = html;\n  var el2 = el.children[0];\n  el2.parentNode.removeChild(el2);\n  return el2;\n};\n\nmodule.exports = exports['default']; /**\n                                      * # Make Element\n                                      * Make en element using a string of HTML.\n                                      *\n                                      * @example\n                                      * makeElement('<div></div>');\n                                      *\n                                      * @module helpers/make-element.js\n                                      *\n                                      * @param {String} html\n                                      * @return {Element}\n                                      */\n//# sourceMappingURL=make-element.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Offset Position\n * Get the offset position of the element.\n *\n * @param {Element} el\n * @param {Boolean} viewPortOffset The offset relative to the viewport, not page.\n * @return {Object}\n *\n * @module helpers/dom/offset.js\n */\nfunction offset(el, viewPortOffset) {\n\n  var rect = {\n    top: 0,\n    left: 0\n  };\n\n  // Native implementation\n  if (el.getBoundingClientRect) {\n\n    var bounding = el.getBoundingClientRect();\n    rect.left = bounding.left;\n    rect.top = bounding.top;\n\n    if (!viewPortOffset) {\n      rect.left += typeof window.scrollX !== 'undefined' ? window.scrollX : window.pageXOffset;\n      rect.top += typeof window.scrollY !== 'undefined' ? window.scrollY : window.pageYOffset;\n    }\n  } else {\n    var x = 0,\n        y = 0;\n    do {\n      x += el.offsetLeft - (!viewPortOffset ? el.scrollLeft : 0);\n      y += el.offsetTop - (!viewPortOffset ? el.scrollTop : 0);\n    } while (el = el.offsetParent);\n\n    rect.left = x;\n    rect.top = y;\n  }\n\n  return rect;\n}\n\nexports.default = offset;\nmodule.exports = exports['default'];\n//# sourceMappingURL=offset.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _each = require('../util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar props = ['marginTop', 'marginBottom', 'borderTop', 'borderBottom']; /**\n                                                                         * # Outer Height\n                                                                         * Get the outer height of an element (including margin and border)\n                                                                         *\n                                                                         * @param {Element} el\n                                                                         * @param {Object} styles Optional Already have computed styles? Pass them in.\n                                                                         *\n                                                                         * @example\n                                                                         * outerHeight(el, computedStyles);\n                                                                         *\n                                                                         * @module helpers/outer-height.js\n                                                                         */\n\n\nfunction outerHeight(el, styles) {\n\n  styles = styles || window.getComputedStyle(el);\n\n  var height = el.clientHeight;\n\n  (0, _each2.default)(props, function (prop) {\n    height += parseInt(styles[prop] || 0, 10);\n  });\n\n  return height;\n}\n\nexports.default = outerHeight;\nmodule.exports = exports['default'];\n//# sourceMappingURL=outer-height.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _trim = require('../util/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ws = /\\s+/; /**\n                 * # Remove Class\n                 * Remove a class on an element.\n                 *\n                 * @param {Element|Array} el An element or array of elements to update.\n                 * @param {String} name\n                 * @return {Element}\n                 *\n                 * @module helpers/dom/remove-class.js\n                 */\n\nvar cleanup = /\\s{2,}/g;\n\nfunction removeClass(el, name) {\n\n  if (arguments.length === 2 && typeof name === 'string') {\n    name = (0, _trim2.default)(name).split(ws);\n  } else {\n    name = name instanceof Array ? name : Array.prototype.slice.call(arguments, 1);\n  }\n\n  // optimize for best, most common case\n  if (name.length === 1 && el.classList) {\n    if (name[0]) el.classList.remove(name[0]);\n    return el;\n  }\n\n  // store two copies\n  var clsName = ' ' + (typeof el.className === 'string' ? el.className : el.getAttribute ? el.getAttribute('class') : '') + ' ';\n  var result = clsName;\n  var current = void 0;\n  var start = void 0;\n  for (var i = 0, l = name.length; i < l; i++) {\n    current = name[i];\n    start = current ? result.indexOf(' ' + current + ' ') : -1;\n    if (start !== -1) {\n      start += 1;\n      result = result.slice(0, start) + result.slice(start + current.length);\n    }\n  }\n\n  // only write if modified\n  if (clsName !== result) {\n    if (typeof el.className === 'string') {\n      el.className = (0, _trim2.default)(result.replace(cleanup, ' '));\n    } else if (el.setAttribute) {\n      el.setAttribute('class', (0, _trim2.default)(result.replace(cleanup, ' ')));\n    }\n  }\n\n  return el;\n}\n\nexports.default = removeClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=remove-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _hasClass = require('./has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _addClass = require('./add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('./remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction toggleClass(el, name, enable) {\n\n  if (!el) {\n    return;\n  }\n\n  // If we're passed an array, toggle the class on each.\n  if (el instanceof NodeList || el instanceof Array) {\n\n    for (var i = 0, len = el.length; i < len; i++) {\n      toggleClass(el[i], name, enable);\n    }\n\n    return;\n  }\n\n  var action = void 0;\n  if (enable !== undefined) {\n    enable = typeof enable === 'function' ? enable.call(null, el) : enable;\n    action = enable ? 'add' : 'remove';\n  } else {\n    action = (0, _hasClass2.default)(el, name) ? 'remove' : 'add';\n  }\n\n  return (action === 'add' ? _addClass2.default : _removeClass2.default)(el, name);\n} /**\n   * # Toggle Class\n   * Toggle a class on an element given a condition.\n   *\n   * @param {Element|Array} el An element or array of elements to update.\n   * @param {String} name\n   * @param {Boolean} enable\n   * @return {Element}\n   *\n   * @module  helpers/dom/toggle-class.js\n   */\n\nexports.default = toggleClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=toggle-class.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Get Index\n * Get the index of an element in a nodelist.\n *\n * @param {NodeList} els\n * @param {Node} el\n * @return {Number}\n *\n * @module helpers/traversal/get-index.js\n */\nfunction getIndex(els, el) {\n  return Array.prototype.indexOf.call(els, el);\n}\n\nexports.default = getIndex;\nmodule.exports = exports[\"default\"];\n//# sourceMappingURL=get-index.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Each\n * Apply a callback function to a list of any kind: Array, NodeList, HTMLCollection or Object.\n *\n * @param {Array|NodeList|HTMLCollection|Object} list\n * @param {Function} cb\n *\n * @example\n * each([], callback);\n * each(el.children, callback);\n * each(el.childNodes, callback);\n * each({}, callback);\n *\n * @module helpers/util/each.js\n */\nfunction each(list, cb) {\n\n  if (!list) {\n    return;\n  }\n\n  if (typeof cb !== 'function') {\n    throw new Error('Cannot invoke `each` without a callback!');\n  }\n\n  var i = 0;\n  var len = list.length;\n\n  // Object\n  if (len === undefined) {\n    for (i in list) {\n      if (i !== 'prototype' && list.hasOwnProperty(i)) {\n        cb(i, list[i]);\n      }\n    }\n  }\n  // Array-like\n  else {\n      for (; i < len; i++) {\n        cb(list[i]);\n      }\n    }\n}\n\nexports.default = each;\nmodule.exports = exports['default'];\n//# sourceMappingURL=each.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (proto) {\n  for (var _len = arguments.length, mixins = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    mixins[_key - 1] = arguments[_key];\n  }\n\n  (0, _each2.default)(mixins, function (mixin) {\n    for (var i in mixin) {\n      if (mixin.hasOwnProperty(i) && !proto[i]) proto[i] = mixin[i];\n    }\n  });\n};\n\nvar _each = require('./each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * # Mixin\n * Apply a mixin, or mixins, to an Object\n *\n * @example\n * mixin(proto, mix, mix2)\n *\n * @module helpers/util/mixin.js\n */\nmodule.exports = exports['default'];\n//# sourceMappingURL=mixin.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Trim\n * Trim whitespace on a string.\n *\n * @param {String} str\n *\n * @module helpers/util/trim.js\n */\n\nvar trimRE = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\nfunction trim(str) {\n  return str.replace(trimRE, '');\n}\n\nexports.default = trim;\nmodule.exports = exports['default'];\n//# sourceMappingURL=trim.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _height = require('../helpers/animation/height');\n\nvar _height2 = _interopRequireDefault(_height);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n\n  /**\n   * Set the error state.\n   * @param {String} message Optional\n   */\n  setError: function setError(message) {\n\n    // Animate down\n    if (!this._isMessageVisible()) {\n      this._showMessage();\n    }\n\n    this.clearWarning();\n    this.clearSuccess();\n\n    this.el.setAttribute('data-error', true);\n\n    if (message) {\n      this.setMessage(message);\n    }\n\n    return this;\n  },\n\n\n  /**\n   * Set the error state.\n   */\n  clearError: function clearError() {\n    this.el.removeAttribute('data-error', true);\n    return this;\n  },\n\n\n  /**\n   * Set the warning state.\n   * @param {String} message Optional\n   */\n  setWarning: function setWarning(message) {\n\n    // Animate down\n    if (!this._isMessageVisible()) {\n      this._showMessage();\n    }\n\n    this.clearError();\n    this.clearSuccess();\n\n    this.el.setAttribute('data-warning', true);\n\n    if (message) {\n      this.setMessage(message);\n    }\n\n    return this;\n  },\n\n\n  /**\n   * Set the error state.\n   */\n  clearWarning: function clearWarning() {\n    this.el.removeAttribute('data-warning', true);\n    return this;\n  },\n\n\n  /**\n   * Set the success state.\n   * @param {String} message Optional\n   */\n  setSuccess: function setSuccess(message) {\n\n    // Animate down\n    if (!this._isMessageVisible()) {\n      this._showMessage();\n    }\n\n    this.clearError();\n    this.clearWarning();\n\n    this.el.setAttribute('data-success', true);\n\n    if (message) {\n      this.setMessage(message);\n    }\n\n    return this;\n  },\n\n\n  /**\n   * Set the success state.\n   */\n  clearSuccess: function clearSuccess() {\n    this.el.removeAttribute('data-success', true);\n    return this;\n  },\n\n\n  /**\n   * Clear all messages.\n   */\n  clearMessages: function clearMessages() {\n    this._hideMessage(function () {\n      this.clearError();\n      this.clearWarning();\n      this.clearSuccess();\n    }.bind(this));\n    return this;\n  },\n\n\n  /**\n   * Set the message text.\n   * @param {String} message\n   */\n  setMessage: function setMessage(message) {\n    this.messageEl.innerHTML = message;\n    return this;\n  },\n\n\n  /**\n   * Show the message\n   */\n  _showMessage: function _showMessage() {\n\n    if (!this.messageEl.parentNode) {\n      this.el.appendChild(this.messageEl);\n    }\n\n    (0, _height2.default)({\n      el: this.el,\n      toggleEl: this.messageEl\n    });\n  },\n\n\n  /**\n   * Hide the message.\n   * @param {Function} callback\n   */\n  _hideMessage: function _hideMessage(callback) {\n\n    (0, _height2.default)({\n      el: this.el,\n      toggleEl: this.messageEl,\n      toggleValue: 'none',\n      action: 'collapse',\n      onComplete: callback\n    });\n  },\n\n\n  /**\n   * Is the message currently visible?\n   * @return {Boolean}\n   */\n  _isMessageVisible: function _isMessageVisible() {\n    return this.el.getAttribute('data-error') || this.el.getAttribute('data-warning') || this.el.getAttribute('data-success');\n  }\n}; /**\n    * # Messaging Mixin\n    * Add functionality for showing messages related to a form field.\n    *\n    * @example\n    * mixin(Component, messaging);\n    *\n    * @module mixin/messaging.js\n    */\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=messaging.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Validation Mixin\n * Add functionality for validating a form field's value.\n *\n * @example\n * mixin(Component, validation);\n *\n * @module mixin/validation.js\n */\n\nexports.default = {\n\n  /**\n   * Default validate function. This can be overridden by passing a\n   * custom validate method as a parameter. This really only helps out\n   * of the box for text inputs.\n   */\n  validate: function validate() {\n\n    var validate = this.validatePattern;\n\n    // Nothing to validate.\n    if (!this.onValidate || !validate) {\n      return this;\n    }\n\n    var re = new RegExp(validate);\n\n    this.onValidate(re.test(this.getValue()), this.getValue(), this);\n\n    return this;\n  }\n};\nmodule.exports = exports[\"default\"];\n//# sourceMappingURL=validation.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}