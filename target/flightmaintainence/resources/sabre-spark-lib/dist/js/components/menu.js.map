{"version":3,"sources":["js/dist/components/node_modules/browser-pack/_prelude.js","js/dist/components/js/dist/components/base.js","js/dist/components/js/dist/components/menu.js","js/dist/components/js/dist/helpers/animation/height.js","js/dist/components/js/dist/helpers/css/transform.js","js/dist/components/js/dist/helpers/dom/add-class.js","js/dist/components/js/dist/helpers/dom/has-class.js","js/dist/components/js/dist/helpers/dom/outer-height.js","js/dist/components/js/dist/helpers/dom/remove-class.js","js/dist/components/js/dist/helpers/dom/toggle-class.js","js/dist/components/js/dist/helpers/manipulation/wrap-element.js","js/dist/components/js/dist/helpers/traversal/get-child.js","js/dist/components/js/dist/helpers/traversal/get-parent.js","js/dist/components/js/dist/helpers/traversal/get-parents.js","js/dist/components/js/dist/helpers/traversal/has-parent.js","js/dist/components/js/dist/helpers/traversal/matches.js","js/dist/components/js/dist/helpers/util/each.js","js/dist/components/js/dist/helpers/util/trim.js"],"names":[],"mappingsxJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClptCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"menu.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _each = require('../helpers/util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * # Base Component\n                                                                                                                                                           * The base class for Spark JS components. This class should never be\n                                                                                                                                                           * instantiated directly.\n                                                                                                                                                           *\n                                                                                                                                                           * @param {Element} el\n                                                                                                                                                           * @param {Object} params\n                                                                                                                                                           *\n                                                                                                                                                           * @module components/base.js\n                                                                                                                                                           */\n\nvar noop = function noop() {};\n\nvar Base = function () {\n\n  /**\n   * Set parameters and cache elements.\n   */\n  function Base(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Base);\n\n    if (params.elRequired && !el) {\n      return;\n    }\n\n    this.setParams(this.defaults || {}, true);\n    this.setParams(params);\n    (this._cacheElements || noop).call(this, el, params);\n    (this._parseParams || noop).call(this);\n  }\n\n  /**\n   * Remove the component from the DOM and prepare for garbage collection by dereferencing values.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n\n\n  Base.prototype.remove = function remove(leaveElement) {\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    if (!leaveElement && this.el && this.el.parentNode) {\n      this.el.parentNode.removeChild(this.el);\n    }\n\n    this.unsetParams(this.defaults);\n\n    return this;\n  };\n\n  /**\n   * Update the component to use a new element or reparse from\n   * the existing element.\n   * @param {Element} el Optional\n   * @param {Object} params Optional\n   */\n\n\n  Base.prototype.update = function update(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    (this._cacheElements || noop).call(this, el || this.el, params);\n    (this._parseParams || noop).call(this);\n\n    if (this._addEventListeners) {\n      this._addEventListeners();\n    }\n\n    return this;\n  };\n\n  /**\n   * Set a hash of parameters if they're whitelisted or we're told to force the set.\n   * This is used to set initial values as well as set passed parameters.\n   * @param {Object} params\n   * @param {Boolean} force Force setting even if the param is not whitelisted.\n   */\n\n\n  Base.prototype.setParams = function setParams(params, force) {\n    var _this = this;\n\n    (0, _each2.default)(params, function (k, v) {\n      if (_this._whitelistedParams.indexOf(k) !== -1 || force) {\n        _this[k] = v;\n      }\n    });\n\n    return this;\n  };\n\n  /**\n   * Unset all parameters.\n   * @param {Array|Object} keys\n   * @param {Object} scope The object to unset the params from. Defaults to `this`.\n   */\n\n\n  Base.prototype.unsetParams = function unsetParams(keys, scope) {\n\n    keys = keys instanceof Array ? keys : Object.keys(keys);\n    scope = scope || this;\n    (0, _each2.default)(keys, function (k) {\n      delete scope[k];\n    });\n\n    return this;\n  };\n\n  return Base;\n}();\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nBase.prototype._whitelistedParams = [];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nBase.prototype.defaults = {};\n\nexports.default = Base;\nmodule.exports = exports['default'];\n//# sourceMappingURL=base.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _height = require('../helpers/animation/height');\n\nvar _height2 = _interopRequireDefault(_height);\n\nvar _transform = require('../helpers/css/transform');\n\nvar _transform2 = _interopRequireDefault(_transform);\n\nvar _addClass = require('../helpers/dom/add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('../helpers/dom/remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nvar _hasClass = require('../helpers/dom/has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _hasParent = require('../helpers/traversal/has-parent');\n\nvar _hasParent2 = _interopRequireDefault(_hasParent);\n\nvar _getParent = require('../helpers/traversal/get-parent');\n\nvar _getParent2 = _interopRequireDefault(_getParent);\n\nvar _getParents = require('../helpers/traversal/get-parents');\n\nvar _getParents2 = _interopRequireDefault(_getParents);\n\nvar _getChild = require('../helpers/traversal/get-child');\n\nvar _getChild2 = _interopRequireDefault(_getChild);\n\nvar _wrapElement = require('../helpers/manipulation/wrap-element');\n\nvar _wrapElement2 = _interopRequireDefault(_wrapElement);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\nenu\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * new Menu(el, {\nptional. Callback method for when the menu toggles.\nonToggle: function(){}\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * });\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module components/menu.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar noop = function noop() {};\n\nvar Menu = function (_BaseComponent) {\n  _inherits(Menu, _BaseComponent);\n\n  /**\n   * Menu constructor.\n   * @param {Element} el\n   * @param {Object} params\n   */\n  function Menu(el) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Menu);\n\n    params.elRequired = true;\n\n    if (!(_this = _possibleConstructorReturn(this, _BaseComponent.call(this, el, params)), _this)) {\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this._bindEventListenerCallbacks();\n    _this._addEventListeners();\n    _this._checkAnimation();\n    return _possibleConstructorReturn(_this);\n  }\n\n  /**\n   * Store a reference to the tabs list, each tab and each panel.\n   * Set which tab is active, or use the first.\n   * @param {Element} el\n   */\n\n\n  Menu.prototype._cacheElements = function _cacheElements(el) {\n    this.el = el;\n    this.toggleEl = this.el.querySelector('.spark-menu__toggle');\n  };\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n\n\n  Menu.prototype._bindEventListenerCallbacks = function _bindEventListenerCallbacks() {\n    this._onClickBound = this._onClick.bind(this);\n    this._onFocusBound = this._onFocus.bind(this);\n    this._onBlurBound = this._onBlur.bind(this);\n    this._onKeydownBound = this._onKeydown.bind(this);\n  };\n\n  /**\n   * Add event listeners for DOM events.\n   */\n\n\n  Menu.prototype._addEventListeners = function _addEventListeners() {\n    this.el.addEventListener('click', this._onClickBound);\n    this.el.addEventListener('focus', this._onFocusBound, true);\n    this.el.addEventListener('blur', this._onBlurBound, true);\n    this.el.addEventListener('keydown', this._onKeydownBound);\n  };\n\n  /**\n   * Remove event listeners for DOM events..\n   */\n\n\n  Menu.prototype._removeEventListeners = function _removeEventListeners() {\n    this.el.removeEventListener('click', this._onClickBound);\n    this.el.removeEventListener('focus', this._onFocusBound);\n    this.el.removeEventListener('blur', this._onBlurBound);\n    this.el.removeEventListener('keydown', this._onKeydownBound);\n  };\n\n  /**\n   * Toggle the open state of an item.\n   * @param {Element} item\n   */\n\n\n  Menu.prototype._toggleItem = function _toggleItem(item) {\n\n    if ((0, _hasClass2.default)(item, 'open')) {\n      this._closeItem(item);\n    } else {\n      this._openItem(item);\n    }\n  };\n\n  /**\n   * Toggle aria-checked state of the Expand/Collapse toggle carets\n   * @param {Element} item\n   */\n\n\n  Menu.prototype._toggleAriaCheckedState = function _toggleAriaCheckedState(item) {\n    if (item.hasAttribute('aria-checked')) {\n      var ariaState = item.getAttribute('aria-checked') === 'true';\n      item.setAttribute('aria-checked', String(!ariaState));\n    }\n  };\n\n  /**\n   * Check for a nested list and create the wrappers needed\n   * for animating the lists\n   *\n   */\n\n\n  Menu.prototype._checkAnimation = function _checkAnimation() {\n    if (this.el.querySelector('.spark-menu__list-next')) {\n      this.cachedList = this.cachedList || [];\n      this._createMenuAnimationWrapper();\n      this._animateListChange();\n    }\n  };\n\n  /**\n   * Create wrapper class to help with animation of sliding lists\n   *\n   */\n\n\n  Menu.prototype._createMenuAnimationWrapper = function _createMenuAnimationWrapper() {\n    if (this.wrapperEl) {\n      return;\n    }\n\n    var wrapperEl = document.createElement('div');\n    (0, _addClass2.default)(wrapperEl, 'spark-menu__animation-wrapper');\n    (0, _wrapElement2.default)(this.el.querySelector('.spark-menu__list'), wrapperEl);\n    this.wrapperEl = wrapperEl;\n  };\n\n  /**\n   * Animate the position of the animation wrapper. Optionally, do\n   * so immediately without waiting for an animation.\n   * @param {Boolean} noAnimate\n   */\n\n\n  Menu.prototype._animateListChange = function _animateListChange(noAnimate) {\n\n    if (noAnimate) {\n      (0, _addClass2.default)(this.wrapperEl, 'no-animate');\n    }\n\n    this.wrapperEl.setAttribute('style', (0, _transform2.default)('translateX', '-' + this.cachedList.length * 100 + '%'));\n\n    if (noAnimate) {\n      setTimeout(function () {\n        (0, _removeClass2.default)(this.wrapperEl, 'no-animate');\n      }.bind(this), 1);\n    }\n  };\n\n  /**\n   * Append list to menu element\n   * @param {Element} list\n   * @param {Boolean} noAnimate\n   */\n\n\n  Menu.prototype._appendList = function _appendList(item, noAnimate) {\n\n    // Create wrapper\n    this._createMenuAnimationWrapper();\n\n    var newList = item.cloneNode(true);\n    (0, _addClass2.default)(newList, 'nestedList');\n    newList.setAttribute('data-nested-list-id', newList.getAttribute('id'));\n    newList.removeAttribute('id');\n\n    if (this.wrapperEl) {\n      // Add child node to wrapper\n      this.wrapperEl.appendChild(newList);\n      // Add to cached Array to keep track of all added lists\n      this.cachedList.push(newList);\n      // Slide navigation\n      this._animateListChange(noAnimate);\n    }\n  };\n\n  /**\n   * Remove list to nav\n   *\n   */\n\n\n  Menu.prototype._removeLastList = function _removeLastList() {\n    // If there are any items to remove\n    if (this.cachedList.length) {\n      // Retrieve last item from list\n      var removeElement = this.cachedList.pop();\n      if (this.wrapperEl) {\n        // Slide navigation\n        this._animateListChange();\n      }\n      window.setTimeout(function () {\n        // Remove itself from DOM\n        removeElement.parentNode.removeChild(removeElement);\n      }, 250);\n    }\n  };\n\n  /**\n   * Remove all lists from panel menu\n   *\n   */\n\n\n  Menu.prototype._removeAllCachedLists = function _removeAllCachedLists() {\n    if (this.cachedList) {\n      // If there are any items to remove\n      while (this.cachedList.length) {\n        // While there are still items, remove them\n        this._removeLastList();\n      }\n    }\n  };\n\n  /**\n   * Finds and returns the next nested list\n   * @param {Object} item\n   * @return {Object}\n   */\n\n\n  Menu.prototype._getNextList = function _getNextList(item) {\n    return item.querySelector('.spark-menu__list-next') ? document.querySelector(item.querySelector('.spark-menu__list-next').getAttribute('data-menu')) : null;\n  };\n\n  /**\n   * Open an item by animating it.\n   * @param {Object} item\n   */\n\n\n  Menu.prototype._openItem = function _openItem(item) {\n\n    // Item is already open\n    if ((0, _hasClass2.default)(item, 'open')) {\n      return;\n    }\n\n    (0, _height2.default)({\n      el: item,\n      toggleEl: '.spark-menu__list'\n    });\n\n    (0, _addClass2.default)(item, 'open');\n  };\n\n  /**\n   * Close an item by animating it shut.\n   * @param {Object} item\n   */\n\n\n  Menu.prototype._closeItem = function _closeItem(item) {\n\n    // Item is already closed\n    if (!(0, _hasClass2.default)(item, 'open')) {\n      return;\n    }\n\n    (0, _height2.default)({\n      el: item,\n      toggleEl: '.spark-menu__list',\n      toggleValue: 'none',\n      action: 'collapse'\n    });\n\n    (0, _removeClass2.default)(item, 'open');\n  };\n\n  /**\n   * Make an item active.\n   * @param {Element} item\n   */\n\n\n  Menu.prototype._activateItem = function _activateItem(item) {\n\n    // Item is already active\n    if ((0, _hasClass2.default)(item, 'active')) {\n      return;\n    }\n\n    // Deactivate any active items\n    var parents = (0, _getParents2.default)(item, '.spark-menu__list', this.el);\n    this._deactivateItems(parents[parents.length - 1]);\n    this._deactivateItemSiblings(item);\n\n    // Add the active class\n    (0, _addClass2.default)(item, 'active');\n\n    // If there is a parent that is also a list item, open it.\n    this._activateItemParents(item, this.el);\n  };\n\n  /**\n   * Activate parent items.\n   * @param {Element} el\n   * @param {Element} limitEl\n   */\n\n\n  Menu.prototype._activateItemParents = function _activateItemParents(el, limitEl) {\n\n    var parents = (0, _getParents2.default)(el.parentNode, '[class*=\"list-item\"]', limitEl);\n\n    var i = 0;\n    var len = parents.length;\n\n    // Add the active class\n    for (; i < len; i++) {\n      this._openItem(parents[i]);\n      (0, _addClass2.default)(parents[i], 'child-active');\n    }\n  };\n\n  /**\n   * Deactivate items.\n   * @param {Element} el\n   */\n\n\n  Menu.prototype._deactivateItems = function _deactivateItems(el) {\n\n    var actives = el.querySelectorAll('[class*=\"list-item\"].active');\n    var i = 0;\n    var len = actives.length;\n\n    // Remove the active class\n    for (; i < len; i++) {\n      (0, _removeClass2.default)(actives.item(i), 'active');\n    }\n  };\n\n  /**\n   * Deactivate siblings items.\n   * @param {Element} el\n   */\n\n\n  Menu.prototype._deactivateItemSiblings = function _deactivateItemSiblings(el) {\n\n    var actives = el.parentNode.querySelectorAll('[class*=\"list-item\"].child-active');\n    var i = 0;\n    var len = actives.length;\n\n    // Remove the active class\n    for (; i < len; i++) {\n      (0, _removeClass2.default)(actives[i], 'child-active');\n      (0, _removeClass2.default)(actives[i], 'open');\n    }\n  };\n\n  /**\n   * Open the parents of the active item.\n   *\n   */\n\n\n  Menu.prototype._openActiveParents = function _openActiveParents() {\n\n    var activeItem = this.el.querySelector('.active');\n    if (activeItem) {\n      var parentItems = (0, _getParents2.default)(activeItem, '.spark-menu__list-item', this.el);\n      var itemLinks;\n      var nextList;\n\n      for (var i = parentItems.length - 1; i >= 0; i--) {\n        itemLinks = (0, _getChild2.default)(parentItems[i], '.spark-menu__list-links');\n        if (itemLinks && itemLinks.querySelector('.spark-menu__list-next')) {\n          nextList = this._getNextList(parentItems[i]);\n          if (nextList && !this._cachedListContainsID(nextList.getAttribute('id'))) {\n            this._appendList(nextList, true);\n          }\n        } else {\n          (0, _addClass2.default)(parentItems[i], 'open');\n        }\n      }\n    }\n  };\n\n  /**\n   * Check if the cached list contains a certain ID\n   * @param {String} id\n   * @return {Boolean}\n   */\n\n\n  Menu.prototype._cachedListContainsID = function _cachedListContainsID(id) {\n    var i = this.cachedList.length;\n    while (i--) {\n      if (this.cachedList[i].getAttribute('data-nested-list-id') === id) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * When an item is clicked, make it active. Determine if the click was on an expand\n   * button and open the list if so.\n   * @todo: It should be possible to opt out of this behavior.\n   * @param {Object} e\n   */\n\n\n  Menu.prototype._onClick = function _onClick(e) {\n\n    // Don't make forms active\n    if ((0, _getParent2.default)(e.target, 'form', this.el)) {\n      return;\n    }\n\n    // Toggle the visibility of the menu?\n    var toggle = e.target === this.toggleEl || (0, _hasParent2.default)(e.target, this.toggleEl);\n    if (toggle) {\n      return (this.onToggle || noop)(e, this);\n    }\n\n    // Is there a parent to open and an item?\n    var open = (0, _getParent2.default)(e.target, '.spark-menu__list-expand', this.el);\n    var item = (0, _getParent2.default)(e.target, '.spark-menu__list-item', this.el);\n\n    // If we have no item or have been told to ignore the item\n    if (!item || (0, _getParent2.default)(e.target, '.spark-menu__ignore', this.el)) {\n      return;\n    }\n    if (open) {\n      this._toggleAriaCheckedState(open);\n      return this._toggleItem(item);\n    }\n\n    // Check if we have a valid item and we aren't inside the expanded header\n    if (item && !(0, _hasParent2.default)(e.target, document.querySelector('.spark-header--visible'))) {\n\n      var next = this._getNextList(item);\n\n      if (next && (0, _hasClass2.default)(e.target, 'spark-menu__list-next')) {\n        // Active item\n        this._activateItem(item);\n        this._appendList(next);\n        return;\n      }\n\n      var back = (0, _getParent2.default)(e.target, '.spark-menu__list-back', item);\n\n      if (back && (0, _hasClass2.default)(e.target, 'spark-menu__list-back')) {\n        this._removeLastList();\n        return;\n      }\n    }\n\n    // Active item\n    this._activateItem(item);\n  };\n\n  /**\n   * When the space or enter key is pressed on a focused item, make it active.\n   * Determine if the click was on an expand button or link and open the list if so.\n   * @todo: It should be possible to opt out of this behavior.\n   * @param {Object} e\n   */\n\n\n  Menu.prototype._onKeydown = function _onKeydown(e) {\n    var code = e.keyCode || e.which;\n\n    // Don't make forms active\n    if ((0, _getParent2.default)(e.target, 'form', this.el)) {\n      return;\n    }\n\n    // Toggle the visibility of the menu?\n    var toggle = e.target === this.toggleEl || (0, _hasParent2.default)(e.target, this.toggleEl);\n    if (toggle) {\n      return (this.onToggle || noop)(e, this);\n    }\n\n    // Is there a parent to open and an item?\n    var open = (0, _getParent2.default)(e.target, '.spark-menu__list-expand', this.el);\n    var item = (0, _getParent2.default)(e.target, '.spark-menu__list-item', this.el);\n\n    // If we have no item or have been told to ignore the item\n    if (!item || (0, _getParent2.default)(e.target, '.spark-menu__ignore', this.el)) {\n      return;\n    }\n    if (open) {\n      if (code === 32 || code === 13) {\n        e.preventDefault();\n        this._toggleAriaCheckedState(open);\n        return this._toggleItem(item);\n      }\n    }\n\n    // Check if we have a valid item and we aren't inside the expanded header\n    if (item && !(0, _hasParent2.default)(e.target, document.querySelector('.spark-header--visible'))) {\n\n      var next = this._getNextList(item);\n\n      if (next && (0, _hasClass2.default)(e.target, 'spark-menu__list-next')) {\n        if (code === 32 || code === 13) {\n          e.preventDefault();\n          // Active item\n          this._activateItem(item);\n          this._appendList(next);\n          return;\n        }\n      }\n\n      var back = (0, _getParent2.default)(e.target, '.spark-menu__list-back', item);\n\n      if (back && (0, _hasClass2.default)(e.target, 'spark-menu__list-back')) {\n        if (code === 32 || code === 13) {\n          e.preventDefault();\n\n          this._removeLastList();\n          return;\n        }\n      }\n    }\n\n    if (code === 32 || code === 13) {\n      this._activateItem(item);\n    }\n  };\n\n  /**\n   * Keep track of when items have focus.\n   * @param {Object} e\n   */\n\n\n  Menu.prototype._onFocus = function _onFocus(e) {\n\n    var parent = e.target;\n    var lastParent = parent;\n\n    while (parent) {\n      parent = (0, _getParent2.default)(lastParent.parentNode, '.spark-menu__list-item', this.el);\n      if (!parent || parent === lastParent) break;\n      (0, _addClass2.default)(parent, 'has-focus');\n      lastParent = parent;\n    }\n  };\n\n  /**\n   * Keep track of when items lose focus.\n   * @param {Object} e\n   */\n\n\n  Menu.prototype._onBlur = function _onBlur(e) {\n\n    var parent = e.target;\n    var lastParent = parent;\n\n    while (parent) {\n      parent = (0, _getParent2.default)(lastParent.parentNode, '.spark-menu__list-item', this.el);\n      if (!parent || parent === lastParent) break;\n      (0, _removeClass2.default)(parent, 'has-focus');\n      lastParent = parent;\n    }\n  };\n\n  return Menu;\n}(_base2.default);\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nMenu.prototype._whitelistedParams = ['onToggle'];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nMenu.prototype.defaults = {\n  cachedList: null,\n  el: null,\n  toggleEl: null,\n  wrapperEl: null,\n  onToggle: null,\n  _onClickBound: null,\n  _onFocusBound: null,\n  _onBlurBound: null,\n  _onKeydownBound: null\n};\n\nexports.default = Menu;\nmodule.exports = exports['default'];\n//# sourceMappingURL=menu.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _outerHeight = require('../dom/outer-height');\n\nvar _outerHeight2 = _interopRequireDefault(_outerHeight);\n\nvar _addClass = require('../dom/add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('../dom/remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nvar _hasClass = require('../dom/has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _toggleClass = require('../dom/toggle-class');\n\nvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar noop = function noop() {}; /**\n                                * # Animate Height\n                                * Animate the height of an element since we can't do this w/ pure CSS. Sigh.\n                                *\n                                * @example\n                                * animateHeight({\n                                *   el: ...,\n                                *   toggleEl: ...,\n                                *   // Optional params\n                                *   action: 'collapse'|'expand',\n                                *   heightAnimationClass: 'spark-animate-height',\n                                *   opacityAnimationClass: 'spark-animate-opacity',\n                                *   toggleProperty: 'display'|'overflow'|'visibility',\n                                *   toggleValue: 'block'|'none'|'visible'|'hidden',\n                                *   animationDuration: 250\n                                * });\n                                *\n                                * @module helpers/animation/height.js\n                                */\n\nvar runningAnimations = {\n  els: [],\n  completeCallbacks: []\n};\n\n/**\n * Get the inverse toggle value\n * @param  {String} property\n * @param  {String} originalValue\n * @return {String}\n */\nfunction getInverseToggleValue(el, property, originalValue) {\n\n  // Get the value to toggle to for the given property\n  switch (property) {\n    case 'overflow':\n    case 'visibility':\n      return originalValue === 'visible' ? 'hidden' : 'visible';\n    default:\n      return originalValue === 'block' || originalValue === 'inline-block' ? 'none' : 'block';\n  }\n}\n\n/**\n * When an animation is complete, clean up and run the callback.\n * @param  {Object} params\n */\nfunction onComplete(params) {\n\n  // Reset toggle el visibility\n  if (params.toggleClassName) {\n    (0, _toggleClass2.default)(params.el, params.toggleClassName, !params.collapse);\n  } else {\n    params.toggleEl.style[params.toggleProperty] = '';\n  }\n\n  // Remove the height property\n  params.el.style.height = '';\n  params.toggleEl.style.height = '';\n  params.toggleEl.style.marginBottom = '';\n  params.toggleEl.style.marginTop = '';\n\n  // Remove the spark-animate-height class so the transitions no longer apply\n  (0, _removeClass2.default)(params.el, params.heightAnimationClass);\n  (0, _removeClass2.default)(params.toggleEl, params.heightAnimationClass);\n\n  // Run the callback\n  params.onComplete();\n\n  // Remove the element and callback from their respective arrays\n  var runningIndex = runningAnimations.els.indexOf(params.el);\n  runningAnimations.els.splice(runningIndex, 1);\n  runningAnimations.completeCallbacks.splice(runningIndex, 1);\n}\n\n/**\n * @param {Object} params\n */\nfunction animateHeight(params) {\n\n  params = params || {};\n\n  var el = params.el;\n\n  if (!el) {\n    return;\n  }\n\n  var collapse = params.action && params.action === 'collapse';\n  var heightAnimationClass = params.heightAnimationClass || 'spark-animate-height';\n\n  // Allow for elements to be passed or selector strings\n  var toggleEl = typeof params.toggleEl === 'string' ? el.querySelector(params.toggleEl) : params.toggleEl;\n\n  // No element to be switching with toggling so we can't determine the desired height to animate to.\n  if (!toggleEl || (0, _hasClass2.default)(el, 'spark-no-animate')) {\n    return;\n  }\n\n  var toggleClassName = params.toggleClass;\n\n  // The style property to use when toggling visibility\n  var toggleProperty = params.toggleProperty || 'display';\n  var toggleStyles = window.getComputedStyle(toggleEl);\n  var originalToggleValue = toggleStyles[toggleProperty];\n  var toggleValue = params.toggleValue || getInverseToggleValue(toggleProperty, originalToggleValue);\n\n  // If we are already animating, stop now.\n  var runningIndex = runningAnimations.els.indexOf(el);\n  if (runningIndex !== -1) {\n\n    var completeCallback = runningAnimations.completeCallbacks[runningIndex];\n    if (completeCallback) {\n      clearTimeout(completeCallback);\n    }\n\n    onComplete({\n      el: el,\n      toggleEl: toggleEl,\n      onComplete: params.onComplete || noop,\n      collapse: collapse,\n      toggleProperty: toggleProperty,\n      toggleClassName: toggleClassName,\n      toggleValue: toggleValue,\n      heightAnimationClass: heightAnimationClass\n    });\n  }\n\n  // Store the current height\n  var originalHeight = (0, _outerHeight2.default)(el);\n\n  // Toggle the visible property\n  if (toggleClassName) {\n    (0, _toggleClass2.default)(el, toggleClassName, !collapse);\n  } else {\n    toggleEl.style[toggleProperty] = toggleValue;\n  }\n\n  // When measuring the size for a collapse, we have to wait a tic for it to be\n  // accurate. Not sure why. Ugh.\n  if (collapse) {\n    setTimeout(runAnimation, 0);\n  } else {\n    runAnimation();\n  }\n\n  function runAnimation() {\n\n    // Now that the toggle el is taking up space, get the new height which we will be animating to\n    var targetElHeight = (0, _outerHeight2.default)(el);\n\n    // We need to store the original and target toggle element heights. They differ depending on\n    // whether we are going to expand or collapse.\n    var targetToggleElHeight = void 0;\n    var originalToggleElHeight = void 0;\n\n    // If we are collapsing, reset the toggle style and set it when we're done. Set the height so\n    // that we can animate down to 0 or up to the target height.\n    if (collapse) {\n\n      if (toggleClassName) {\n        (0, _removeClass2.default)(el, toggleClassName);\n      } else {\n        toggleEl.style[toggleProperty] = originalToggleValue;\n      }\n\n      originalToggleElHeight = (0, _outerHeight2.default)(toggleEl, toggleStyles);\n      targetToggleElHeight = 0;\n    } else {\n      targetToggleElHeight = (0, _outerHeight2.default)(toggleEl, toggleStyles);\n      originalToggleElHeight = 0;\n    }\n\n    // Set the original height\n    el.style.height = originalHeight + 'px';\n    toggleEl.style.height = originalToggleElHeight + 'px';\n    toggleEl.style.marginBottom = '0px';\n    toggleEl.style.marginTop = '0px';\n\n    // Add the spark-animate-height class which will setup the transition-property and duration\n    (0, _addClass2.default)(el, heightAnimationClass);\n    (0, _addClass2.default)(toggleEl, heightAnimationClass);\n\n    runningAnimations.els.push(el);\n\n    // We need to wait a tick to toggle the height or else the animation class won't function\n    setTimeout(function () {\n\n      // Set the height to the target height\n      el.style.height = targetElHeight + 'px';\n      toggleEl.style.height = targetToggleElHeight + 'px';\n\n      // Remove inline styles after the animation is complete\n      runningAnimations.completeCallbacks.push(setTimeout(function () {\n        onComplete({\n          el: el,\n          toggleEl: toggleEl,\n          onComplete: params.onComplete || noop,\n          collapse: collapse,\n          toggleProperty: toggleProperty,\n          toggleClassName: toggleClassName,\n          toggleValue: toggleValue,\n          heightAnimationClass: heightAnimationClass\n        });\n      }, params.animationDuration !== undefined ? params.animationDuration : 201));\n    }, 0);\n  }\n}\n\nexports.default = animateHeight;\nmodule.exports = exports['default'];\n//# sourceMappingURL=height.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * # Transform\n                                                                                                                                                                                                                                                                               * Apply a cross-browser transform style.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * @example\n                                                                                                                                                                                                                                                                               * transform('translateX', '-100px');\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * @param {String} type\n                                                                                                                                                                                                                                                                               * @param {String} val\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * @module helpers/css/transform.js\n                                                                                                                                                                                                                                                                               */\n\nvar _each = require('../util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar prefixes = ['-webkit-', '-moz-', '-o-', '-ms-', ''];\n\nfunction transform(type, val) {\n\n  var str = '';\n\n  (0, _each2.default)(prefixes, function (p) {\n\n    if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') {\n      str += p + 'transform: ';\n\n      for (var j in val) {\n        str += j + '(' + val[j] + '); ';\n      }\n    } else {\n      str += p + 'transform: ' + type + '(' + val + '); ';\n    }\n  });\n\n  return str;\n}\n\nexports.default = transform;\nmodule.exports = exports['default'];\n//# sourceMappingURL=transform.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _trim = require('../util/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nvar _hasClass = require('./has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * # Add Class\n * Add a class on an element.\n *\n * @param {Element|Array} el An element or array of elements to update.\n * @param {String} name\n * @return {Element}\n *\n * @module helpers/dom/add-class.js\n */\n\nvar ws = /\\s+/;\nvar cleanup = /\\s{2,}/g;\n\nfunction addClass(el, name) {\n\n  if (arguments.length === 2 && typeof name === 'string') {\n    name = (0, _trim2.default)(name).split(ws);\n  } else {\n    name = name instanceof Array ? name : Array.prototype.slice.call(arguments, 1);\n  }\n\n  // optimize for best, most common case\n  if (name.length === 1 && el.classList) {\n    if (name[0]) {\n      el.classList.add(name[0]);\n    }\n    return el;\n  }\n\n  var toAdd = [];\n  var i = 0;\n  var l = name.length;\n  var item = void 0;\n  var clsName = typeof el.className === 'string' ? el.className : el.getAttribute ? el.getAttribute('class') : '';\n\n  // see if we have anything to add\n  for (; i < l; i++) {\n    item = name[i];\n    if (item && !(0, _hasClass2.default)(clsName, item)) {\n      toAdd.push(item);\n    }\n  }\n\n  if (toAdd.length) {\n    if (typeof el.className === 'string') {\n      el.className = (0, _trim2.default)((clsName + ' ' + toAdd.join(' ')).replace(cleanup, ' '));\n    } else if (el.setAttribute) {\n      el.setAttribute('class', (0, _trim2.default)((clsName + ' ' + toAdd.join(' ')).replace(cleanup, ' ')));\n    }\n  }\n\n  return el;\n}\n\nexports.default = addClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=add-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * # Has Class\n * See if an element has a class.\n *\n * @param {Element|String} el\n * @param {String} name\n * @return {Boolean}\n *\n * @module helpers/dom/has-class.js\n */\nfunction hasClass(el, name) {\n  var cName = ((typeof el === 'undefined' ? 'undefined' : _typeof(el)) === 'object' ? el.className || el.getAttribute && el.getAttribute('class') || '' : el || '').replace(/[\\t\\r\\n\\f]/g, ' ');\n  return (' ' + cName + ' ').indexOf(' ' + name + ' ') !== -1;\n}\n\nexports.default = hasClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=has-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _each = require('../util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar props = ['marginTop', 'marginBottom', 'borderTop', 'borderBottom']; /**\n                                                                         * # Outer Height\n                                                                         * Get the outer height of an element (including margin and border)\n                                                                         *\n                                                                         * @param {Element} el\n                                                                         * @param {Object} styles Optional Already have computed styles? Pass them in.\n                                                                         *\n                                                                         * @example\n                                                                         * outerHeight(el, computedStyles);\n                                                                         *\n                                                                         * @module helpers/outer-height.js\n                                                                         */\n\n\nfunction outerHeight(el, styles) {\n\n  styles = styles || window.getComputedStyle(el);\n\n  var height = el.clientHeight;\n\n  (0, _each2.default)(props, function (prop) {\n    height += parseInt(styles[prop] || 0, 10);\n  });\n\n  return height;\n}\n\nexports.default = outerHeight;\nmodule.exports = exports['default'];\n//# sourceMappingURL=outer-height.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _trim = require('../util/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ws = /\\s+/; /**\n                 * # Remove Class\n                 * Remove a class on an element.\n                 *\n                 * @param {Element|Array} el An element or array of elements to update.\n                 * @param {String} name\n                 * @return {Element}\n                 *\n                 * @module helpers/dom/remove-class.js\n                 */\n\nvar cleanup = /\\s{2,}/g;\n\nfunction removeClass(el, name) {\n\n  if (arguments.length === 2 && typeof name === 'string') {\n    name = (0, _trim2.default)(name).split(ws);\n  } else {\n    name = name instanceof Array ? name : Array.prototype.slice.call(arguments, 1);\n  }\n\n  // optimize for best, most common case\n  if (name.length === 1 && el.classList) {\n    if (name[0]) el.classList.remove(name[0]);\n    return el;\n  }\n\n  // store two copies\n  var clsName = ' ' + (typeof el.className === 'string' ? el.className : el.getAttribute ? el.getAttribute('class') : '') + ' ';\n  var result = clsName;\n  var current = void 0;\n  var start = void 0;\n  for (var i = 0, l = name.length; i < l; i++) {\n    current = name[i];\n    start = current ? result.indexOf(' ' + current + ' ') : -1;\n    if (start !== -1) {\n      start += 1;\n      result = result.slice(0, start) + result.slice(start + current.length);\n    }\n  }\n\n  // only write if modified\n  if (clsName !== result) {\n    if (typeof el.className === 'string') {\n      el.className = (0, _trim2.default)(result.replace(cleanup, ' '));\n    } else if (el.setAttribute) {\n      el.setAttribute('class', (0, _trim2.default)(result.replace(cleanup, ' ')));\n    }\n  }\n\n  return el;\n}\n\nexports.default = removeClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=remove-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _hasClass = require('./has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _addClass = require('./add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('./remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction toggleClass(el, name, enable) {\n\n  if (!el) {\n    return;\n  }\n\n  // If we're passed an array, toggle the class on each.\n  if (el instanceof NodeList || el instanceof Array) {\n\n    for (var i = 0, len = el.length; i < len; i++) {\n      toggleClass(el[i], name, enable);\n    }\n\n    return;\n  }\n\n  var action = void 0;\n  if (enable !== undefined) {\n    enable = typeof enable === 'function' ? enable.call(null, el) : enable;\n    action = enable ? 'add' : 'remove';\n  } else {\n    action = (0, _hasClass2.default)(el, name) ? 'remove' : 'add';\n  }\n\n  return (action === 'add' ? _addClass2.default : _removeClass2.default)(el, name);\n} /**\n   * # Toggle Class\n   * Toggle a class on an element given a condition.\n   *\n   * @param {Element|Array} el An element or array of elements to update.\n   * @param {String} name\n   * @param {Boolean} enable\n   * @return {Element}\n   *\n   * @module  helpers/dom/toggle-class.js\n   */\n\nexports.default = toggleClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=toggle-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Wrap Element\n * Wrap an element with another element.\n *\n * @param {Element} el\n * @param {Element} wrapper\n * @return {Element}\n *\n * @module helpers/manipulation/wrap-element.js\n */\nfunction wrapElement(el, wrapper) {\n\n  wrapper = wrapper || document.createElement('div');\n\n  if (el.nextSibling) {\n    el.parentNode.insertBefore(wrapper, el.nextSibling);\n  } else {\n    el.parentNode.appendChild(wrapper);\n  }\n\n  return wrapper.appendChild(el);\n}\n\nexports.default = wrapElement;\nmodule.exports = exports['default'];\n//# sourceMappingURL=wrap-element.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _matches = require('./matches');\n\nvar _matches2 = _interopRequireDefault(_matches);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getChild(el, query) {\n\n  var i = 0;\n  var len = el.children.length;\n\n  for (; i < len; i++) {\n    if ((0, _matches2.default)(el.children[i], query)) {\n      return el.children[i];\n    }\n  }\n\n  return null;\n} /**\n   * # Get Child\n   * Get a child that matches the selector.\n   *\n   * @param {Element} el\n   * @param {String} query\n   * @return {Element|Null}\n   *\n   * @module helpers/traversal/get-child.js\n   */\n\nexports.default = getChild;\nmodule.exports = exports['default'];\n//# sourceMappingURL=get-child.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _matches = require('./matches');\n\nvar _matches2 = _interopRequireDefault(_matches);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getParent(parent, query, limitEl) {\n\n  limitEl = limitEl instanceof Array ? limitEl : [limitEl || document.body];\n\n  while (parent) {\n\n    if ((0, _matches2.default)(parent, query)) {\n      return parent;\n    }\n\n    if (limitEl.indexOf(parent) !== -1) {\n      return false;\n    }\n\n    parent = parent.parentNode;\n  }\n\n  return false;\n} /**\n   * # Get Parent\n   * See if an element has another element for a parent.\n   *\n   * @param {Element} parent\n   * @param {String} query\n   * @param {Array|Element} limitEl The last element we should check.\n   * @return {Boolean|Element}\n   *\n   * @module helpers/traversal/get-parent.js\n   */\n\nexports.default = getParent;\nmodule.exports = exports['default'];\n//# sourceMappingURL=get-parent.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getParent = require('./get-parent');\n\nvar _getParent2 = _interopRequireDefault(_getParent);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getParents(parent, query, limitEl) {\n\n  var list = [];\n\n  while (parent = (0, _getParent2.default)(parent.parentNode, query, limitEl)) {\n    list.push(parent);\n  }\n\n  return list;\n} /**\n   * # Get Parents\n   * See if an element has parents which match a query.\n   *\n   * @param {Element} parent\n   * @param {String} query\n   * @param {Element} limitEl The last element we should check.\n   * @return {Boolean|Array}\n   *\n   * @module helpers/traversal/get-parents.js\n   */\n\nexports.default = getParents;\nmodule.exports = exports['default'];\n//# sourceMappingURL=get-parents.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Has Parent\n * See if an element has another element for a parent.\n *\n * @param {Element} child\n * @param {Element} possibleParent\n * @return {Boolean}\n *\n * @module helpers/traversal/has-parent.js\n */\nfunction hasParent(child, possibleParent) {\n\n  var parent = child.parentNode;\n\n  while (parent) {\n\n    if (parent === possibleParent) {\n      return true;\n    }\n\n    parent = parent.parentNode;\n  }\n\n  return false;\n}\n\nexports.default = hasParent;\nmodule.exports = exports[\"default\"];\n//# sourceMappingURL=has-parent.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Matches\n * See if an element matches a query selector.\n *\n * @param {Element} el\n * @param {String} query\n * @return {Boolean}\n *\n * @module helpers/traversal/matches.js\n */\nvar vendorMatch = typeof Element !== 'undefined' && (Element.prototype.matches || Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector);\n\nfunction matches(el, query) {\n\n  if (vendorMatch) return vendorMatch.call(el, query);\n\n  var nodes = el.parentNode ? el.parentNode.querySelectorAll(query) : [];\n\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i] === el) return true;\n  }\n\n  return false;\n}\n\nexports.default = matches;\nmodule.exports = exports['default'];\n//# sourceMappingURL=matches.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Each\n * Apply a callback function to a list of any kind: Array, NodeList, HTMLCollection or Object.\n *\n * @param {Array|NodeList|HTMLCollection|Object} list\n * @param {Function} cb\n *\n * @example\n * each([], callback);\n * each(el.children, callback);\n * each(el.childNodes, callback);\n * each({}, callback);\n *\n * @module helpers/util/each.js\n */\nfunction each(list, cb) {\n\n  if (!list) {\n    return;\n  }\n\n  if (typeof cb !== 'function') {\n    throw new Error('Cannot invoke `each` without a callback!');\n  }\n\n  var i = 0;\n  var len = list.length;\n\n  // Object\n  if (len === undefined) {\n    for (i in list) {\n      if (i !== 'prototype' && list.hasOwnProperty(i)) {\n        cb(i, list[i]);\n      }\n    }\n  }\n  // Array-like\n  else {\n      for (; i < len; i++) {\n        cb(list[i]);\n      }\n    }\n}\n\nexports.default = each;\nmodule.exports = exports['default'];\n//# sourceMappingURL=each.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Trim\n * Trim whitespace on a string.\n *\n * @param {String} str\n *\n * @module helpers/util/trim.js\n */\n\nvar trimRE = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\nfunction trim(str) {\n  return str.replace(trimRE, '');\n}\n\nexports.default = trim;\nmodule.exports = exports['default'];\n//# sourceMappingURL=trim.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJqcy9kaXN0L2NvbXBvbmVudHMvYmFzZS5qcyIsImpzL2Rpc3QvY29tcG9uZW50cy9tZW51LmpzIiwianMvZGlzdC9oZWxwZXJzL2FuaW1hdGlvbi9oZWlnaHQuanMiLCJqcy9kaXN0L2hlbHBlcnMvY3NzL3RyYW5zZm9ybS5qcyIsImpzL2Rpc3QvaGVscGVycy9kb20vYWRkLWNsYXNzLmpzIiwianMvZGlzdC9oZWxwZXJzL2RvbS9oYXMtY2xhc3MuanMiLCJqcy9kaXN0L2hlbHBlcnMvZG9tL291dGVyLWhlaWdodC5qcyIsImpzL2Rpc3QvaGVscGVycy9kb20vcmVtb3ZlLWNsYXNzLmpzIiwianMvZGlzdC9oZWxwZXJzL2RvbS90b2dnbGUtY2xhc3MuanMiLCJqcy9kaXN0L2hlbHBlcnMvbWFuaXB1bGF0aW9uL3dyYXAtZWxlbWVudC5qcyIsImpzL2Rpc3QvaGVscGVycy90cmF2ZXJzYWwvZ2V0LWNoaWxkLmpzIiwianMvZGlzdC9oZWxwZXJzL3RyYXZlcnNhbC9nZXQtcGFyZW50LmpzIiwianMvZGlzdC9oZWxwZXJzL3RyYXZlcnNhbC9nZXQtcGFyZW50cy5qcyIsImpzL2Rpc3QvaGVscGVycy90cmF2ZXJzYWwvaGFzLXBhcmVudC5qcyIsImpzL2Rpc3QvaGVscGVycy90cmF2ZXJzYWwvbWF0Y2hlcy5qcyIsImpzL2Rpc3QvaGVscGVycy91dGlsL2VhY2guanMiLCJqcy9kaXN0L2hlbHBlcnMvdXRpbC90cmltLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3BxQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDaFBBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcEVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDdENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9cmV0dXJuIGV9KSgpIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2VhY2ggPSByZXF1aXJlKCcuLi9oZWxwZXJzL3V0aWwvZWFjaCcpO1xuXG52YXIgX2VhY2gyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZWFjaCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9IC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqICMgQmFzZSBDb21wb25lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBUaGUgYmFzZSBjbGFzcyBmb3IgU3BhcmsgSlMgY29tcG9uZW50cy4gVGhpcyBjbGFzcyBzaG91bGQgbmV2ZXIgYmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBpbnN0YW50aWF0ZWQgZGlyZWN0bHkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQG1vZHVsZSBjb21wb25lbnRzL2Jhc2UuanNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cblxudmFyIG5vb3AgPSBmdW5jdGlvbiBub29wKCkge307XG5cbnZhciBCYXNlID0gZnVuY3Rpb24gKCkge1xuXG4gIC8qKlxuICAgKiBTZXQgcGFyYW1ldGVycyBhbmQgY2FjaGUgZWxlbWVudHMuXG4gICAqL1xuICBmdW5jdGlvbiBCYXNlKGVsKSB7XG4gICAgdmFyIHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQmFzZSk7XG5cbiAgICBpZiAocGFyYW1zLmVsUmVxdWlyZWQgJiYgIWVsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zZXRQYXJhbXModGhpcy5kZWZhdWx0cyB8fCB7fSwgdHJ1ZSk7XG4gICAgdGhpcy5zZXRQYXJhbXMocGFyYW1zKTtcbiAgICAodGhpcy5fY2FjaGVFbGVtZW50cyB8fCBub29wKS5jYWxsKHRoaXMsIGVsLCBwYXJhbXMpO1xuICAgICh0aGlzLl9wYXJzZVBhcmFtcyB8fCBub29wKS5jYWxsKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGUgY29tcG9uZW50IGZyb20gdGhlIERPTSBhbmQgcHJlcGFyZSBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uIGJ5IGRlcmVmZXJlbmNpbmcgdmFsdWVzLlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IGxlYXZlRWxlbWVudCBMZWF2ZSB0aGUgZWxlbWVudCBpbnRhY3QuXG4gICAqL1xuXG5cbiAgQmFzZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKGxlYXZlRWxlbWVudCkge1xuXG4gICAgaWYgKHRoaXMuX3JlbW92ZUV2ZW50TGlzdGVuZXJzKSB7XG4gICAgICB0aGlzLl9yZW1vdmVFdmVudExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIGlmICghbGVhdmVFbGVtZW50ICYmIHRoaXMuZWwgJiYgdGhpcy5lbC5wYXJlbnROb2RlKSB7XG4gICAgICB0aGlzLmVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5lbCk7XG4gICAgfVxuXG4gICAgdGhpcy51bnNldFBhcmFtcyh0aGlzLmRlZmF1bHRzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGNvbXBvbmVudCB0byB1c2UgYSBuZXcgZWxlbWVudCBvciByZXBhcnNlIGZyb21cbiAgICogdGhlIGV4aXN0aW5nIGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWwgT3B0aW9uYWxcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyBPcHRpb25hbFxuICAgKi9cblxuXG4gIEJhc2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZShlbCkge1xuICAgIHZhciBwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG5cbiAgICBpZiAodGhpcy5fcmVtb3ZlRXZlbnRMaXN0ZW5lcnMpIHtcbiAgICAgIHRoaXMuX3JlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfVxuXG4gICAgKHRoaXMuX2NhY2hlRWxlbWVudHMgfHwgbm9vcCkuY2FsbCh0aGlzLCBlbCB8fCB0aGlzLmVsLCBwYXJhbXMpO1xuICAgICh0aGlzLl9wYXJzZVBhcmFtcyB8fCBub29wKS5jYWxsKHRoaXMpO1xuXG4gICAgaWYgKHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKSB7XG4gICAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBTZXQgYSBoYXNoIG9mIHBhcmFtZXRlcnMgaWYgdGhleSdyZSB3aGl0ZWxpc3RlZCBvciB3ZSdyZSB0b2xkIHRvIGZvcmNlIHRoZSBzZXQuXG4gICAqIFRoaXMgaXMgdXNlZCB0byBzZXQgaW5pdGlhbCB2YWx1ZXMgYXMgd2VsbCBhcyBzZXQgcGFzc2VkIHBhcmFtZXRlcnMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICogQHBhcmFtIHtCb29sZWFufSBmb3JjZSBGb3JjZSBzZXR0aW5nIGV2ZW4gaWYgdGhlIHBhcmFtIGlzIG5vdCB3aGl0ZWxpc3RlZC5cbiAgICovXG5cblxuICBCYXNlLnByb3RvdHlwZS5zZXRQYXJhbXMgPSBmdW5jdGlvbiBzZXRQYXJhbXMocGFyYW1zLCBmb3JjZSkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAoMCwgX2VhY2gyLmRlZmF1bHQpKHBhcmFtcywgZnVuY3Rpb24gKGssIHYpIHtcbiAgICAgIGlmIChfdGhpcy5fd2hpdGVsaXN0ZWRQYXJhbXMuaW5kZXhPZihrKSAhPT0gLTEgfHwgZm9yY2UpIHtcbiAgICAgICAgX3RoaXNba10gPSB2O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIFVuc2V0IGFsbCBwYXJhbWV0ZXJzLlxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0ga2V5c1xuICAgKiBAcGFyYW0ge09iamVjdH0gc2NvcGUgVGhlIG9iamVjdCB0byB1bnNldCB0aGUgcGFyYW1zIGZyb20uIERlZmF1bHRzIHRvIGB0aGlzYC5cbiAgICovXG5cblxuICBCYXNlLnByb3RvdHlwZS51bnNldFBhcmFtcyA9IGZ1bmN0aW9uIHVuc2V0UGFyYW1zKGtleXMsIHNjb3BlKSB7XG5cbiAgICBrZXlzID0ga2V5cyBpbnN0YW5jZW9mIEFycmF5ID8ga2V5cyA6IE9iamVjdC5rZXlzKGtleXMpO1xuICAgIHNjb3BlID0gc2NvcGUgfHwgdGhpcztcbiAgICAoMCwgX2VhY2gyLmRlZmF1bHQpKGtleXMsIGZ1bmN0aW9uIChrKSB7XG4gICAgICBkZWxldGUgc2NvcGVba107XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICByZXR1cm4gQmFzZTtcbn0oKTtcblxuLyoqXG4gKiBXaGl0ZWxpc3RlZCBwYXJhbWV0ZXJzIHdoaWNoIGNhbiBiZSBzZXQgb24gY29uc3RydWN0aW9uLlxuICogQHR5cGUge0FycmF5fVxuICovXG5cblxuQmFzZS5wcm90b3R5cGUuX3doaXRlbGlzdGVkUGFyYW1zID0gW107XG5cbi8qKlxuICogRGVmYXVsdCB2YWx1ZXMgZm9yIGludGVybmFsIHByb3BlcnRpZXMgd2Ugd2lsbCBiZSBzZXR0aW5nLlxuICogVGhlc2UgYXJlIHNldCBvbiBlYWNoIGNvbnN0cnVjdGlvbiBzbyB3ZSBkb24ndCBsZWFrIHByb3BlcnRpZXNcbiAqIGludG8gdGhlIHByb3RvdHlwZSBjaGFpbi5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbkJhc2UucHJvdG90eXBlLmRlZmF1bHRzID0ge307XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEJhc2U7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2UuanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfYmFzZSA9IHJlcXVpcmUoJy4vYmFzZScpO1xuXG52YXIgX2Jhc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYmFzZSk7XG5cbnZhciBfaGVpZ2h0ID0gcmVxdWlyZSgnLi4vaGVscGVycy9hbmltYXRpb24vaGVpZ2h0Jyk7XG5cbnZhciBfaGVpZ2h0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hlaWdodCk7XG5cbnZhciBfdHJhbnNmb3JtID0gcmVxdWlyZSgnLi4vaGVscGVycy9jc3MvdHJhbnNmb3JtJyk7XG5cbnZhciBfdHJhbnNmb3JtMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RyYW5zZm9ybSk7XG5cbnZhciBfYWRkQ2xhc3MgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2RvbS9hZGQtY2xhc3MnKTtcblxudmFyIF9hZGRDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hZGRDbGFzcyk7XG5cbnZhciBfcmVtb3ZlQ2xhc3MgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2RvbS9yZW1vdmUtY2xhc3MnKTtcblxudmFyIF9yZW1vdmVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZW1vdmVDbGFzcyk7XG5cbnZhciBfaGFzQ2xhc3MgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2RvbS9oYXMtY2xhc3MnKTtcblxudmFyIF9oYXNDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oYXNDbGFzcyk7XG5cbnZhciBfaGFzUGFyZW50ID0gcmVxdWlyZSgnLi4vaGVscGVycy90cmF2ZXJzYWwvaGFzLXBhcmVudCcpO1xuXG52YXIgX2hhc1BhcmVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oYXNQYXJlbnQpO1xuXG52YXIgX2dldFBhcmVudCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvdHJhdmVyc2FsL2dldC1wYXJlbnQnKTtcblxudmFyIF9nZXRQYXJlbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UGFyZW50KTtcblxudmFyIF9nZXRQYXJlbnRzID0gcmVxdWlyZSgnLi4vaGVscGVycy90cmF2ZXJzYWwvZ2V0LXBhcmVudHMnKTtcblxudmFyIF9nZXRQYXJlbnRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFBhcmVudHMpO1xuXG52YXIgX2dldENoaWxkID0gcmVxdWlyZSgnLi4vaGVscGVycy90cmF2ZXJzYWwvZ2V0LWNoaWxkJyk7XG5cbnZhciBfZ2V0Q2hpbGQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0Q2hpbGQpO1xuXG52YXIgX3dyYXBFbGVtZW50ID0gcmVxdWlyZSgnLi4vaGVscGVycy9tYW5pcHVsYXRpb24vd3JhcC1lbGVtZW50Jyk7XG5cbnZhciBfd3JhcEVsZW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd3JhcEVsZW1lbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9IC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogIyBNZW51XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIG5ldyBNZW51KGVsLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiAgIC8vIE9wdGlvbmFsLiBDYWxsYmFjayBtZXRob2QgZm9yIHdoZW4gdGhlIG1lbnUgdG9nZ2xlcy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqICAgb25Ub2dnbGU6IGZ1bmN0aW9uKCl7fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQG1vZHVsZSBjb21wb25lbnRzL21lbnUuanNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuXG5cbnZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuXG52YXIgTWVudSA9IGZ1bmN0aW9uIChfQmFzZUNvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoTWVudSwgX0Jhc2VDb21wb25lbnQpO1xuXG4gIC8qKlxuICAgKiBNZW51IGNvbnN0cnVjdG9yLlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAgICovXG4gIGZ1bmN0aW9uIE1lbnUoZWwpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZW51KTtcblxuICAgIHBhcmFtcy5lbFJlcXVpcmVkID0gdHJ1ZTtcblxuICAgIGlmICghKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0Jhc2VDb21wb25lbnQuY2FsbCh0aGlzLCBlbCwgcGFyYW1zKSksIF90aGlzKSkge1xuICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzKTtcbiAgICB9XG5cbiAgICBfdGhpcy5fYmluZEV2ZW50TGlzdGVuZXJDYWxsYmFja3MoKTtcbiAgICBfdGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICBfdGhpcy5fY2hlY2tBbmltYXRpb24oKTtcbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3JlIGEgcmVmZXJlbmNlIHRvIHRoZSB0YWJzIGxpc3QsIGVhY2ggdGFiIGFuZCBlYWNoIHBhbmVsLlxuICAgKiBTZXQgd2hpY2ggdGFiIGlzIGFjdGl2ZSwgb3IgdXNlIHRoZSBmaXJzdC5cbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgKi9cblxuXG4gIE1lbnUucHJvdG90eXBlLl9jYWNoZUVsZW1lbnRzID0gZnVuY3Rpb24gX2NhY2hlRWxlbWVudHMoZWwpIHtcbiAgICB0aGlzLmVsID0gZWw7XG4gICAgdGhpcy50b2dnbGVFbCA9IHRoaXMuZWwucXVlcnlTZWxlY3RvcignLnNwYXJrLW1lbnVfX3RvZ2dsZScpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYm91bmQgdmVyc2lvbnMgb2YgZXZlbnQgbGlzdGVuZXIgY2FsbGJhY2tzIGFuZCBzdG9yZSB0aGVtLlxuICAgKiBPdGhlcndpc2Ugd2UgY2FuJ3QgdW5iaW5kIGZyb20gdGhlc2UgZXZlbnRzIGxhdGVyIGJlY2F1c2UgdGhlXG4gICAqIGZ1bmN0aW9uIHNpZ25hdHVyZXMgd29uJ3QgbWF0Y2guXG4gICAqL1xuXG5cbiAgTWVudS5wcm90b3R5cGUuX2JpbmRFdmVudExpc3RlbmVyQ2FsbGJhY2tzID0gZnVuY3Rpb24gX2JpbmRFdmVudExpc3RlbmVyQ2FsbGJhY2tzKCkge1xuICAgIHRoaXMuX29uQ2xpY2tCb3VuZCA9IHRoaXMuX29uQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLl9vbkZvY3VzQm91bmQgPSB0aGlzLl9vbkZvY3VzLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fb25CbHVyQm91bmQgPSB0aGlzLl9vbkJsdXIuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9vbktleWRvd25Cb3VuZCA9IHRoaXMuX29uS2V5ZG93bi5iaW5kKHRoaXMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBZGQgZXZlbnQgbGlzdGVuZXJzIGZvciBET00gZXZlbnRzLlxuICAgKi9cblxuXG4gIE1lbnUucHJvdG90eXBlLl9hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uIF9hZGRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fb25DbGlja0JvdW5kKTtcbiAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcy5fb25Gb2N1c0JvdW5kLCB0cnVlKTtcbiAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCB0aGlzLl9vbkJsdXJCb3VuZCwgdHJ1ZSk7XG4gICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fb25LZXlkb3duQm91bmQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzIGZvciBET00gZXZlbnRzLi5cbiAgICovXG5cblxuICBNZW51LnByb3RvdHlwZS5fcmVtb3ZlRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuX29uQ2xpY2tCb3VuZCk7XG4gICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIHRoaXMuX29uRm9jdXNCb3VuZCk7XG4gICAgdGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdibHVyJywgdGhpcy5fb25CbHVyQm91bmQpO1xuICAgIHRoaXMuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX29uS2V5ZG93bkJvdW5kKTtcbiAgfTtcblxuICAvKipcbiAgICogVG9nZ2xlIHRoZSBvcGVuIHN0YXRlIG9mIGFuIGl0ZW0uXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gaXRlbVxuICAgKi9cblxuXG4gIE1lbnUucHJvdG90eXBlLl90b2dnbGVJdGVtID0gZnVuY3Rpb24gX3RvZ2dsZUl0ZW0oaXRlbSkge1xuXG4gICAgaWYgKCgwLCBfaGFzQ2xhc3MyLmRlZmF1bHQpKGl0ZW0sICdvcGVuJykpIHtcbiAgICAgIHRoaXMuX2Nsb3NlSXRlbShpdGVtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fb3Blbkl0ZW0oaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBUb2dnbGUgYXJpYS1jaGVja2VkIHN0YXRlIG9mIHRoZSBFeHBhbmQvQ29sbGFwc2UgdG9nZ2xlIGNhcmV0c1xuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGl0ZW1cbiAgICovXG5cblxuICBNZW51LnByb3RvdHlwZS5fdG9nZ2xlQXJpYUNoZWNrZWRTdGF0ZSA9IGZ1bmN0aW9uIF90b2dnbGVBcmlhQ2hlY2tlZFN0YXRlKGl0ZW0pIHtcbiAgICBpZiAoaXRlbS5oYXNBdHRyaWJ1dGUoJ2FyaWEtY2hlY2tlZCcpKSB7XG4gICAgICB2YXIgYXJpYVN0YXRlID0gaXRlbS5nZXRBdHRyaWJ1dGUoJ2FyaWEtY2hlY2tlZCcpID09PSAndHJ1ZSc7XG4gICAgICBpdGVtLnNldEF0dHJpYnV0ZSgnYXJpYS1jaGVja2VkJywgU3RyaW5nKCFhcmlhU3RhdGUpKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIENoZWNrIGZvciBhIG5lc3RlZCBsaXN0IGFuZCBjcmVhdGUgdGhlIHdyYXBwZXJzIG5lZWRlZFxuICAgKiBmb3IgYW5pbWF0aW5nIHRoZSBsaXN0c1xuICAgKlxuICAgKi9cblxuXG4gIE1lbnUucHJvdG90eXBlLl9jaGVja0FuaW1hdGlvbiA9IGZ1bmN0aW9uIF9jaGVja0FuaW1hdGlvbigpIHtcbiAgICBpZiAodGhpcy5lbC5xdWVyeVNlbGVjdG9yKCcuc3BhcmstbWVudV9fbGlzdC1uZXh0JykpIHtcbiAgICAgIHRoaXMuY2FjaGVkTGlzdCA9IHRoaXMuY2FjaGVkTGlzdCB8fCBbXTtcbiAgICAgIHRoaXMuX2NyZWF0ZU1lbnVBbmltYXRpb25XcmFwcGVyKCk7XG4gICAgICB0aGlzLl9hbmltYXRlTGlzdENoYW5nZSgpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQ3JlYXRlIHdyYXBwZXIgY2xhc3MgdG8gaGVscCB3aXRoIGFuaW1hdGlvbiBvZiBzbGlkaW5nIGxpc3RzXG4gICAqXG4gICAqL1xuXG5cbiAgTWVudS5wcm90b3R5cGUuX2NyZWF0ZU1lbnVBbmltYXRpb25XcmFwcGVyID0gZnVuY3Rpb24gX2NyZWF0ZU1lbnVBbmltYXRpb25XcmFwcGVyKCkge1xuICAgIGlmICh0aGlzLndyYXBwZXJFbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB3cmFwcGVyRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAoMCwgX2FkZENsYXNzMi5kZWZhdWx0KSh3cmFwcGVyRWwsICdzcGFyay1tZW51X19hbmltYXRpb24td3JhcHBlcicpO1xuICAgICgwLCBfd3JhcEVsZW1lbnQyLmRlZmF1bHQpKHRoaXMuZWwucXVlcnlTZWxlY3RvcignLnNwYXJrLW1lbnVfX2xpc3QnKSwgd3JhcHBlckVsKTtcbiAgICB0aGlzLndyYXBwZXJFbCA9IHdyYXBwZXJFbDtcbiAgfTtcblxuICAvKipcbiAgICogQW5pbWF0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGFuaW1hdGlvbiB3cmFwcGVyLiBPcHRpb25hbGx5LCBkb1xuICAgKiBzbyBpbW1lZGlhdGVseSB3aXRob3V0IHdhaXRpbmcgZm9yIGFuIGFuaW1hdGlvbi5cbiAgICogQHBhcmFtIHtCb29sZWFufSBub0FuaW1hdGVcbiAgICovXG5cblxuICBNZW51LnByb3RvdHlwZS5fYW5pbWF0ZUxpc3RDaGFuZ2UgPSBmdW5jdGlvbiBfYW5pbWF0ZUxpc3RDaGFuZ2Uobm9BbmltYXRlKSB7XG5cbiAgICBpZiAobm9BbmltYXRlKSB7XG4gICAgICAoMCwgX2FkZENsYXNzMi5kZWZhdWx0KSh0aGlzLndyYXBwZXJFbCwgJ25vLWFuaW1hdGUnKTtcbiAgICB9XG5cbiAgICB0aGlzLndyYXBwZXJFbC5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgKDAsIF90cmFuc2Zvcm0yLmRlZmF1bHQpKCd0cmFuc2xhdGVYJywgJy0nICsgdGhpcy5jYWNoZWRMaXN0Lmxlbmd0aCAqIDEwMCArICclJykpO1xuXG4gICAgaWYgKG5vQW5pbWF0ZSkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICgwLCBfcmVtb3ZlQ2xhc3MyLmRlZmF1bHQpKHRoaXMud3JhcHBlckVsLCAnbm8tYW5pbWF0ZScpO1xuICAgICAgfS5iaW5kKHRoaXMpLCAxKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEFwcGVuZCBsaXN0IHRvIG1lbnUgZWxlbWVudFxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGxpc3RcbiAgICogQHBhcmFtIHtCb29sZWFufSBub0FuaW1hdGVcbiAgICovXG5cblxuICBNZW51LnByb3RvdHlwZS5fYXBwZW5kTGlzdCA9IGZ1bmN0aW9uIF9hcHBlbmRMaXN0KGl0ZW0sIG5vQW5pbWF0ZSkge1xuXG4gICAgLy8gQ3JlYXRlIHdyYXBwZXJcbiAgICB0aGlzLl9jcmVhdGVNZW51QW5pbWF0aW9uV3JhcHBlcigpO1xuXG4gICAgdmFyIG5ld0xpc3QgPSBpdGVtLmNsb25lTm9kZSh0cnVlKTtcbiAgICAoMCwgX2FkZENsYXNzMi5kZWZhdWx0KShuZXdMaXN0LCAnbmVzdGVkTGlzdCcpO1xuICAgIG5ld0xpc3Quc2V0QXR0cmlidXRlKCdkYXRhLW5lc3RlZC1saXN0LWlkJywgbmV3TGlzdC5nZXRBdHRyaWJ1dGUoJ2lkJykpO1xuICAgIG5ld0xpc3QucmVtb3ZlQXR0cmlidXRlKCdpZCcpO1xuXG4gICAgaWYgKHRoaXMud3JhcHBlckVsKSB7XG4gICAgICAvLyBBZGQgY2hpbGQgbm9kZSB0byB3cmFwcGVyXG4gICAgICB0aGlzLndyYXBwZXJFbC5hcHBlbmRDaGlsZChuZXdMaXN0KTtcbiAgICAgIC8vIEFkZCB0byBjYWNoZWQgQXJyYXkgdG8ga2VlcCB0cmFjayBvZiBhbGwgYWRkZWQgbGlzdHNcbiAgICAgIHRoaXMuY2FjaGVkTGlzdC5wdXNoKG5ld0xpc3QpO1xuICAgICAgLy8gU2xpZGUgbmF2aWdhdGlvblxuICAgICAgdGhpcy5fYW5pbWF0ZUxpc3RDaGFuZ2Uobm9BbmltYXRlKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBsaXN0IHRvIG5hdlxuICAgKlxuICAgKi9cblxuXG4gIE1lbnUucHJvdG90eXBlLl9yZW1vdmVMYXN0TGlzdCA9IGZ1bmN0aW9uIF9yZW1vdmVMYXN0TGlzdCgpIHtcbiAgICAvLyBJZiB0aGVyZSBhcmUgYW55IGl0ZW1zIHRvIHJlbW92ZVxuICAgIGlmICh0aGlzLmNhY2hlZExpc3QubGVuZ3RoKSB7XG4gICAgICAvLyBSZXRyaWV2ZSBsYXN0IGl0ZW0gZnJvbSBsaXN0XG4gICAgICB2YXIgcmVtb3ZlRWxlbWVudCA9IHRoaXMuY2FjaGVkTGlzdC5wb3AoKTtcbiAgICAgIGlmICh0aGlzLndyYXBwZXJFbCkge1xuICAgICAgICAvLyBTbGlkZSBuYXZpZ2F0aW9uXG4gICAgICAgIHRoaXMuX2FuaW1hdGVMaXN0Q2hhbmdlKCk7XG4gICAgICB9XG4gICAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFJlbW92ZSBpdHNlbGYgZnJvbSBET01cbiAgICAgICAgcmVtb3ZlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHJlbW92ZUVsZW1lbnQpO1xuICAgICAgfSwgMjUwKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbGwgbGlzdHMgZnJvbSBwYW5lbCBtZW51XG4gICAqXG4gICAqL1xuXG5cbiAgTWVudS5wcm90b3R5cGUuX3JlbW92ZUFsbENhY2hlZExpc3RzID0gZnVuY3Rpb24gX3JlbW92ZUFsbENhY2hlZExpc3RzKCkge1xuICAgIGlmICh0aGlzLmNhY2hlZExpc3QpIHtcbiAgICAgIC8vIElmIHRoZXJlIGFyZSBhbnkgaXRlbXMgdG8gcmVtb3ZlXG4gICAgICB3aGlsZSAodGhpcy5jYWNoZWRMaXN0Lmxlbmd0aCkge1xuICAgICAgICAvLyBXaGlsZSB0aGVyZSBhcmUgc3RpbGwgaXRlbXMsIHJlbW92ZSB0aGVtXG4gICAgICAgIHRoaXMuX3JlbW92ZUxhc3RMaXN0KCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBGaW5kcyBhbmQgcmV0dXJucyB0aGUgbmV4dCBuZXN0ZWQgbGlzdFxuICAgKiBAcGFyYW0ge09iamVjdH0gaXRlbVxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuXG5cbiAgTWVudS5wcm90b3R5cGUuX2dldE5leHRMaXN0ID0gZnVuY3Rpb24gX2dldE5leHRMaXN0KGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbS5xdWVyeVNlbGVjdG9yKCcuc3BhcmstbWVudV9fbGlzdC1uZXh0JykgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGl0ZW0ucXVlcnlTZWxlY3RvcignLnNwYXJrLW1lbnVfX2xpc3QtbmV4dCcpLmdldEF0dHJpYnV0ZSgnZGF0YS1tZW51JykpIDogbnVsbDtcbiAgfTtcblxuICAvKipcbiAgICogT3BlbiBhbiBpdGVtIGJ5IGFuaW1hdGluZyBpdC5cbiAgICogQHBhcmFtIHtPYmplY3R9IGl0ZW1cbiAgICovXG5cblxuICBNZW51LnByb3RvdHlwZS5fb3Blbkl0ZW0gPSBmdW5jdGlvbiBfb3Blbkl0ZW0oaXRlbSkge1xuXG4gICAgLy8gSXRlbSBpcyBhbHJlYWR5IG9wZW5cbiAgICBpZiAoKDAsIF9oYXNDbGFzczIuZGVmYXVsdCkoaXRlbSwgJ29wZW4nKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgICgwLCBfaGVpZ2h0Mi5kZWZhdWx0KSh7XG4gICAgICBlbDogaXRlbSxcbiAgICAgIHRvZ2dsZUVsOiAnLnNwYXJrLW1lbnVfX2xpc3QnXG4gICAgfSk7XG5cbiAgICAoMCwgX2FkZENsYXNzMi5kZWZhdWx0KShpdGVtLCAnb3BlbicpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDbG9zZSBhbiBpdGVtIGJ5IGFuaW1hdGluZyBpdCBzaHV0LlxuICAgKiBAcGFyYW0ge09iamVjdH0gaXRlbVxuICAgKi9cblxuXG4gIE1lbnUucHJvdG90eXBlLl9jbG9zZUl0ZW0gPSBmdW5jdGlvbiBfY2xvc2VJdGVtKGl0ZW0pIHtcblxuICAgIC8vIEl0ZW0gaXMgYWxyZWFkeSBjbG9zZWRcbiAgICBpZiAoISgwLCBfaGFzQ2xhc3MyLmRlZmF1bHQpKGl0ZW0sICdvcGVuJykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAoMCwgX2hlaWdodDIuZGVmYXVsdCkoe1xuICAgICAgZWw6IGl0ZW0sXG4gICAgICB0b2dnbGVFbDogJy5zcGFyay1tZW51X19saXN0JyxcbiAgICAgIHRvZ2dsZVZhbHVlOiAnbm9uZScsXG4gICAgICBhY3Rpb246ICdjb2xsYXBzZSdcbiAgICB9KTtcblxuICAgICgwLCBfcmVtb3ZlQ2xhc3MyLmRlZmF1bHQpKGl0ZW0sICdvcGVuJyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIE1ha2UgYW4gaXRlbSBhY3RpdmUuXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gaXRlbVxuICAgKi9cblxuXG4gIE1lbnUucHJvdG90eXBlLl9hY3RpdmF0ZUl0ZW0gPSBmdW5jdGlvbiBfYWN0aXZhdGVJdGVtKGl0ZW0pIHtcblxuICAgIC8vIEl0ZW0gaXMgYWxyZWFkeSBhY3RpdmVcbiAgICBpZiAoKDAsIF9oYXNDbGFzczIuZGVmYXVsdCkoaXRlbSwgJ2FjdGl2ZScpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gRGVhY3RpdmF0ZSBhbnkgYWN0aXZlIGl0ZW1zXG4gICAgdmFyIHBhcmVudHMgPSAoMCwgX2dldFBhcmVudHMyLmRlZmF1bHQpKGl0ZW0sICcuc3BhcmstbWVudV9fbGlzdCcsIHRoaXMuZWwpO1xuICAgIHRoaXMuX2RlYWN0aXZhdGVJdGVtcyhwYXJlbnRzW3BhcmVudHMubGVuZ3RoIC0gMV0pO1xuICAgIHRoaXMuX2RlYWN0aXZhdGVJdGVtU2libGluZ3MoaXRlbSk7XG5cbiAgICAvLyBBZGQgdGhlIGFjdGl2ZSBjbGFzc1xuICAgICgwLCBfYWRkQ2xhc3MyLmRlZmF1bHQpKGl0ZW0sICdhY3RpdmUnKTtcblxuICAgIC8vIElmIHRoZXJlIGlzIGEgcGFyZW50IHRoYXQgaXMgYWxzbyBhIGxpc3QgaXRlbSwgb3BlbiBpdC5cbiAgICB0aGlzLl9hY3RpdmF0ZUl0ZW1QYXJlbnRzKGl0ZW0sIHRoaXMuZWwpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBY3RpdmF0ZSBwYXJlbnQgaXRlbXMuXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICogQHBhcmFtIHtFbGVtZW50fSBsaW1pdEVsXG4gICAqL1xuXG5cbiAgTWVudS5wcm90b3R5cGUuX2FjdGl2YXRlSXRlbVBhcmVudHMgPSBmdW5jdGlvbiBfYWN0aXZhdGVJdGVtUGFyZW50cyhlbCwgbGltaXRFbCkge1xuXG4gICAgdmFyIHBhcmVudHMgPSAoMCwgX2dldFBhcmVudHMyLmRlZmF1bHQpKGVsLnBhcmVudE5vZGUsICdbY2xhc3MqPVwibGlzdC1pdGVtXCJdJywgbGltaXRFbCk7XG5cbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IHBhcmVudHMubGVuZ3RoO1xuXG4gICAgLy8gQWRkIHRoZSBhY3RpdmUgY2xhc3NcbiAgICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB0aGlzLl9vcGVuSXRlbShwYXJlbnRzW2ldKTtcbiAgICAgICgwLCBfYWRkQ2xhc3MyLmRlZmF1bHQpKHBhcmVudHNbaV0sICdjaGlsZC1hY3RpdmUnKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIERlYWN0aXZhdGUgaXRlbXMuXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICovXG5cblxuICBNZW51LnByb3RvdHlwZS5fZGVhY3RpdmF0ZUl0ZW1zID0gZnVuY3Rpb24gX2RlYWN0aXZhdGVJdGVtcyhlbCkge1xuXG4gICAgdmFyIGFjdGl2ZXMgPSBlbC5xdWVyeVNlbGVjdG9yQWxsKCdbY2xhc3MqPVwibGlzdC1pdGVtXCJdLmFjdGl2ZScpO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbGVuID0gYWN0aXZlcy5sZW5ndGg7XG5cbiAgICAvLyBSZW1vdmUgdGhlIGFjdGl2ZSBjbGFzc1xuICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICgwLCBfcmVtb3ZlQ2xhc3MyLmRlZmF1bHQpKGFjdGl2ZXMuaXRlbShpKSwgJ2FjdGl2ZScpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogRGVhY3RpdmF0ZSBzaWJsaW5ncyBpdGVtcy5cbiAgICogQHBhcmFtIHtFbGVtZW50fSBlbFxuICAgKi9cblxuXG4gIE1lbnUucHJvdG90eXBlLl9kZWFjdGl2YXRlSXRlbVNpYmxpbmdzID0gZnVuY3Rpb24gX2RlYWN0aXZhdGVJdGVtU2libGluZ3MoZWwpIHtcblxuICAgIHZhciBhY3RpdmVzID0gZWwucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKCdbY2xhc3MqPVwibGlzdC1pdGVtXCJdLmNoaWxkLWFjdGl2ZScpO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbGVuID0gYWN0aXZlcy5sZW5ndGg7XG5cbiAgICAvLyBSZW1vdmUgdGhlIGFjdGl2ZSBjbGFzc1xuICAgIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICgwLCBfcmVtb3ZlQ2xhc3MyLmRlZmF1bHQpKGFjdGl2ZXNbaV0sICdjaGlsZC1hY3RpdmUnKTtcbiAgICAgICgwLCBfcmVtb3ZlQ2xhc3MyLmRlZmF1bHQpKGFjdGl2ZXNbaV0sICdvcGVuJyk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBPcGVuIHRoZSBwYXJlbnRzIG9mIHRoZSBhY3RpdmUgaXRlbS5cbiAgICpcbiAgICovXG5cblxuICBNZW51LnByb3RvdHlwZS5fb3BlbkFjdGl2ZVBhcmVudHMgPSBmdW5jdGlvbiBfb3BlbkFjdGl2ZVBhcmVudHMoKSB7XG5cbiAgICB2YXIgYWN0aXZlSXRlbSA9IHRoaXMuZWwucXVlcnlTZWxlY3RvcignLmFjdGl2ZScpO1xuICAgIGlmIChhY3RpdmVJdGVtKSB7XG4gICAgICB2YXIgcGFyZW50SXRlbXMgPSAoMCwgX2dldFBhcmVudHMyLmRlZmF1bHQpKGFjdGl2ZUl0ZW0sICcuc3BhcmstbWVudV9fbGlzdC1pdGVtJywgdGhpcy5lbCk7XG4gICAgICB2YXIgaXRlbUxpbmtzO1xuICAgICAgdmFyIG5leHRMaXN0O1xuXG4gICAgICBmb3IgKHZhciBpID0gcGFyZW50SXRlbXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgaXRlbUxpbmtzID0gKDAsIF9nZXRDaGlsZDIuZGVmYXVsdCkocGFyZW50SXRlbXNbaV0sICcuc3BhcmstbWVudV9fbGlzdC1saW5rcycpO1xuICAgICAgICBpZiAoaXRlbUxpbmtzICYmIGl0ZW1MaW5rcy5xdWVyeVNlbGVjdG9yKCcuc3BhcmstbWVudV9fbGlzdC1uZXh0JykpIHtcbiAgICAgICAgICBuZXh0TGlzdCA9IHRoaXMuX2dldE5leHRMaXN0KHBhcmVudEl0ZW1zW2ldKTtcbiAgICAgICAgICBpZiAobmV4dExpc3QgJiYgIXRoaXMuX2NhY2hlZExpc3RDb250YWluc0lEKG5leHRMaXN0LmdldEF0dHJpYnV0ZSgnaWQnKSkpIHtcbiAgICAgICAgICAgIHRoaXMuX2FwcGVuZExpc3QobmV4dExpc3QsIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAoMCwgX2FkZENsYXNzMi5kZWZhdWx0KShwYXJlbnRJdGVtc1tpXSwgJ29wZW4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIGNhY2hlZCBsaXN0IGNvbnRhaW5zIGEgY2VydGFpbiBJRFxuICAgKiBAcGFyYW0ge1N0cmluZ30gaWRcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG5cblxuICBNZW51LnByb3RvdHlwZS5fY2FjaGVkTGlzdENvbnRhaW5zSUQgPSBmdW5jdGlvbiBfY2FjaGVkTGlzdENvbnRhaW5zSUQoaWQpIHtcbiAgICB2YXIgaSA9IHRoaXMuY2FjaGVkTGlzdC5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgaWYgKHRoaXMuY2FjaGVkTGlzdFtpXS5nZXRBdHRyaWJ1dGUoJ2RhdGEtbmVzdGVkLWxpc3QtaWQnKSA9PT0gaWQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICAvKipcbiAgICogV2hlbiBhbiBpdGVtIGlzIGNsaWNrZWQsIG1ha2UgaXQgYWN0aXZlLiBEZXRlcm1pbmUgaWYgdGhlIGNsaWNrIHdhcyBvbiBhbiBleHBhbmRcbiAgICogYnV0dG9uIGFuZCBvcGVuIHRoZSBsaXN0IGlmIHNvLlxuICAgKiBAdG9kbzogSXQgc2hvdWxkIGJlIHBvc3NpYmxlIHRvIG9wdCBvdXQgb2YgdGhpcyBiZWhhdmlvci5cbiAgICogQHBhcmFtIHtPYmplY3R9IGVcbiAgICovXG5cblxuICBNZW51LnByb3RvdHlwZS5fb25DbGljayA9IGZ1bmN0aW9uIF9vbkNsaWNrKGUpIHtcblxuICAgIC8vIERvbid0IG1ha2UgZm9ybXMgYWN0aXZlXG4gICAgaWYgKCgwLCBfZ2V0UGFyZW50Mi5kZWZhdWx0KShlLnRhcmdldCwgJ2Zvcm0nLCB0aGlzLmVsKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFRvZ2dsZSB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgbWVudT9cbiAgICB2YXIgdG9nZ2xlID0gZS50YXJnZXQgPT09IHRoaXMudG9nZ2xlRWwgfHwgKDAsIF9oYXNQYXJlbnQyLmRlZmF1bHQpKGUudGFyZ2V0LCB0aGlzLnRvZ2dsZUVsKTtcbiAgICBpZiAodG9nZ2xlKSB7XG4gICAgICByZXR1cm4gKHRoaXMub25Ub2dnbGUgfHwgbm9vcCkoZSwgdGhpcyk7XG4gICAgfVxuXG4gICAgLy8gSXMgdGhlcmUgYSBwYXJlbnQgdG8gb3BlbiBhbmQgYW4gaXRlbT9cbiAgICB2YXIgb3BlbiA9ICgwLCBfZ2V0UGFyZW50Mi5kZWZhdWx0KShlLnRhcmdldCwgJy5zcGFyay1tZW51X19saXN0LWV4cGFuZCcsIHRoaXMuZWwpO1xuICAgIHZhciBpdGVtID0gKDAsIF9nZXRQYXJlbnQyLmRlZmF1bHQpKGUudGFyZ2V0LCAnLnNwYXJrLW1lbnVfX2xpc3QtaXRlbScsIHRoaXMuZWwpO1xuXG4gICAgLy8gSWYgd2UgaGF2ZSBubyBpdGVtIG9yIGhhdmUgYmVlbiB0b2xkIHRvIGlnbm9yZSB0aGUgaXRlbVxuICAgIGlmICghaXRlbSB8fCAoMCwgX2dldFBhcmVudDIuZGVmYXVsdCkoZS50YXJnZXQsICcuc3BhcmstbWVudV9faWdub3JlJywgdGhpcy5lbCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG9wZW4pIHtcbiAgICAgIHRoaXMuX3RvZ2dsZUFyaWFDaGVja2VkU3RhdGUob3Blbik7XG4gICAgICByZXR1cm4gdGhpcy5fdG9nZ2xlSXRlbShpdGVtKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBpZiB3ZSBoYXZlIGEgdmFsaWQgaXRlbSBhbmQgd2UgYXJlbid0IGluc2lkZSB0aGUgZXhwYW5kZWQgaGVhZGVyXG4gICAgaWYgKGl0ZW0gJiYgISgwLCBfaGFzUGFyZW50Mi5kZWZhdWx0KShlLnRhcmdldCwgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNwYXJrLWhlYWRlci0tdmlzaWJsZScpKSkge1xuXG4gICAgICB2YXIgbmV4dCA9IHRoaXMuX2dldE5leHRMaXN0KGl0ZW0pO1xuXG4gICAgICBpZiAobmV4dCAmJiAoMCwgX2hhc0NsYXNzMi5kZWZhdWx0KShlLnRhcmdldCwgJ3NwYXJrLW1lbnVfX2xpc3QtbmV4dCcpKSB7XG4gICAgICAgIC8vIEFjdGl2ZSBpdGVtXG4gICAgICAgIHRoaXMuX2FjdGl2YXRlSXRlbShpdGVtKTtcbiAgICAgICAgdGhpcy5fYXBwZW5kTGlzdChuZXh0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgYmFjayA9ICgwLCBfZ2V0UGFyZW50Mi5kZWZhdWx0KShlLnRhcmdldCwgJy5zcGFyay1tZW51X19saXN0LWJhY2snLCBpdGVtKTtcblxuICAgICAgaWYgKGJhY2sgJiYgKDAsIF9oYXNDbGFzczIuZGVmYXVsdCkoZS50YXJnZXQsICdzcGFyay1tZW51X19saXN0LWJhY2snKSkge1xuICAgICAgICB0aGlzLl9yZW1vdmVMYXN0TGlzdCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWN0aXZlIGl0ZW1cbiAgICB0aGlzLl9hY3RpdmF0ZUl0ZW0oaXRlbSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFdoZW4gdGhlIHNwYWNlIG9yIGVudGVyIGtleSBpcyBwcmVzc2VkIG9uIGEgZm9jdXNlZCBpdGVtLCBtYWtlIGl0IGFjdGl2ZS5cbiAgICogRGV0ZXJtaW5lIGlmIHRoZSBjbGljayB3YXMgb24gYW4gZXhwYW5kIGJ1dHRvbiBvciBsaW5rIGFuZCBvcGVuIHRoZSBsaXN0IGlmIHNvLlxuICAgKiBAdG9kbzogSXQgc2hvdWxkIGJlIHBvc3NpYmxlIHRvIG9wdCBvdXQgb2YgdGhpcyBiZWhhdmlvci5cbiAgICogQHBhcmFtIHtPYmplY3R9IGVcbiAgICovXG5cblxuICBNZW51LnByb3RvdHlwZS5fb25LZXlkb3duID0gZnVuY3Rpb24gX29uS2V5ZG93bihlKSB7XG4gICAgdmFyIGNvZGUgPSBlLmtleUNvZGUgfHwgZS53aGljaDtcblxuICAgIC8vIERvbid0IG1ha2UgZm9ybXMgYWN0aXZlXG4gICAgaWYgKCgwLCBfZ2V0UGFyZW50Mi5kZWZhdWx0KShlLnRhcmdldCwgJ2Zvcm0nLCB0aGlzLmVsKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFRvZ2dsZSB0aGUgdmlzaWJpbGl0eSBvZiB0aGUgbWVudT9cbiAgICB2YXIgdG9nZ2xlID0gZS50YXJnZXQgPT09IHRoaXMudG9nZ2xlRWwgfHwgKDAsIF9oYXNQYXJlbnQyLmRlZmF1bHQpKGUudGFyZ2V0LCB0aGlzLnRvZ2dsZUVsKTtcbiAgICBpZiAodG9nZ2xlKSB7XG4gICAgICByZXR1cm4gKHRoaXMub25Ub2dnbGUgfHwgbm9vcCkoZSwgdGhpcyk7XG4gICAgfVxuXG4gICAgLy8gSXMgdGhlcmUgYSBwYXJlbnQgdG8gb3BlbiBhbmQgYW4gaXRlbT9cbiAgICB2YXIgb3BlbiA9ICgwLCBfZ2V0UGFyZW50Mi5kZWZhdWx0KShlLnRhcmdldCwgJy5zcGFyay1tZW51X19saXN0LWV4cGFuZCcsIHRoaXMuZWwpO1xuICAgIHZhciBpdGVtID0gKDAsIF9nZXRQYXJlbnQyLmRlZmF1bHQpKGUudGFyZ2V0LCAnLnNwYXJrLW1lbnVfX2xpc3QtaXRlbScsIHRoaXMuZWwpO1xuXG4gICAgLy8gSWYgd2UgaGF2ZSBubyBpdGVtIG9yIGhhdmUgYmVlbiB0b2xkIHRvIGlnbm9yZSB0aGUgaXRlbVxuICAgIGlmICghaXRlbSB8fCAoMCwgX2dldFBhcmVudDIuZGVmYXVsdCkoZS50YXJnZXQsICcuc3BhcmstbWVudV9faWdub3JlJywgdGhpcy5lbCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG9wZW4pIHtcbiAgICAgIGlmIChjb2RlID09PSAzMiB8fCBjb2RlID09PSAxMykge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRoaXMuX3RvZ2dsZUFyaWFDaGVja2VkU3RhdGUob3Blbik7XG4gICAgICAgIHJldHVybiB0aGlzLl90b2dnbGVJdGVtKGl0ZW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIHdlIGhhdmUgYSB2YWxpZCBpdGVtIGFuZCB3ZSBhcmVuJ3QgaW5zaWRlIHRoZSBleHBhbmRlZCBoZWFkZXJcbiAgICBpZiAoaXRlbSAmJiAhKDAsIF9oYXNQYXJlbnQyLmRlZmF1bHQpKGUudGFyZ2V0LCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3BhcmstaGVhZGVyLS12aXNpYmxlJykpKSB7XG5cbiAgICAgIHZhciBuZXh0ID0gdGhpcy5fZ2V0TmV4dExpc3QoaXRlbSk7XG5cbiAgICAgIGlmIChuZXh0ICYmICgwLCBfaGFzQ2xhc3MyLmRlZmF1bHQpKGUudGFyZ2V0LCAnc3BhcmstbWVudV9fbGlzdC1uZXh0JykpIHtcbiAgICAgICAgaWYgKGNvZGUgPT09IDMyIHx8IGNvZGUgPT09IDEzKSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIC8vIEFjdGl2ZSBpdGVtXG4gICAgICAgICAgdGhpcy5fYWN0aXZhdGVJdGVtKGl0ZW0pO1xuICAgICAgICAgIHRoaXMuX2FwcGVuZExpc3QobmV4dCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBiYWNrID0gKDAsIF9nZXRQYXJlbnQyLmRlZmF1bHQpKGUudGFyZ2V0LCAnLnNwYXJrLW1lbnVfX2xpc3QtYmFjaycsIGl0ZW0pO1xuXG4gICAgICBpZiAoYmFjayAmJiAoMCwgX2hhc0NsYXNzMi5kZWZhdWx0KShlLnRhcmdldCwgJ3NwYXJrLW1lbnVfX2xpc3QtYmFjaycpKSB7XG4gICAgICAgIGlmIChjb2RlID09PSAzMiB8fCBjb2RlID09PSAxMykge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgIHRoaXMuX3JlbW92ZUxhc3RMaXN0KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDMyIHx8IGNvZGUgPT09IDEzKSB7XG4gICAgICB0aGlzLl9hY3RpdmF0ZUl0ZW0oaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBLZWVwIHRyYWNrIG9mIHdoZW4gaXRlbXMgaGF2ZSBmb2N1cy5cbiAgICogQHBhcmFtIHtPYmplY3R9IGVcbiAgICovXG5cblxuICBNZW51LnByb3RvdHlwZS5fb25Gb2N1cyA9IGZ1bmN0aW9uIF9vbkZvY3VzKGUpIHtcblxuICAgIHZhciBwYXJlbnQgPSBlLnRhcmdldDtcbiAgICB2YXIgbGFzdFBhcmVudCA9IHBhcmVudDtcblxuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIHBhcmVudCA9ICgwLCBfZ2V0UGFyZW50Mi5kZWZhdWx0KShsYXN0UGFyZW50LnBhcmVudE5vZGUsICcuc3BhcmstbWVudV9fbGlzdC1pdGVtJywgdGhpcy5lbCk7XG4gICAgICBpZiAoIXBhcmVudCB8fCBwYXJlbnQgPT09IGxhc3RQYXJlbnQpIGJyZWFrO1xuICAgICAgKDAsIF9hZGRDbGFzczIuZGVmYXVsdCkocGFyZW50LCAnaGFzLWZvY3VzJyk7XG4gICAgICBsYXN0UGFyZW50ID0gcGFyZW50O1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogS2VlcCB0cmFjayBvZiB3aGVuIGl0ZW1zIGxvc2UgZm9jdXMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlXG4gICAqL1xuXG5cbiAgTWVudS5wcm90b3R5cGUuX29uQmx1ciA9IGZ1bmN0aW9uIF9vbkJsdXIoZSkge1xuXG4gICAgdmFyIHBhcmVudCA9IGUudGFyZ2V0O1xuICAgIHZhciBsYXN0UGFyZW50ID0gcGFyZW50O1xuXG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgcGFyZW50ID0gKDAsIF9nZXRQYXJlbnQyLmRlZmF1bHQpKGxhc3RQYXJlbnQucGFyZW50Tm9kZSwgJy5zcGFyay1tZW51X19saXN0LWl0ZW0nLCB0aGlzLmVsKTtcbiAgICAgIGlmICghcGFyZW50IHx8IHBhcmVudCA9PT0gbGFzdFBhcmVudCkgYnJlYWs7XG4gICAgICAoMCwgX3JlbW92ZUNsYXNzMi5kZWZhdWx0KShwYXJlbnQsICdoYXMtZm9jdXMnKTtcbiAgICAgIGxhc3RQYXJlbnQgPSBwYXJlbnQ7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBNZW51O1xufShfYmFzZTIuZGVmYXVsdCk7XG5cbi8qKlxuICogV2hpdGVsaXN0ZWQgcGFyYW1ldGVycyB3aGljaCBjYW4gYmUgc2V0IG9uIGNvbnN0cnVjdGlvbi5cbiAqIEB0eXBlIHtBcnJheX1cbiAqL1xuXG5cbk1lbnUucHJvdG90eXBlLl93aGl0ZWxpc3RlZFBhcmFtcyA9IFsnb25Ub2dnbGUnXTtcblxuLyoqXG4gKiBEZWZhdWx0IHZhbHVlcyBmb3IgaW50ZXJuYWwgcHJvcGVydGllcyB3ZSB3aWxsIGJlIHNldHRpbmcuXG4gKiBUaGVzZSBhcmUgc2V0IG9uIGVhY2ggY29uc3RydWN0aW9uIHNvIHdlIGRvbid0IGxlYWsgcHJvcGVydGllc1xuICogaW50byB0aGUgcHJvdG90eXBlIGNoYWluLlxuICogQHR5cGUge09iamVjdH1cbiAqL1xuTWVudS5wcm90b3R5cGUuZGVmYXVsdHMgPSB7XG4gIGNhY2hlZExpc3Q6IG51bGwsXG4gIGVsOiBudWxsLFxuICB0b2dnbGVFbDogbnVsbCxcbiAgd3JhcHBlckVsOiBudWxsLFxuICBvblRvZ2dsZTogbnVsbCxcbiAgX29uQ2xpY2tCb3VuZDogbnVsbCxcbiAgX29uRm9jdXNCb3VuZDogbnVsbCxcbiAgX29uQmx1ckJvdW5kOiBudWxsLFxuICBfb25LZXlkb3duQm91bmQ6IG51bGxcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE1lbnU7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lbnUuanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfb3V0ZXJIZWlnaHQgPSByZXF1aXJlKCcuLi9kb20vb3V0ZXItaGVpZ2h0Jyk7XG5cbnZhciBfb3V0ZXJIZWlnaHQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb3V0ZXJIZWlnaHQpO1xuXG52YXIgX2FkZENsYXNzID0gcmVxdWlyZSgnLi4vZG9tL2FkZC1jbGFzcycpO1xuXG52YXIgX2FkZENsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FkZENsYXNzKTtcblxudmFyIF9yZW1vdmVDbGFzcyA9IHJlcXVpcmUoJy4uL2RvbS9yZW1vdmUtY2xhc3MnKTtcblxudmFyIF9yZW1vdmVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZW1vdmVDbGFzcyk7XG5cbnZhciBfaGFzQ2xhc3MgPSByZXF1aXJlKCcuLi9kb20vaGFzLWNsYXNzJyk7XG5cbnZhciBfaGFzQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFzQ2xhc3MpO1xuXG52YXIgX3RvZ2dsZUNsYXNzID0gcmVxdWlyZSgnLi4vZG9tL3RvZ2dsZS1jbGFzcycpO1xuXG52YXIgX3RvZ2dsZUNsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RvZ2dsZUNsYXNzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIG5vb3AgPSBmdW5jdGlvbiBub29wKCkge307IC8qKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqICMgQW5pbWF0ZSBIZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBBbmltYXRlIHRoZSBoZWlnaHQgb2YgYW4gZWxlbWVudCBzaW5jZSB3ZSBjYW4ndCBkbyB0aGlzIHcvIHB1cmUgQ1NTLiBTaWdoLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBhbmltYXRlSGVpZ2h0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiAgIGVsOiAuLi4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogICB0b2dnbGVFbDogLi4uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqICAgLy8gT3B0aW9uYWwgcGFyYW1zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogICBhY3Rpb246ICdjb2xsYXBzZSd8J2V4cGFuZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogICBoZWlnaHRBbmltYXRpb25DbGFzczogJ3NwYXJrLWFuaW1hdGUtaGVpZ2h0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiAgIG9wYWNpdHlBbmltYXRpb25DbGFzczogJ3NwYXJrLWFuaW1hdGUtb3BhY2l0eScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogICB0b2dnbGVQcm9wZXJ0eTogJ2Rpc3BsYXknfCdvdmVyZmxvdyd8J3Zpc2liaWxpdHknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqICAgdG9nZ2xlVmFsdWU6ICdibG9jayd8J25vbmUnfCd2aXNpYmxlJ3wnaGlkZGVuJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiAgIGFuaW1hdGlvbkR1cmF0aW9uOiAyNTBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBtb2R1bGUgaGVscGVycy9hbmltYXRpb24vaGVpZ2h0LmpzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG5cbnZhciBydW5uaW5nQW5pbWF0aW9ucyA9IHtcbiAgZWxzOiBbXSxcbiAgY29tcGxldGVDYWxsYmFja3M6IFtdXG59O1xuXG4vKipcbiAqIEdldCB0aGUgaW52ZXJzZSB0b2dnbGUgdmFsdWVcbiAqIEBwYXJhbSAge1N0cmluZ30gcHJvcGVydHlcbiAqIEBwYXJhbSAge1N0cmluZ30gb3JpZ2luYWxWYWx1ZVxuICogQHJldHVybiB7U3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRJbnZlcnNlVG9nZ2xlVmFsdWUoZWwsIHByb3BlcnR5LCBvcmlnaW5hbFZhbHVlKSB7XG5cbiAgLy8gR2V0IHRoZSB2YWx1ZSB0byB0b2dnbGUgdG8gZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eVxuICBzd2l0Y2ggKHByb3BlcnR5KSB7XG4gICAgY2FzZSAnb3ZlcmZsb3cnOlxuICAgIGNhc2UgJ3Zpc2liaWxpdHknOlxuICAgICAgcmV0dXJuIG9yaWdpbmFsVmFsdWUgPT09ICd2aXNpYmxlJyA/ICdoaWRkZW4nIDogJ3Zpc2libGUnO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gb3JpZ2luYWxWYWx1ZSA9PT0gJ2Jsb2NrJyB8fCBvcmlnaW5hbFZhbHVlID09PSAnaW5saW5lLWJsb2NrJyA/ICdub25lJyA6ICdibG9jayc7XG4gIH1cbn1cblxuLyoqXG4gKiBXaGVuIGFuIGFuaW1hdGlvbiBpcyBjb21wbGV0ZSwgY2xlYW4gdXAgYW5kIHJ1biB0aGUgY2FsbGJhY2suXG4gKiBAcGFyYW0gIHtPYmplY3R9IHBhcmFtc1xuICovXG5mdW5jdGlvbiBvbkNvbXBsZXRlKHBhcmFtcykge1xuXG4gIC8vIFJlc2V0IHRvZ2dsZSBlbCB2aXNpYmlsaXR5XG4gIGlmIChwYXJhbXMudG9nZ2xlQ2xhc3NOYW1lKSB7XG4gICAgKDAsIF90b2dnbGVDbGFzczIuZGVmYXVsdCkocGFyYW1zLmVsLCBwYXJhbXMudG9nZ2xlQ2xhc3NOYW1lLCAhcGFyYW1zLmNvbGxhcHNlKTtcbiAgfSBlbHNlIHtcbiAgICBwYXJhbXMudG9nZ2xlRWwuc3R5bGVbcGFyYW1zLnRvZ2dsZVByb3BlcnR5XSA9ICcnO1xuICB9XG5cbiAgLy8gUmVtb3ZlIHRoZSBoZWlnaHQgcHJvcGVydHlcbiAgcGFyYW1zLmVsLnN0eWxlLmhlaWdodCA9ICcnO1xuICBwYXJhbXMudG9nZ2xlRWwuc3R5bGUuaGVpZ2h0ID0gJyc7XG4gIHBhcmFtcy50b2dnbGVFbC5zdHlsZS5tYXJnaW5Cb3R0b20gPSAnJztcbiAgcGFyYW1zLnRvZ2dsZUVsLnN0eWxlLm1hcmdpblRvcCA9ICcnO1xuXG4gIC8vIFJlbW92ZSB0aGUgc3BhcmstYW5pbWF0ZS1oZWlnaHQgY2xhc3Mgc28gdGhlIHRyYW5zaXRpb25zIG5vIGxvbmdlciBhcHBseVxuICAoMCwgX3JlbW92ZUNsYXNzMi5kZWZhdWx0KShwYXJhbXMuZWwsIHBhcmFtcy5oZWlnaHRBbmltYXRpb25DbGFzcyk7XG4gICgwLCBfcmVtb3ZlQ2xhc3MyLmRlZmF1bHQpKHBhcmFtcy50b2dnbGVFbCwgcGFyYW1zLmhlaWdodEFuaW1hdGlvbkNsYXNzKTtcblxuICAvLyBSdW4gdGhlIGNhbGxiYWNrXG4gIHBhcmFtcy5vbkNvbXBsZXRlKCk7XG5cbiAgLy8gUmVtb3ZlIHRoZSBlbGVtZW50IGFuZCBjYWxsYmFjayBmcm9tIHRoZWlyIHJlc3BlY3RpdmUgYXJyYXlzXG4gIHZhciBydW5uaW5nSW5kZXggPSBydW5uaW5nQW5pbWF0aW9ucy5lbHMuaW5kZXhPZihwYXJhbXMuZWwpO1xuICBydW5uaW5nQW5pbWF0aW9ucy5lbHMuc3BsaWNlKHJ1bm5pbmdJbmRleCwgMSk7XG4gIHJ1bm5pbmdBbmltYXRpb25zLmNvbXBsZXRlQ2FsbGJhY2tzLnNwbGljZShydW5uaW5nSW5kZXgsIDEpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXNcbiAqL1xuZnVuY3Rpb24gYW5pbWF0ZUhlaWdodChwYXJhbXMpIHtcblxuICBwYXJhbXMgPSBwYXJhbXMgfHwge307XG5cbiAgdmFyIGVsID0gcGFyYW1zLmVsO1xuXG4gIGlmICghZWwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY29sbGFwc2UgPSBwYXJhbXMuYWN0aW9uICYmIHBhcmFtcy5hY3Rpb24gPT09ICdjb2xsYXBzZSc7XG4gIHZhciBoZWlnaHRBbmltYXRpb25DbGFzcyA9IHBhcmFtcy5oZWlnaHRBbmltYXRpb25DbGFzcyB8fCAnc3BhcmstYW5pbWF0ZS1oZWlnaHQnO1xuXG4gIC8vIEFsbG93IGZvciBlbGVtZW50cyB0byBiZSBwYXNzZWQgb3Igc2VsZWN0b3Igc3RyaW5nc1xuICB2YXIgdG9nZ2xlRWwgPSB0eXBlb2YgcGFyYW1zLnRvZ2dsZUVsID09PSAnc3RyaW5nJyA/IGVsLnF1ZXJ5U2VsZWN0b3IocGFyYW1zLnRvZ2dsZUVsKSA6IHBhcmFtcy50b2dnbGVFbDtcblxuICAvLyBObyBlbGVtZW50IHRvIGJlIHN3aXRjaGluZyB3aXRoIHRvZ2dsaW5nIHNvIHdlIGNhbid0IGRldGVybWluZSB0aGUgZGVzaXJlZCBoZWlnaHQgdG8gYW5pbWF0ZSB0by5cbiAgaWYgKCF0b2dnbGVFbCB8fCAoMCwgX2hhc0NsYXNzMi5kZWZhdWx0KShlbCwgJ3NwYXJrLW5vLWFuaW1hdGUnKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB0b2dnbGVDbGFzc05hbWUgPSBwYXJhbXMudG9nZ2xlQ2xhc3M7XG5cbiAgLy8gVGhlIHN0eWxlIHByb3BlcnR5IHRvIHVzZSB3aGVuIHRvZ2dsaW5nIHZpc2liaWxpdHlcbiAgdmFyIHRvZ2dsZVByb3BlcnR5ID0gcGFyYW1zLnRvZ2dsZVByb3BlcnR5IHx8ICdkaXNwbGF5JztcbiAgdmFyIHRvZ2dsZVN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRvZ2dsZUVsKTtcbiAgdmFyIG9yaWdpbmFsVG9nZ2xlVmFsdWUgPSB0b2dnbGVTdHlsZXNbdG9nZ2xlUHJvcGVydHldO1xuICB2YXIgdG9nZ2xlVmFsdWUgPSBwYXJhbXMudG9nZ2xlVmFsdWUgfHwgZ2V0SW52ZXJzZVRvZ2dsZVZhbHVlKHRvZ2dsZVByb3BlcnR5LCBvcmlnaW5hbFRvZ2dsZVZhbHVlKTtcblxuICAvLyBJZiB3ZSBhcmUgYWxyZWFkeSBhbmltYXRpbmcsIHN0b3Agbm93LlxuICB2YXIgcnVubmluZ0luZGV4ID0gcnVubmluZ0FuaW1hdGlvbnMuZWxzLmluZGV4T2YoZWwpO1xuICBpZiAocnVubmluZ0luZGV4ICE9PSAtMSkge1xuXG4gICAgdmFyIGNvbXBsZXRlQ2FsbGJhY2sgPSBydW5uaW5nQW5pbWF0aW9ucy5jb21wbGV0ZUNhbGxiYWNrc1tydW5uaW5nSW5kZXhdO1xuICAgIGlmIChjb21wbGV0ZUNhbGxiYWNrKSB7XG4gICAgICBjbGVhclRpbWVvdXQoY29tcGxldGVDYWxsYmFjayk7XG4gICAgfVxuXG4gICAgb25Db21wbGV0ZSh7XG4gICAgICBlbDogZWwsXG4gICAgICB0b2dnbGVFbDogdG9nZ2xlRWwsXG4gICAgICBvbkNvbXBsZXRlOiBwYXJhbXMub25Db21wbGV0ZSB8fCBub29wLFxuICAgICAgY29sbGFwc2U6IGNvbGxhcHNlLFxuICAgICAgdG9nZ2xlUHJvcGVydHk6IHRvZ2dsZVByb3BlcnR5LFxuICAgICAgdG9nZ2xlQ2xhc3NOYW1lOiB0b2dnbGVDbGFzc05hbWUsXG4gICAgICB0b2dnbGVWYWx1ZTogdG9nZ2xlVmFsdWUsXG4gICAgICBoZWlnaHRBbmltYXRpb25DbGFzczogaGVpZ2h0QW5pbWF0aW9uQ2xhc3NcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFN0b3JlIHRoZSBjdXJyZW50IGhlaWdodFxuICB2YXIgb3JpZ2luYWxIZWlnaHQgPSAoMCwgX291dGVySGVpZ2h0Mi5kZWZhdWx0KShlbCk7XG5cbiAgLy8gVG9nZ2xlIHRoZSB2aXNpYmxlIHByb3BlcnR5XG4gIGlmICh0b2dnbGVDbGFzc05hbWUpIHtcbiAgICAoMCwgX3RvZ2dsZUNsYXNzMi5kZWZhdWx0KShlbCwgdG9nZ2xlQ2xhc3NOYW1lLCAhY29sbGFwc2UpO1xuICB9IGVsc2Uge1xuICAgIHRvZ2dsZUVsLnN0eWxlW3RvZ2dsZVByb3BlcnR5XSA9IHRvZ2dsZVZhbHVlO1xuICB9XG5cbiAgLy8gV2hlbiBtZWFzdXJpbmcgdGhlIHNpemUgZm9yIGEgY29sbGFwc2UsIHdlIGhhdmUgdG8gd2FpdCBhIHRpYyBmb3IgaXQgdG8gYmVcbiAgLy8gYWNjdXJhdGUuIE5vdCBzdXJlIHdoeS4gVWdoLlxuICBpZiAoY29sbGFwc2UpIHtcbiAgICBzZXRUaW1lb3V0KHJ1bkFuaW1hdGlvbiwgMCk7XG4gIH0gZWxzZSB7XG4gICAgcnVuQW5pbWF0aW9uKCk7XG4gIH1cblxuICBmdW5jdGlvbiBydW5BbmltYXRpb24oKSB7XG5cbiAgICAvLyBOb3cgdGhhdCB0aGUgdG9nZ2xlIGVsIGlzIHRha2luZyB1cCBzcGFjZSwgZ2V0IHRoZSBuZXcgaGVpZ2h0IHdoaWNoIHdlIHdpbGwgYmUgYW5pbWF0aW5nIHRvXG4gICAgdmFyIHRhcmdldEVsSGVpZ2h0ID0gKDAsIF9vdXRlckhlaWdodDIuZGVmYXVsdCkoZWwpO1xuXG4gICAgLy8gV2UgbmVlZCB0byBzdG9yZSB0aGUgb3JpZ2luYWwgYW5kIHRhcmdldCB0b2dnbGUgZWxlbWVudCBoZWlnaHRzLiBUaGV5IGRpZmZlciBkZXBlbmRpbmcgb25cbiAgICAvLyB3aGV0aGVyIHdlIGFyZSBnb2luZyB0byBleHBhbmQgb3IgY29sbGFwc2UuXG4gICAgdmFyIHRhcmdldFRvZ2dsZUVsSGVpZ2h0ID0gdm9pZCAwO1xuICAgIHZhciBvcmlnaW5hbFRvZ2dsZUVsSGVpZ2h0ID0gdm9pZCAwO1xuXG4gICAgLy8gSWYgd2UgYXJlIGNvbGxhcHNpbmcsIHJlc2V0IHRoZSB0b2dnbGUgc3R5bGUgYW5kIHNldCBpdCB3aGVuIHdlJ3JlIGRvbmUuIFNldCB0aGUgaGVpZ2h0IHNvXG4gICAgLy8gdGhhdCB3ZSBjYW4gYW5pbWF0ZSBkb3duIHRvIDAgb3IgdXAgdG8gdGhlIHRhcmdldCBoZWlnaHQuXG4gICAgaWYgKGNvbGxhcHNlKSB7XG5cbiAgICAgIGlmICh0b2dnbGVDbGFzc05hbWUpIHtcbiAgICAgICAgKDAsIF9yZW1vdmVDbGFzczIuZGVmYXVsdCkoZWwsIHRvZ2dsZUNsYXNzTmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b2dnbGVFbC5zdHlsZVt0b2dnbGVQcm9wZXJ0eV0gPSBvcmlnaW5hbFRvZ2dsZVZhbHVlO1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5hbFRvZ2dsZUVsSGVpZ2h0ID0gKDAsIF9vdXRlckhlaWdodDIuZGVmYXVsdCkodG9nZ2xlRWwsIHRvZ2dsZVN0eWxlcyk7XG4gICAgICB0YXJnZXRUb2dnbGVFbEhlaWdodCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldFRvZ2dsZUVsSGVpZ2h0ID0gKDAsIF9vdXRlckhlaWdodDIuZGVmYXVsdCkodG9nZ2xlRWwsIHRvZ2dsZVN0eWxlcyk7XG4gICAgICBvcmlnaW5hbFRvZ2dsZUVsSGVpZ2h0ID0gMDtcbiAgICB9XG5cbiAgICAvLyBTZXQgdGhlIG9yaWdpbmFsIGhlaWdodFxuICAgIGVsLnN0eWxlLmhlaWdodCA9IG9yaWdpbmFsSGVpZ2h0ICsgJ3B4JztcbiAgICB0b2dnbGVFbC5zdHlsZS5oZWlnaHQgPSBvcmlnaW5hbFRvZ2dsZUVsSGVpZ2h0ICsgJ3B4JztcbiAgICB0b2dnbGVFbC5zdHlsZS5tYXJnaW5Cb3R0b20gPSAnMHB4JztcbiAgICB0b2dnbGVFbC5zdHlsZS5tYXJnaW5Ub3AgPSAnMHB4JztcblxuICAgIC8vIEFkZCB0aGUgc3BhcmstYW5pbWF0ZS1oZWlnaHQgY2xhc3Mgd2hpY2ggd2lsbCBzZXR1cCB0aGUgdHJhbnNpdGlvbi1wcm9wZXJ0eSBhbmQgZHVyYXRpb25cbiAgICAoMCwgX2FkZENsYXNzMi5kZWZhdWx0KShlbCwgaGVpZ2h0QW5pbWF0aW9uQ2xhc3MpO1xuICAgICgwLCBfYWRkQ2xhc3MyLmRlZmF1bHQpKHRvZ2dsZUVsLCBoZWlnaHRBbmltYXRpb25DbGFzcyk7XG5cbiAgICBydW5uaW5nQW5pbWF0aW9ucy5lbHMucHVzaChlbCk7XG5cbiAgICAvLyBXZSBuZWVkIHRvIHdhaXQgYSB0aWNrIHRvIHRvZ2dsZSB0aGUgaGVpZ2h0IG9yIGVsc2UgdGhlIGFuaW1hdGlvbiBjbGFzcyB3b24ndCBmdW5jdGlvblxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXG4gICAgICAvLyBTZXQgdGhlIGhlaWdodCB0byB0aGUgdGFyZ2V0IGhlaWdodFxuICAgICAgZWwuc3R5bGUuaGVpZ2h0ID0gdGFyZ2V0RWxIZWlnaHQgKyAncHgnO1xuICAgICAgdG9nZ2xlRWwuc3R5bGUuaGVpZ2h0ID0gdGFyZ2V0VG9nZ2xlRWxIZWlnaHQgKyAncHgnO1xuXG4gICAgICAvLyBSZW1vdmUgaW5saW5lIHN0eWxlcyBhZnRlciB0aGUgYW5pbWF0aW9uIGlzIGNvbXBsZXRlXG4gICAgICBydW5uaW5nQW5pbWF0aW9ucy5jb21wbGV0ZUNhbGxiYWNrcy5wdXNoKHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBvbkNvbXBsZXRlKHtcbiAgICAgICAgICBlbDogZWwsXG4gICAgICAgICAgdG9nZ2xlRWw6IHRvZ2dsZUVsLFxuICAgICAgICAgIG9uQ29tcGxldGU6IHBhcmFtcy5vbkNvbXBsZXRlIHx8IG5vb3AsXG4gICAgICAgICAgY29sbGFwc2U6IGNvbGxhcHNlLFxuICAgICAgICAgIHRvZ2dsZVByb3BlcnR5OiB0b2dnbGVQcm9wZXJ0eSxcbiAgICAgICAgICB0b2dnbGVDbGFzc05hbWU6IHRvZ2dsZUNsYXNzTmFtZSxcbiAgICAgICAgICB0b2dnbGVWYWx1ZTogdG9nZ2xlVmFsdWUsXG4gICAgICAgICAgaGVpZ2h0QW5pbWF0aW9uQ2xhc3M6IGhlaWdodEFuaW1hdGlvbkNsYXNzXG4gICAgICAgIH0pO1xuICAgICAgfSwgcGFyYW1zLmFuaW1hdGlvbkR1cmF0aW9uICE9PSB1bmRlZmluZWQgPyBwYXJhbXMuYW5pbWF0aW9uRHVyYXRpb24gOiAyMDEpKTtcbiAgICB9LCAwKTtcbiAgfVxufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBhbmltYXRlSGVpZ2h0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWlnaHQuanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiAjIFRyYW5zZm9ybVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQXBwbHkgYSBjcm9zcy1icm93c2VyIHRyYW5zZm9ybSBzdHlsZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAZXhhbXBsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogdHJhbnNmb3JtKCd0cmFuc2xhdGVYJywgJy0xMDBweCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogQG1vZHVsZSBoZWxwZXJzL2Nzcy90cmFuc2Zvcm0uanNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuXG52YXIgX2VhY2ggPSByZXF1aXJlKCcuLi91dGlsL2VhY2gnKTtcblxudmFyIF9lYWNoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2VhY2gpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgcHJlZml4ZXMgPSBbJy13ZWJraXQtJywgJy1tb3otJywgJy1vLScsICctbXMtJywgJyddO1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm0odHlwZSwgdmFsKSB7XG5cbiAgdmFyIHN0ciA9ICcnO1xuXG4gICgwLCBfZWFjaDIuZGVmYXVsdCkocHJlZml4ZXMsIGZ1bmN0aW9uIChwKSB7XG5cbiAgICBpZiAoKHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbCkpID09PSAnb2JqZWN0Jykge1xuICAgICAgc3RyICs9IHAgKyAndHJhbnNmb3JtOiAnO1xuXG4gICAgICBmb3IgKHZhciBqIGluIHZhbCkge1xuICAgICAgICBzdHIgKz0gaiArICcoJyArIHZhbFtqXSArICcpOyAnO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgKz0gcCArICd0cmFuc2Zvcm06ICcgKyB0eXBlICsgJygnICsgdmFsICsgJyk7ICc7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gc3RyO1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSB0cmFuc2Zvcm07XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYW5zZm9ybS5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90cmltID0gcmVxdWlyZSgnLi4vdXRpbC90cmltJyk7XG5cbnZhciBfdHJpbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90cmltKTtcblxudmFyIF9oYXNDbGFzcyA9IHJlcXVpcmUoJy4vaGFzLWNsYXNzJyk7XG5cbnZhciBfaGFzQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaGFzQ2xhc3MpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqICMgQWRkIENsYXNzXG4gKiBBZGQgYSBjbGFzcyBvbiBhbiBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudHxBcnJheX0gZWwgQW4gZWxlbWVudCBvciBhcnJheSBvZiBlbGVtZW50cyB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7RWxlbWVudH1cbiAqXG4gKiBAbW9kdWxlIGhlbHBlcnMvZG9tL2FkZC1jbGFzcy5qc1xuICovXG5cbnZhciB3cyA9IC9cXHMrLztcbnZhciBjbGVhbnVwID0gL1xcc3syLH0vZztcblxuZnVuY3Rpb24gYWRkQ2xhc3MoZWwsIG5hbWUpIHtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICBuYW1lID0gKDAsIF90cmltMi5kZWZhdWx0KShuYW1lKS5zcGxpdCh3cyk7XG4gIH0gZWxzZSB7XG4gICAgbmFtZSA9IG5hbWUgaW5zdGFuY2VvZiBBcnJheSA/IG5hbWUgOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB9XG5cbiAgLy8gb3B0aW1pemUgZm9yIGJlc3QsIG1vc3QgY29tbW9uIGNhc2VcbiAgaWYgKG5hbWUubGVuZ3RoID09PSAxICYmIGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChuYW1lWzBdKSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKG5hbWVbMF0pO1xuICAgIH1cbiAgICByZXR1cm4gZWw7XG4gIH1cblxuICB2YXIgdG9BZGQgPSBbXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IG5hbWUubGVuZ3RoO1xuICB2YXIgaXRlbSA9IHZvaWQgMDtcbiAgdmFyIGNsc05hbWUgPSB0eXBlb2YgZWwuY2xhc3NOYW1lID09PSAnc3RyaW5nJyA/IGVsLmNsYXNzTmFtZSA6IGVsLmdldEF0dHJpYnV0ZSA/IGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSA6ICcnO1xuXG4gIC8vIHNlZSBpZiB3ZSBoYXZlIGFueXRoaW5nIHRvIGFkZFxuICBmb3IgKDsgaSA8IGw7IGkrKykge1xuICAgIGl0ZW0gPSBuYW1lW2ldO1xuICAgIGlmIChpdGVtICYmICEoMCwgX2hhc0NsYXNzMi5kZWZhdWx0KShjbHNOYW1lLCBpdGVtKSkge1xuICAgICAgdG9BZGQucHVzaChpdGVtKTtcbiAgICB9XG4gIH1cblxuICBpZiAodG9BZGQubGVuZ3RoKSB7XG4gICAgaWYgKHR5cGVvZiBlbC5jbGFzc05hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbC5jbGFzc05hbWUgPSAoMCwgX3RyaW0yLmRlZmF1bHQpKChjbHNOYW1lICsgJyAnICsgdG9BZGQuam9pbignICcpKS5yZXBsYWNlKGNsZWFudXAsICcgJykpO1xuICAgIH0gZWxzZSBpZiAoZWwuc2V0QXR0cmlidXRlKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKDAsIF90cmltMi5kZWZhdWx0KSgoY2xzTmFtZSArICcgJyArIHRvQWRkLmpvaW4oJyAnKSkucmVwbGFjZShjbGVhbnVwLCAnICcpKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGVsO1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBhZGRDbGFzcztcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkLWNsYXNzLmpzLm1hcFxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbi8qKlxuICogIyBIYXMgQ2xhc3NcbiAqIFNlZSBpZiBhbiBlbGVtZW50IGhhcyBhIGNsYXNzLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudHxTdHJpbmd9IGVsXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqXG4gKiBAbW9kdWxlIGhlbHBlcnMvZG9tL2hhcy1jbGFzcy5qc1xuICovXG5mdW5jdGlvbiBoYXNDbGFzcyhlbCwgbmFtZSkge1xuICB2YXIgY05hbWUgPSAoKHR5cGVvZiBlbCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoZWwpKSA9PT0gJ29iamVjdCcgPyBlbC5jbGFzc05hbWUgfHwgZWwuZ2V0QXR0cmlidXRlICYmIGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJyA6IGVsIHx8ICcnKS5yZXBsYWNlKC9bXFx0XFxyXFxuXFxmXS9nLCAnICcpO1xuICByZXR1cm4gKCcgJyArIGNOYW1lICsgJyAnKS5pbmRleE9mKCcgJyArIG5hbWUgKyAnICcpICE9PSAtMTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gaGFzQ2xhc3M7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhcy1jbGFzcy5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9lYWNoID0gcmVxdWlyZSgnLi4vdXRpbC9lYWNoJyk7XG5cbnZhciBfZWFjaDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lYWNoKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHByb3BzID0gWydtYXJnaW5Ub3AnLCAnbWFyZ2luQm90dG9tJywgJ2JvcmRlclRvcCcsICdib3JkZXJCb3R0b20nXTsgLyoqXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiAjIE91dGVyIEhlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICogR2V0IHRoZSBvdXRlciBoZWlnaHQgb2YgYW4gZWxlbWVudCAoaW5jbHVkaW5nIG1hcmdpbiBhbmQgYm9yZGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdHlsZXMgT3B0aW9uYWwgQWxyZWFkeSBoYXZlIGNvbXB1dGVkIHN0eWxlcz8gUGFzcyB0aGVtIGluLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBleGFtcGxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBvdXRlckhlaWdodChlbCwgY29tcHV0ZWRTdHlsZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIEBtb2R1bGUgaGVscGVycy9vdXRlci1oZWlnaHQuanNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuXG5cbmZ1bmN0aW9uIG91dGVySGVpZ2h0KGVsLCBzdHlsZXMpIHtcblxuICBzdHlsZXMgPSBzdHlsZXMgfHwgd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuXG4gIHZhciBoZWlnaHQgPSBlbC5jbGllbnRIZWlnaHQ7XG5cbiAgKDAsIF9lYWNoMi5kZWZhdWx0KShwcm9wcywgZnVuY3Rpb24gKHByb3ApIHtcbiAgICBoZWlnaHQgKz0gcGFyc2VJbnQoc3R5bGVzW3Byb3BdIHx8IDAsIDEwKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGhlaWdodDtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gb3V0ZXJIZWlnaHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW91dGVyLWhlaWdodC5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90cmltID0gcmVxdWlyZSgnLi4vdXRpbC90cmltJyk7XG5cbnZhciBfdHJpbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90cmltKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHdzID0gL1xccysvOyAvKipcbiAgICAgICAgICAgICAgICAgKiAjIFJlbW92ZSBDbGFzc1xuICAgICAgICAgICAgICAgICAqIFJlbW92ZSBhIGNsYXNzIG9uIGFuIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0ge0VsZW1lbnR8QXJyYXl9IGVsIEFuIGVsZW1lbnQgb3IgYXJyYXkgb2YgZWxlbWVudHMgdG8gdXBkYXRlLlxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICAgICAgICAgICAgICAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIEBtb2R1bGUgaGVscGVycy9kb20vcmVtb3ZlLWNsYXNzLmpzXG4gICAgICAgICAgICAgICAgICovXG5cbnZhciBjbGVhbnVwID0gL1xcc3syLH0vZztcblxuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWwsIG5hbWUpIHtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICBuYW1lID0gKDAsIF90cmltMi5kZWZhdWx0KShuYW1lKS5zcGxpdCh3cyk7XG4gIH0gZWxzZSB7XG4gICAgbmFtZSA9IG5hbWUgaW5zdGFuY2VvZiBBcnJheSA/IG5hbWUgOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB9XG5cbiAgLy8gb3B0aW1pemUgZm9yIGJlc3QsIG1vc3QgY29tbW9uIGNhc2VcbiAgaWYgKG5hbWUubGVuZ3RoID09PSAxICYmIGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChuYW1lWzBdKSBlbC5jbGFzc0xpc3QucmVtb3ZlKG5hbWVbMF0pO1xuICAgIHJldHVybiBlbDtcbiAgfVxuXG4gIC8vIHN0b3JlIHR3byBjb3BpZXNcbiAgdmFyIGNsc05hbWUgPSAnICcgKyAodHlwZW9mIGVsLmNsYXNzTmFtZSA9PT0gJ3N0cmluZycgPyBlbC5jbGFzc05hbWUgOiBlbC5nZXRBdHRyaWJ1dGUgPyBlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgOiAnJykgKyAnICc7XG4gIHZhciByZXN1bHQgPSBjbHNOYW1lO1xuICB2YXIgY3VycmVudCA9IHZvaWQgMDtcbiAgdmFyIHN0YXJ0ID0gdm9pZCAwO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IG5hbWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgY3VycmVudCA9IG5hbWVbaV07XG4gICAgc3RhcnQgPSBjdXJyZW50ID8gcmVzdWx0LmluZGV4T2YoJyAnICsgY3VycmVudCArICcgJykgOiAtMTtcbiAgICBpZiAoc3RhcnQgIT09IC0xKSB7XG4gICAgICBzdGFydCArPSAxO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKDAsIHN0YXJ0KSArIHJlc3VsdC5zbGljZShzdGFydCArIGN1cnJlbnQubGVuZ3RoKTtcbiAgICB9XG4gIH1cblxuICAvLyBvbmx5IHdyaXRlIGlmIG1vZGlmaWVkXG4gIGlmIChjbHNOYW1lICE9PSByZXN1bHQpIHtcbiAgICBpZiAodHlwZW9mIGVsLmNsYXNzTmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVsLmNsYXNzTmFtZSA9ICgwLCBfdHJpbTIuZGVmYXVsdCkocmVzdWx0LnJlcGxhY2UoY2xlYW51cCwgJyAnKSk7XG4gICAgfSBlbHNlIGlmIChlbC5zZXRBdHRyaWJ1dGUpIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoMCwgX3RyaW0yLmRlZmF1bHQpKHJlc3VsdC5yZXBsYWNlKGNsZWFudXAsICcgJykpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZWw7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHJlbW92ZUNsYXNzO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZW1vdmUtY2xhc3MuanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfaGFzQ2xhc3MgPSByZXF1aXJlKCcuL2hhcy1jbGFzcycpO1xuXG52YXIgX2hhc0NsYXNzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hhc0NsYXNzKTtcblxudmFyIF9hZGRDbGFzcyA9IHJlcXVpcmUoJy4vYWRkLWNsYXNzJyk7XG5cbnZhciBfYWRkQ2xhc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYWRkQ2xhc3MpO1xuXG52YXIgX3JlbW92ZUNsYXNzID0gcmVxdWlyZSgnLi9yZW1vdmUtY2xhc3MnKTtcblxudmFyIF9yZW1vdmVDbGFzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZW1vdmVDbGFzcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHRvZ2dsZUNsYXNzKGVsLCBuYW1lLCBlbmFibGUpIHtcblxuICBpZiAoIWVsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gSWYgd2UncmUgcGFzc2VkIGFuIGFycmF5LCB0b2dnbGUgdGhlIGNsYXNzIG9uIGVhY2guXG4gIGlmIChlbCBpbnN0YW5jZW9mIE5vZGVMaXN0IHx8IGVsIGluc3RhbmNlb2YgQXJyYXkpIHtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBlbC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgdG9nZ2xlQ2xhc3MoZWxbaV0sIG5hbWUsIGVuYWJsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGFjdGlvbiA9IHZvaWQgMDtcbiAgaWYgKGVuYWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5hYmxlID0gdHlwZW9mIGVuYWJsZSA9PT0gJ2Z1bmN0aW9uJyA/IGVuYWJsZS5jYWxsKG51bGwsIGVsKSA6IGVuYWJsZTtcbiAgICBhY3Rpb24gPSBlbmFibGUgPyAnYWRkJyA6ICdyZW1vdmUnO1xuICB9IGVsc2Uge1xuICAgIGFjdGlvbiA9ICgwLCBfaGFzQ2xhc3MyLmRlZmF1bHQpKGVsLCBuYW1lKSA/ICdyZW1vdmUnIDogJ2FkZCc7XG4gIH1cblxuICByZXR1cm4gKGFjdGlvbiA9PT0gJ2FkZCcgPyBfYWRkQ2xhc3MyLmRlZmF1bHQgOiBfcmVtb3ZlQ2xhc3MyLmRlZmF1bHQpKGVsLCBuYW1lKTtcbn0gLyoqXG4gICAqICMgVG9nZ2xlIENsYXNzXG4gICAqIFRvZ2dsZSBhIGNsYXNzIG9uIGFuIGVsZW1lbnQgZ2l2ZW4gYSBjb25kaXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudHxBcnJheX0gZWwgQW4gZWxlbWVudCBvciBhcnJheSBvZiBlbGVtZW50cyB0byB1cGRhdGUuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gZW5hYmxlXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqXG4gICAqIEBtb2R1bGUgIGhlbHBlcnMvZG9tL3RvZ2dsZS1jbGFzcy5qc1xuICAgKi9cblxuZXhwb3J0cy5kZWZhdWx0ID0gdG9nZ2xlQ2xhc3M7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvZ2dsZS1jbGFzcy5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbi8qKlxuICogIyBXcmFwIEVsZW1lbnRcbiAqIFdyYXAgYW4gZWxlbWVudCB3aXRoIGFub3RoZXIgZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHdyYXBwZXJcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKlxuICogQG1vZHVsZSBoZWxwZXJzL21hbmlwdWxhdGlvbi93cmFwLWVsZW1lbnQuanNcbiAqL1xuZnVuY3Rpb24gd3JhcEVsZW1lbnQoZWwsIHdyYXBwZXIpIHtcblxuICB3cmFwcGVyID0gd3JhcHBlciB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICBpZiAoZWwubmV4dFNpYmxpbmcpIHtcbiAgICBlbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh3cmFwcGVyLCBlbC5uZXh0U2libGluZyk7XG4gIH0gZWxzZSB7XG4gICAgZWwucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh3cmFwcGVyKTtcbiAgfVxuXG4gIHJldHVybiB3cmFwcGVyLmFwcGVuZENoaWxkKGVsKTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gd3JhcEVsZW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdyYXAtZWxlbWVudC5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9tYXRjaGVzID0gcmVxdWlyZSgnLi9tYXRjaGVzJyk7XG5cbnZhciBfbWF0Y2hlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tYXRjaGVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gZ2V0Q2hpbGQoZWwsIHF1ZXJ5KSB7XG5cbiAgdmFyIGkgPSAwO1xuICB2YXIgbGVuID0gZWwuY2hpbGRyZW4ubGVuZ3RoO1xuXG4gIGZvciAoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoKDAsIF9tYXRjaGVzMi5kZWZhdWx0KShlbC5jaGlsZHJlbltpXSwgcXVlcnkpKSB7XG4gICAgICByZXR1cm4gZWwuY2hpbGRyZW5baV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59IC8qKlxuICAgKiAjIEdldCBDaGlsZFxuICAgKiBHZXQgYSBjaGlsZCB0aGF0IG1hdGNoZXMgdGhlIHNlbGVjdG9yLlxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGVsXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBxdWVyeVxuICAgKiBAcmV0dXJuIHtFbGVtZW50fE51bGx9XG4gICAqXG4gICAqIEBtb2R1bGUgaGVscGVycy90cmF2ZXJzYWwvZ2V0LWNoaWxkLmpzXG4gICAqL1xuXG5leHBvcnRzLmRlZmF1bHQgPSBnZXRDaGlsZDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0LWNoaWxkLmpzLm1hcFxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX21hdGNoZXMgPSByZXF1aXJlKCcuL21hdGNoZXMnKTtcblxudmFyIF9tYXRjaGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21hdGNoZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBnZXRQYXJlbnQocGFyZW50LCBxdWVyeSwgbGltaXRFbCkge1xuXG4gIGxpbWl0RWwgPSBsaW1pdEVsIGluc3RhbmNlb2YgQXJyYXkgPyBsaW1pdEVsIDogW2xpbWl0RWwgfHwgZG9jdW1lbnQuYm9keV07XG5cbiAgd2hpbGUgKHBhcmVudCkge1xuXG4gICAgaWYgKCgwLCBfbWF0Y2hlczIuZGVmYXVsdCkocGFyZW50LCBxdWVyeSkpIHtcbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfVxuXG4gICAgaWYgKGxpbWl0RWwuaW5kZXhPZihwYXJlbnQpICE9PSAtMSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufSAvKipcbiAgICogIyBHZXQgUGFyZW50XG4gICAqIFNlZSBpZiBhbiBlbGVtZW50IGhhcyBhbm90aGVyIGVsZW1lbnQgZm9yIGEgcGFyZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IHBhcmVudFxuICAgKiBAcGFyYW0ge1N0cmluZ30gcXVlcnlcbiAgICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBsaW1pdEVsIFRoZSBsYXN0IGVsZW1lbnQgd2Ugc2hvdWxkIGNoZWNrLlxuICAgKiBAcmV0dXJuIHtCb29sZWFufEVsZW1lbnR9XG4gICAqXG4gICAqIEBtb2R1bGUgaGVscGVycy90cmF2ZXJzYWwvZ2V0LXBhcmVudC5qc1xuICAgKi9cblxuZXhwb3J0cy5kZWZhdWx0ID0gZ2V0UGFyZW50O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXQtcGFyZW50LmpzLm1hcFxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2dldFBhcmVudCA9IHJlcXVpcmUoJy4vZ2V0LXBhcmVudCcpO1xuXG52YXIgX2dldFBhcmVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQYXJlbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBnZXRQYXJlbnRzKHBhcmVudCwgcXVlcnksIGxpbWl0RWwpIHtcblxuICB2YXIgbGlzdCA9IFtdO1xuXG4gIHdoaWxlIChwYXJlbnQgPSAoMCwgX2dldFBhcmVudDIuZGVmYXVsdCkocGFyZW50LnBhcmVudE5vZGUsIHF1ZXJ5LCBsaW1pdEVsKSkge1xuICAgIGxpc3QucHVzaChwYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIGxpc3Q7XG59IC8qKlxuICAgKiAjIEdldCBQYXJlbnRzXG4gICAqIFNlZSBpZiBhbiBlbGVtZW50IGhhcyBwYXJlbnRzIHdoaWNoIG1hdGNoIGEgcXVlcnkuXG4gICAqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gcGFyZW50XG4gICAqIEBwYXJhbSB7U3RyaW5nfSBxdWVyeVxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IGxpbWl0RWwgVGhlIGxhc3QgZWxlbWVudCB3ZSBzaG91bGQgY2hlY2suXG4gICAqIEByZXR1cm4ge0Jvb2xlYW58QXJyYXl9XG4gICAqXG4gICAqIEBtb2R1bGUgaGVscGVycy90cmF2ZXJzYWwvZ2V0LXBhcmVudHMuanNcbiAgICovXG5cbmV4cG9ydHMuZGVmYXVsdCA9IGdldFBhcmVudHM7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldC1wYXJlbnRzLmpzLm1hcFxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG4vKipcbiAqICMgSGFzIFBhcmVudFxuICogU2VlIGlmIGFuIGVsZW1lbnQgaGFzIGFub3RoZXIgZWxlbWVudCBmb3IgYSBwYXJlbnQuXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBjaGlsZFxuICogQHBhcmFtIHtFbGVtZW50fSBwb3NzaWJsZVBhcmVudFxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqXG4gKiBAbW9kdWxlIGhlbHBlcnMvdHJhdmVyc2FsL2hhcy1wYXJlbnQuanNcbiAqL1xuZnVuY3Rpb24gaGFzUGFyZW50KGNoaWxkLCBwb3NzaWJsZVBhcmVudCkge1xuXG4gIHZhciBwYXJlbnQgPSBjaGlsZC5wYXJlbnROb2RlO1xuXG4gIHdoaWxlIChwYXJlbnQpIHtcblxuICAgIGlmIChwYXJlbnQgPT09IHBvc3NpYmxlUGFyZW50KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gaGFzUGFyZW50O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhhcy1wYXJlbnQuanMubWFwXG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG4vKipcbiAqICMgTWF0Y2hlc1xuICogU2VlIGlmIGFuIGVsZW1lbnQgbWF0Y2hlcyBhIHF1ZXJ5IHNlbGVjdG9yLlxuICpcbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxcbiAqIEBwYXJhbSB7U3RyaW5nfSBxdWVyeVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqXG4gKiBAbW9kdWxlIGhlbHBlcnMvdHJhdmVyc2FsL21hdGNoZXMuanNcbiAqL1xudmFyIHZlbmRvck1hdGNoID0gdHlwZW9mIEVsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIChFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzIHx8IEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXNTZWxlY3RvciB8fCBFbGVtZW50LnByb3RvdHlwZS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHwgRWxlbWVudC5wcm90b3R5cGUubW96TWF0Y2hlc1NlbGVjdG9yIHx8IEVsZW1lbnQucHJvdG90eXBlLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IEVsZW1lbnQucHJvdG90eXBlLm9NYXRjaGVzU2VsZWN0b3IpO1xuXG5mdW5jdGlvbiBtYXRjaGVzKGVsLCBxdWVyeSkge1xuXG4gIGlmICh2ZW5kb3JNYXRjaCkgcmV0dXJuIHZlbmRvck1hdGNoLmNhbGwoZWwsIHF1ZXJ5KTtcblxuICB2YXIgbm9kZXMgPSBlbC5wYXJlbnROb2RlID8gZWwucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yQWxsKHF1ZXJ5KSA6IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobm9kZXNbaV0gPT09IGVsKSByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gbWF0Y2hlcztcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWF0Y2hlcy5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbi8qKlxuICogIyBFYWNoXG4gKiBBcHBseSBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGEgbGlzdCBvZiBhbnkga2luZDogQXJyYXksIE5vZGVMaXN0LCBIVE1MQ29sbGVjdGlvbiBvciBPYmplY3QuXG4gKlxuICogQHBhcmFtIHtBcnJheXxOb2RlTGlzdHxIVE1MQ29sbGVjdGlvbnxPYmplY3R9IGxpc3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNiXG4gKlxuICogQGV4YW1wbGVcbiAqIGVhY2goW10sIGNhbGxiYWNrKTtcbiAqIGVhY2goZWwuY2hpbGRyZW4sIGNhbGxiYWNrKTtcbiAqIGVhY2goZWwuY2hpbGROb2RlcywgY2FsbGJhY2spO1xuICogZWFjaCh7fSwgY2FsbGJhY2spO1xuICpcbiAqIEBtb2R1bGUgaGVscGVycy91dGlsL2VhY2guanNcbiAqL1xuZnVuY3Rpb24gZWFjaChsaXN0LCBjYikge1xuXG4gIGlmICghbGlzdCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBpbnZva2UgYGVhY2hgIHdpdGhvdXQgYSBjYWxsYmFjayEnKTtcbiAgfVxuXG4gIHZhciBpID0gMDtcbiAgdmFyIGxlbiA9IGxpc3QubGVuZ3RoO1xuXG4gIC8vIE9iamVjdFxuICBpZiAobGVuID09PSB1bmRlZmluZWQpIHtcbiAgICBmb3IgKGkgaW4gbGlzdCkge1xuICAgICAgaWYgKGkgIT09ICdwcm90b3R5cGUnICYmIGxpc3QuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgICAgY2IoaSwgbGlzdFtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIEFycmF5LWxpa2VcbiAgZWxzZSB7XG4gICAgICBmb3IgKDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGNiKGxpc3RbaV0pO1xuICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gZWFjaDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZWFjaC5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbi8qKlxuICogIyBUcmltXG4gKiBUcmltIHdoaXRlc3BhY2Ugb24gYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICpcbiAqIEBtb2R1bGUgaGVscGVycy91dGlsL3RyaW0uanNcbiAqL1xuXG52YXIgdHJpbVJFID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nO1xuXG5mdW5jdGlvbiB0cmltKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UodHJpbVJFLCAnJyk7XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IHRyaW07XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyaW0uanMubWFwXG4iXX0="}