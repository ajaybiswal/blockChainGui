{"version":3,"sources":["js/dist/components/node_modules/browser-pack/_prelude.js","js/dist/components/js/dist/components/base.js","js/dist/components/js/dist/components/text-input.js","js/dist/components/js/dist/components/typeahead.js","js/dist/components/js/dist/helpers/animation/height.js","js/dist/components/js/dist/helpers/dom/add-class.js","js/dist/components/js/dist/helpers/dom/has-class.js","js/dist/components/js/dist/helpers/dom/make-element.js","js/dist/components/js/dist/helpers/dom/outer-height.js","js/dist/components/js/dist/helpers/dom/parse-attribute.js","js/dist/components/js/dist/helpers/dom/remove-class.js","js/dist/components/js/dist/helpers/dom/toggle-class.js","js/dist/components/js/dist/helpers/dom/trigger-event.js","js/dist/components/js/dist/helpers/util/each.js","js/dist/components/js/dist/helpers/util/mixin.js","js/dist/components/js/dist/helpers/util/trim.js","js/dist/components/js/dist/mixins/messaging.js","js/dist/components/js/dist/mixins/validation.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxzdjhhpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvfile":"text-input.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _each = require('../helpers/util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } /**\n                                                                                                                                                           * # Base Component\n                                                                                                                                                           * The base class for Spark JS components. This class should never be\n                                                                                                                                                           * instantiated directly.\n                                                                                                                                                           *\n                                                                                                                                                           * @param {Element} el\n                                                                                                                                                           * @param {Object} params\n                                                                                                                                                           *\n                                                                                                                                                           * @module components/base.js\n                                                                                                                                                           */\n\nvar noop = function noop() {};\n\nvar Base = function () {\n\n  /**\n   * Set parameters and cache elements.\n   */\n  function Base(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Base);\n\n    if (params.elRequired && !el) {\n      return;\n    }\n\n    this.setParams(this.defaults || {}, true);\n    this.setParams(params);\n    (this._cacheElements || noop).call(this, el, params);\n    (this._parseParams || noop).call(this);\n  }\n\n  /**\n   * Remove the component from the DOM and prepare for garbage collection by dereferencing values.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n\n\n  Base.prototype.remove = function remove(leaveElement) {\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    if (!leaveElement && this.el && this.el.parentNode) {\n      this.el.parentNode.removeChild(this.el);\n    }\n\n    this.unsetParams(this.defaults);\n\n    return this;\n  };\n\n  /**\n   * Update the component to use a new element or reparse from\n   * the existing element.\n   * @param {Element} el Optional\n   * @param {Object} params Optional\n   */\n\n\n  Base.prototype.update = function update(el) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\n    if (this._removeEventListeners) {\n      this._removeEventListeners();\n    }\n\n    (this._cacheElements || noop).call(this, el || this.el, params);\n    (this._parseParams || noop).call(this);\n\n    if (this._addEventListeners) {\n      this._addEventListeners();\n    }\n\n    return this;\n  };\n\n  /**\n   * Set a hash of parameters if they're whitelisted or we're told to force the set.\n   * This is used to set initial values as well as set passed parameters.\n   * @param {Object} params\n   * @param {Boolean} force Force setting even if the param is not whitelisted.\n   */\n\n\n  Base.prototype.setParams = function setParams(params, force) {\n    var _this = this;\n\n    (0, _each2.default)(params, function (k, v) {\n      if (_this._whitelistedParams.indexOf(k) !== -1 || force) {\n        _this[k] = v;\n      }\n    });\n\n    return this;\n  };\n\n  /**\n   * Unset all parameters.\n   * @param {Array|Object} keys\n   * @param {Object} scope The object to unset the params from. Defaults to `this`.\n   */\n\n\n  Base.prototype.unsetParams = function unsetParams(keys, scope) {\n\n    keys = keys instanceof Array ? keys : Object.keys(keys);\n    scope = scope || this;\n    (0, _each2.default)(keys, function (k) {\n      delete scope[k];\n    });\n\n    return this;\n  };\n\n  return Base;\n}();\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nBase.prototype._whitelistedParams = [];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nBase.prototype.defaults = {};\n\nexports.default = Base;\nmodule.exports = exports['default'];\n//# sourceMappingURL=base.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _typeahead = require('./typeahead');\n\nvar _typeahead2 = _interopRequireDefault(_typeahead);\n\nvar _toggleClass = require('../helpers/dom/toggle-class');\n\nvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\nvar _mixin = require('../helpers/util/mixin');\n\nvar _mixin2 = _interopRequireDefault(_mixin);\n\nvar _messaging = require('../mixins/messaging');\n\nvar _messaging2 = _interopRequireDefault(_messaging);\n\nvar _validation = require('../mixins/validation');\n\nvar _validation2 = _interopRequireDefault(_validation);\n\nvar _makeElement = require('../helpers/dom/make-element');\n\nvar _makeElement2 = _interopRequireDefault(_makeElement);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\nextInput\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * A text input container.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * new TextInput(el, {\nptional. Callback for when the input value changes.\nonChange(value, inputInstance) {}\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * });\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module components/text-input.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\n\nvar noop = function noop() {};\n\nvar TextInput = function (_BaseComponent) {\n  _inherits(TextInput, _BaseComponent);\n\n  /**\n   * TextInput constructor.\n   * @param {Element} el\n   * @param {Object} params\n   */\n  function TextInput(el) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, TextInput);\n\n    params.elRequired = true;\n\n    if (!(_this = _possibleConstructorReturn(this, _BaseComponent.call(this, el, params)), _this)) {\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this._bindEventListenerCallbacks();\n    _this._addEventListeners();\n    _this._createTypeahead();\n\n    if (_this.inputEl.value) {\n      _this.show();\n      _this._onInput();\n    }\n    return _possibleConstructorReturn(_this);\n  }\n\n  /**\n   * Show the input by adding the active state and setting character counts (if necessary).\n   */\n\n\n  TextInput.prototype.show = function show() {\n    this.isActive = true;\n    this._updateClass();\n    return this;\n  };\n\n  /**\n   * Hide the input by removing the active state.\n   */\n\n\n  TextInput.prototype.hide = function hide() {\n    this.isActive = false;\n    this._updateClass();\n    return this;\n  };\n\n  /**\n   * Set the value of the input.\n   * @param {Mixed} value\n   */\n\n\n  TextInput.prototype.setValue = function setValue(value) {\n\n    if (this.typeahead) {\n      this.typeahead.setValue(value);\n    } else {\n      this.inputEl.value = value;\n      if (value) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    }\n\n    return this;\n  };\n\n  /**\n   * Get the value of the input.\n   * @return {String}\n   */\n\n\n  TextInput.prototype.getValue = function getValue() {\n    return this.inputEl.value;\n  };\n\n  /**\n   * Clear the value of the input.\n   */\n\n\n  TextInput.prototype.clearValue = function clearValue() {\n    if (this.typeahead) this.typeahead.clear();else this.inputEl.value = '';\n    return this;\n  };\n\n  /**\n   * Disable the input.\n   */\n\n\n  TextInput.prototype.disable = function disable() {\n    if (this.typeahead) this.typeahead.disable();else this.inputEl.setAttribute('disabled', '');\n    return this;\n  };\n\n  /**\n   * Enable the input.\n   */\n\n\n  TextInput.prototype.enable = function enable() {\n    if (this.typeahead) this.typeahead.enable();else this.inputEl.removeAttribute('disabled');\n    return this;\n  };\n\n  /**\n   * Remove.\n   * @param {Boolean} leaveElement\n   */\n\n\n  TextInput.prototype.remove = function remove(leaveElement) {\n    if (this.typeahead) this.typeahead.remove(leaveElement);\n    return _BaseComponent.prototype.remove.call(this, leaveElement);\n  };\n\n  /**\n   * Update the element in use and the position.\n   * @param {Element} el\n   */\n\n\n  TextInput.prototype.update = function update(el) {\n    if (this.typeahead) this.typeahead.remove();\n    return _BaseComponent.prototype.update.call(this, el);\n  };\n\n  /**\n   * Create the typeahead instance.\n   */\n\n\n  TextInput.prototype._createTypeahead = function _createTypeahead() {\n\n    if (this.typeahead === true || this.inputEl.getAttribute('data-typeahead') !== null) {\n      this.typeahead = new _typeahead2.default(this.el, {\n        onBlur: this._onBlurBound\n      });\n    }\n  };\n\n  /**\n   * Store a reference to the needed elements.\n   * @param {Element} el\n   */\n\n\n  TextInput.prototype._cacheElements = function _cacheElements(el) {\n\n    this.el = el;\n    this.inputEl = this.el.querySelector('input, textarea');\n    this.passwordToggleEl = this.el.querySelector('.spark-input__password-toggle');\n\n    if (!this.inputEl) {\n      throw new Error('No <input> or <textarea> element present in input container!', this.el);\n    }\n\n    this.messageEl = this.el.querySelector('.spark-input__message') || (0, _makeElement2.default)('<span class=\"spark-input__message\"></span>');\n\n    this.clearEl = this.el.querySelector('.spark-input__clear');\n  };\n\n  /**\n   * Parse parameters from the elements.\n   */\n\n\n  TextInput.prototype._parseParams = function _parseParams() {\n\n    this.validatePattern = this.validatePattern || this.inputEl.getAttribute('data-validate');\n    this.type = this.inputEl.getAttribute('type') || 'text';\n    this.showCharacters = this.el.getAttribute('data-characters') !== null ? true : false;\n    this.showCharactersRemaining = this.el.getAttribute('data-characters-remaining') !== null ? true : false;\n    this.maxlength = this.inputEl.getAttribute('maxlength') || this.inputEl.getAttribute('data-maxlength-soft') || null;\n    this.isTextarea = this.inputEl.nodeName.toLowerCase() === 'textarea' ? true : false;\n    this.isActive = this.inputEl.value ? true : false;\n  };\n\n  /**\n   * Set the characters count attribute.\n   */\n\n\n  TextInput.prototype._setCharactersCount = function _setCharactersCount() {\n\n    if (this.showCharacters) {\n      this.el.setAttribute('data-characters', this.inputEl.value.length);\n    } else if (this.showCharactersRemaining) {\n\n      var remaining = this.maxlength - this.inputEl.value.length;\n\n      this.el.setAttribute('data-characters-remaining', remaining);\n\n      if (remaining < 1) {\n        this.el.setAttribute('data-characters-remaining-danger', true);\n      } else {\n        this.el.removeAttribute('data-characters-remaining-danger');\n      }\n    }\n  };\n\n  /**\n   * Set the height of the textarea so that it doesn't scroll.\n   */\n\n\n  TextInput.prototype._setTextareaHeight = function _setTextareaHeight() {\n\n    var style = window.getComputedStyle(this.inputEl);\n    var borders = parseInt(style.borderTopWidth, 10) + parseInt(style.borderBottomWidth, 10);\n\n    this.inputEl.style.height = null;\n\n    var height = this.inputEl.scrollHeight;\n    var lines;\n\n    // No height, most likely the element is invisible. Get a rough\n    // approximation of height so we have something.\n    if (!height) {\n      lines = this.inputEl.innerHTML.split('\\n');\n      height = Math.max(parseFloat(style.lineHeight)) * lines.length + parseFloat(style.paddingTop) + parseFloat(style.paddingBottom);\n    }\n\n    this.inputEl.style.height = height + borders + 'px';\n  };\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n\n\n  TextInput.prototype._bindEventListenerCallbacks = function _bindEventListenerCallbacks() {\n    this._onFocusBound = this._onFocus.bind(this);\n    this._onBlurBound = this._onBlur.bind(this);\n    this._onInputBound = this._onInput.bind(this);\n    this._onTogglePasswordViewHideBound = this._onTogglePasswordViewHide.bind(this);\n    this._onClearClickBound = this._onClearClick.bind(this);\n  };\n\n  /**\n   * Add event listeners for focus, blur, input, and click.\n   */\n\n\n  TextInput.prototype._addEventListeners = function _addEventListeners() {\n\n    this.inputEl.addEventListener('focus', this._onFocusBound);\n    this.inputEl.addEventListener('blur', this._onBlurBound);\n    this.inputEl.addEventListener('input', this._onInputBound);\n\n    if (this.passwordToggleEl) {\n      this.passwordToggleEl.addEventListener('click', this._onTogglePasswordViewHideBound);\n    }\n\n    if (this.clearEl) {\n      this.clearEl.addEventListener('click', this._onClearClickBound);\n    }\n  };\n\n  /**\n   * Remove event listeners for focus, blur and input.\n   */\n\n\n  TextInput.prototype._removeEventListeners = function _removeEventListeners() {\n\n    this.inputEl.removeEventListener('focus', this._onFocusBound);\n    this.inputEl.removeEventListener('blur', this._onBlurBound);\n    this.inputEl.removeEventListener('input', this._onInputBound);\n\n    if (this.passwordToggleEl) {\n      this.passwordToggleEl.removeEventListener('click', this._onTogglePasswordViewHideBound);\n    }\n\n    if (this.clearEl) {\n      this.clearEl.removeEventListener('click', this._onClearClickBound);\n    }\n  };\n\n  /**\n   * Update the active class.\n   */\n\n\n  TextInput.prototype._updateClass = function _updateClass() {\n    (0, _toggleClass2.default)(this.el, 'active', this.isActive);\n  };\n\n  /**\n   * When the input element gains focus.\n   * @param {Object} e\n   */\n\n\n  TextInput.prototype._onFocus = function _onFocus() {\n    this.show();\n    this._setCharactersCount();\n    (0, _toggleClass2.default)(this.el, 'focus', true);\n    (this.onFocus || noop)(this.inputEl.value, this);\n  };\n\n  /**\n   * When the input element loses focus.\n   * @param {Object} e\n   */\n\n\n  TextInput.prototype._onBlur = function _onBlur() {\n    if (!this.inputEl.value) {\n      this.hide();\n    }\n    (0, _toggleClass2.default)(this.el, 'focus', false);\n    (this.onBlur || noop)(this.inputEl.value, this);\n  };\n\n  /**\n   * When the value is about to change, run the validation, set the characters count\n   * and resize if we're a textarea.\n   * @param {Object} e\n   */\n\n\n  TextInput.prototype._onInput = function _onInput() {\n\n    this.validate();\n    this._setCharactersCount();\n\n    if (this.isTextarea) {\n      this._setTextareaHeight();\n    }\n\n    (this.onChange || noop)(this.inputEl.value, this);\n  };\n\n  /**\n   * When a clear button is clicked, empty the field.\n   * @param {Object} e\n   */\n\n\n  TextInput.prototype._onClearClick = function _onClearClick() {\n    this.inputEl.value = '';\n    this.hide();\n    (this.onChange || noop)(this.inputEl.value, this);\n  };\n\n  /**\n   * Toggle the current type value (text/password) of password input.\n   * @param {Object} e\n   */\n\n\n  TextInput.prototype._onTogglePasswordViewHide = function _onTogglePasswordViewHide(e) {\n    e.preventDefault();\n    this.inputEl.setAttribute('type', this.inputEl.getAttribute('type') === 'password' ? 'text' : 'password');\n  };\n\n  return TextInput;\n}(_base2.default);\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nTextInput.prototype._whitelistedParams = ['validate', 'validatePattern', 'onValidate', 'onChange', 'onFocus', 'onBlur'];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nTextInput.prototype.defaults = {\n  el: null,\n  messageEl: null,\n  inputEl: null,\n  passwordToggleEl: null,\n  clearEl: null,\n  isActive: false,\n  isTextarea: false,\n  validatePattern: false,\n  type: null,\n  showCharacters: false,\n  showCharactersRemaining: false,\n  maxlength: null,\n  typeahead: null,\n  onValidate: noop,\n  onChange: noop,\n  onFocus: noop,\n  onBlur: noop,\n  _onFocusBound: null,\n  _onBlurBound: null,\n  _onInputBound: null,\n  _onTogglePasswordViewHideBound: null,\n  _onClearClickBound: null\n};\n\n(0, _mixin2.default)(TextInput.prototype, _messaging2.default, _validation2.default);\n\nexports.default = TextInput;\nmodule.exports = exports['default'];\n//# sourceMappingURL=text-input.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _base = require('./base');\n\nvar _base2 = _interopRequireDefault(_base);\n\nvar _triggerEvent = require('../helpers/dom/trigger-event');\n\nvar _triggerEvent2 = _interopRequireDefault(_triggerEvent);\n\nvar _parseAttribute = require('../helpers/dom/parse-attribute');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**\nypeahead\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Listen to an input element and format it as the user types.\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @example\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * new Typeahead(el);\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @module components/typeahead.js\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */\n\nvar noop = function noop() {};\n\nvar Typeahead = function (_BaseComponent) {\n  _inherits(Typeahead, _BaseComponent);\n\n  /**\n   * Typeahead constructor\n   * @param {Element} el\n   * @param {Object} params\n   */\n  function Typeahead(el) {\n    var _this;\n\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Typeahead);\n\n    params.elRequired = true;\n\n    if (!(_this = _possibleConstructorReturn(this, _BaseComponent.call(this, el, params)), _this)) {\n      return _possibleConstructorReturn(_this);\n    }\n\n    _this._maintainFocus(function () {\n      this._parseParams();\n      this._bindEventListenerCallbacks();\n      this._addEventListeners();\n    });\n    return _possibleConstructorReturn(_this);\n  }\n\n  /**\n   * Run the formatting.\n   * @param {Number} cursorIndex\n   */\n\n\n  Typeahead.prototype.run = function run(cursorIndex) {\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n\n    if (this.isRunning) return this;\n\n    this.isRunning = true;\n\n    var oldVal = this.inputEl.value;\n    var val = '';\n    var placeholder = '';\n    var i = 0;\n    var len = this.format.length;\n    var skipCount = 0;\n    var valDone = false;\n\n    for (; i < len; i++) {\n\n      // Add numbers\n      if (this.format[i] === '\\\\d') {\n\n        if (this.characters[i - skipCount]) {\n          val += this.characters[i - skipCount];\n        } else {\n          valDone = true;\n        }\n\n        placeholder += valDone ? this.placeholder[i] : '&nbsp;';\n      }\n      // Placeholder characters\n      else {\n\n          if (!valDone) {\n            val += this.format[i];\n          }\n\n          placeholder += this.format[i];\n\n          skipCount++;\n        }\n    }\n\n    if (this.isFocused) {\n      cursorIndex = cursorIndex === undefined ? this._getCaretEnd() : cursorIndex;\n    }\n\n    // If there are no characters, set the cursorIndex to be the last placeholder entry.\n    if (this.isFocused && !this.characters.length) {\n      cursorIndex = val.length;\n    }\n\n    // No characters and we shouldn't use just placeholder values\n    if (!this.characters.length && params.notOnlyPlaceholders) {\n      val = '';\n    }\n\n    this.inputEl.value = val;\n    this.placeholderEl.innerHTML = placeholder;\n\n    this._updateWidth();\n\n    if (this.isFocused) {\n      this._setCaretPositionTranslated(cursorIndex);\n    }\n\n    if (val !== oldVal) {\n      (0, _triggerEvent2.default)(this.inputEl, 'input');\n    }\n\n    this.isRunning = false;\n\n    if (val !== oldVal) {\n      (this.onChange || noop)(val, oldVal, this);\n    }\n\n    if (!this._atEnd && this.isFocused && this.characters.length === this.maxLength && this._caretIsAtEnd()) {\n      this._atEnd = true;\n      (this.onEnd || noop)(this);\n    } else {\n      this._atEnd = false;\n    }\n\n    return this;\n  };\n\n  /**\n   * Add a character to the characters array at a given index.\n   * @param {String} character\n   * @param {Number} start\n   * @param {Number} end\n   * @param {Boolean} skipCheck\n   */\n\n\n  Typeahead.prototype.addCharacterAtIndex = function addCharacterAtIndex(character, start, end, skipCheck) {\n\n    // Don't add at an index beyond what we can support.\n    if (this.maxLength && start >= this.maxLength) {\n      return this;\n    }\n\n    if (!skipCheck) {\n\n      var re;\n\n      // Try to build a regex for this format character.\n      try {\n        re = new RegExp(this.format[start]);\n      } catch (e) {\n        //\n      }\n\n      if (!re || !re.exec(character)) {\n        return this;\n      }\n    }\n\n    this.characters.splice(start, end - start, character);\n\n    // If we've added at an index that pushes the length beyond what we support,\n    // remove the trailing characters.\n    if (this.maxLength && this.characters.length > this.maxLength) {\n      this.characters.splice(this.maxLength, this.characters.length);\n    }\n\n    this.run(start + 1);\n\n    return this;\n  };\n\n  /**\n   * Add a character at the position of the caret.\n   * @param {String} character\n   */\n\n\n  Typeahead.prototype.addCharacterAtCaret = function addCharacterAtCaret(character) {\n\n    var pos = this._getCaretStart();\n    var re;\n\n    // If we're beyond the bounds of the format, stop.\n    if (this.format[pos] === undefined) {\n      (this.onEnd || noop)(this, character);\n      return this;\n    }\n\n    // Try to build a regex for this format character.\n    try {\n      re = new RegExp(this.format[pos]);\n    } catch (e) {}\n    //\n\n\n    // We couldn't build a regex (so it's invalid) or the regex failed (so it's invalid)\n    if (!re || !re.exec(character)) {\n      if (this._moveCaret('right')) {\n        this.addCharacterAtCaret(character);\n      }\n      return this;\n    }\n\n    this.addCharacterAtIndex(character, this._getCaretStartTranslated(), this._getCaretEndTranslated(), true);\n\n    return this;\n  };\n\n  /**\n   * Remove a character from the character array by index.\n   * @param {Number} index\n   * @param {Number} length Optional\n   * @param {Number} offset Optional\n   */\n\n\n  Typeahead.prototype.removeCharacterAtIndex = function removeCharacterAtIndex(index, length, offset) {\n\n    // Don't want a negative splice length or else we start\n    // removing characters from the end.\n    if (index + offset < 0) {\n      return this;\n    }\n\n    length = length !== undefined ? length : 1;\n    this.characters.splice(index + offset, length);\n    this.run(index + (offset || 1));\n\n    return this;\n  };\n\n  /**\n   * Remove the character at the caret.\n   * @param {Number} offset Optional An offset from the current position.\n   */\n\n\n  Typeahead.prototype.removeCharacterAtCaret = function removeCharacterAtCaret(offset) {\n\n    var start = this._getCaretStartTranslated();\n    var end = this._getCaretEndTranslated();\n    var length = 1;\n    var tmp;\n\n    if (start !== end) {\n\n      // If the end is less than the start, the user dragged from right to left.\n      // Just swap them to make it easier to handle.\n      if (end < start) {\n        tmp = start;\n        start = end;\n        end = tmp;\n      }\n\n      // The length of characters removed\n      length = end - start;\n\n      // Bump the start position @todo: haven't thought through why this is, but it's needed.\n      start++;\n    }\n\n    this.removeCharacterAtIndex(start, length, offset);\n\n    return this;\n  };\n\n  /**\n   * Remove the character in the current range.\n   */\n\n\n  Typeahead.prototype.removeCharactersInRange = function removeCharactersInRange() {\n    this.removeCharacterAtIndex(this._getCaretStartTranslated(), this._getCaretEndTranslated());\n    return this;\n  };\n\n  /**\n   * Set the value of the typeahead. Maintain the position of the caret.\n   * @param {String} value\n   */\n\n\n  Typeahead.prototype.setValue = function setValue(value) {\n\n    this.settingValue = true;\n    this.pause();\n\n    this.characters = (value + '').split('');\n    this.run();\n\n    if (this.isFocused) this._setCaretPosition(this._getCaretStart());\n\n    this.resume();\n    this.settingValue = false;\n\n    return this;\n  };\n\n  /**\n   * Get the value of the typeahead.\n   * @param {Boolean} asInt Get the value as a parsed integer.\n   * @return {String|Number}\n   */\n\n\n  Typeahead.prototype.getValue = function getValue(asInt) {\n    return asInt && this.inputEl.value ? parseInt(this.inputEl.value, 10) : this.inputEl.value;\n  };\n\n  /**\n   * Clear the selected value.\n   */\n\n\n  Typeahead.prototype.clearValue = function clearValue() {\n    this.pause();\n    this.characters = [];\n    this.run(0, { notOnlyPlaceholders: true });\n    return this.resume();\n  };\n\n  /**\n   * Take the date values from the inputs and set them as dates on the calendar.\n   */\n\n\n  Typeahead.prototype.updateValue = function updateValue() {\n    return this.setValue(this.inputEl.value);\n  };\n\n  /**\n   * Move the caret position.\n   * @param {Number} pos\n   */\n\n\n  Typeahead.prototype.moveCaret = function moveCaret(pos) {\n    this._setCaretPositionTranslated(pos);\n    return this;\n  };\n\n  /**\n   * Move the caret to the end of the input.\n   */\n\n\n  Typeahead.prototype.moveCaretToEnd = function moveCaretToEnd() {\n    return this.moveCaret(this.characters.length);\n  };\n\n  /**\n   * Move the caret to the start of the input.\n   */\n\n\n  Typeahead.prototype.moveCaretToStart = function moveCaretToStart() {\n    return this.moveCaret(0);\n  };\n\n  /**\n   * Pause events.\n   */\n\n\n  Typeahead.prototype.pause = function pause() {\n    this.pauseBlurFocus++;\n    return this;\n  };\n\n  /**\n   * Resume events.\n   */\n\n\n  Typeahead.prototype.resume = function resume() {\n    this.pauseBlurFocus--;\n    return this;\n  };\n\n  /**\n   * Disable entry into the input.\n   */\n\n\n  Typeahead.prototype.disable = function disable() {\n    this.inputEl.setAttribute('disabled', '');\n    return this;\n  };\n\n  /**\n   * Enable entry into the input.\n   */\n\n\n  Typeahead.prototype.enable = function enable() {\n    this.inputEl.removeAttribute('disabled');\n    return this;\n  };\n\n  /**\n   * Clear the value.\n   * Changed to clearValue in v2.0.0.\n   */\n\n\n  Typeahead.prototype.clear = function clear() {\n    return this.clearValue();\n  };\n\n  /**\n   * Augment default remove call w/ helper cleanup.\n   * @param {Boolean} leaveElement Leave the element intact.\n   */\n\n\n  Typeahead.prototype.remove = function remove(leaveElement) {\n    _BaseComponent.prototype.remove.call(this, leaveElement);\n    return this;\n  };\n\n  /**\n   * Store a reference to the needed elements.\n   * @param {Object} el\n   */\n\n\n  Typeahead.prototype._cacheElements = function _cacheElements(el) {\n    this.el = el;\n    this.inputEl = this.el.querySelector('[type=\"text\"], [type=\"email\"], [type=\"phone\"], textarea') || this._createDefaultInputElement();\n    this.placeholderEl = this.el.querySelector('.spark-input__placeholder') || this._createDefaultPlaceholderElement();\n  };\n\n  /**\n   * Parse parameters from the elements.\n   */\n\n\n  Typeahead.prototype._parseParams = function _parseParams() {\n\n    // Store the value characters\n    this.characters = this._parseCharacters(this.inputEl.value);\n\n    // Store format\n    this.format = this._parseFormat(this.format ? this.format : this.inputEl.getAttribute('data-typeahead-format'));\n\n    // Store the original placeholder\n    this.placeholder = this.placeholder ? this.placeholder : this.inputEl.getAttribute('placeholder').split('');\n\n    // Get the total number of characters we can have\n    this.maxLength = this._getCharactersAllowedCount(this.format);\n\n    this.matchPlaceholderSize = this.matchPlaceholderSize !== null ? this.matchPlaceholderSize : (0, _parseAttribute.boolean)(this.inputEl, 'data-match-placeholder-size', false);\n  };\n\n  /**\n   * Parse the format string into an array.\n   * @param  {String} format\n   * @return {Array}\n   */\n\n\n  Typeahead.prototype._parseFormat = function _parseFormat(format) {\n\n    var i = 0;\n    var len = format.length;\n    var arr = [];\n    var lastWasEscape = false;\n\n    for (; i < len; i++) {\n      if (format[i] === '\\\\' && !lastWasEscape) {\n        lastWasEscape = true;\n      } else {\n        arr.push((lastWasEscape ? '\\\\' : '') + format[i]);\n        lastWasEscape = false;\n      }\n    }\n\n    return arr;\n  };\n\n  /**\n   * Parse the characters string into an array, ignoring characters which don't\n   * match the format requirements.\n   * @param {String} characters\n   * @return {Array}\n   */\n\n\n  Typeahead.prototype._parseCharacters = function _parseCharacters(characters) {\n\n    var chars = characters.split('');\n    var i = 0;\n    var len = characters.length;\n    var regexes = [];\n    var arr = [];\n\n    for (; i < len; i++) {\n\n      // Try to build a regex for this format character.\n      try {\n        // Make sure this format starts with an escape character.\n        regexes[i] = this.format[i][0] === '\\\\' ? new RegExp(this.format[i]) : null;\n      } catch (e) {}\n      //\n\n\n      // If we were able to create a regex and our char passes, add it to the array\n      // of characters to return.\n      if (regexes[i] && regexes[i].exec(chars[i])) {\n        arr.push(chars[i]);\n      }\n    }\n\n    return arr;\n  };\n\n  /**\n   * Create the default input element.\n   * @return {Element}\n   */\n\n\n  Typeahead.prototype._createDefaultInputElement = function _createDefaultInputElement() {\n\n    var el = document.createElement('input');\n    el.className = 'spark-input__field';\n    el.setAttribute('data-typeahead', '');\n    el.setAttribute('type', 'tel');\n\n    this.el.appendChild(el);\n\n    return el;\n  };\n\n  /**\n   * Create the default input element.\n   * @return {Element}\n   */\n\n\n  Typeahead.prototype._createDefaultPlaceholderElement = function _createDefaultPlaceholderElement() {\n    var el = document.createElement('span');\n    el.className = 'spark-input__placeholder';\n    this.el.appendChild(el);\n    return el;\n  };\n\n  /**\n   * Get the maximum number of characters allowed.\n   * @param {Array} format\n   * @return {Number}\n   */\n\n\n  Typeahead.prototype._getCharactersAllowedCount = function _getCharactersAllowedCount(format) {\n\n    var i = 0;\n    var len = format.length;\n    var allowed = 0;\n\n    for (; i < len; i++) {\n      if (format[i] === '\\\\d') {\n        allowed++;\n      }\n    }\n\n    return allowed;\n  };\n\n  /**\n   * Create bound versions of event listener callbacks and store them.\n   * Otherwise we can't unbind from these events later because the\n   * function signatures won't match.\n   */\n\n\n  Typeahead.prototype._bindEventListenerCallbacks = function _bindEventListenerCallbacks() {\n    this._onKeydownBound = this._onKeydown.bind(this);\n    this._onKeypressBound = this._onKeypress.bind(this);\n    this._onFocusBound = this._onFocus.bind(this);\n    this._onBlurBound = this._onBlur.bind(this);\n    this._onPlaceholderClickBound = this._onPlaceholderClick.bind(this);\n  };\n\n  /**\n   * Add event listeners to keypress and keydown.\n   */\n\n\n  Typeahead.prototype._addEventListeners = function _addEventListeners() {\n    this.inputEl.addEventListener('keydown', this._onKeydownBound, false);\n    this.inputEl.addEventListener('keypress', this._onKeypressBound, false);\n    this.inputEl.addEventListener('focus', this._onFocusBound, false);\n    this.placeholderEl.addEventListener('click', this._onPlaceholderClickBound, false);\n  };\n\n  /**\n   * Add event listeners to keypress and keydown.\n   */\n\n\n  Typeahead.prototype._removeEventListeners = function _removeEventListeners() {\n\n    this.inputEl.removeEventListener('keydown', this._onKeydownBound);\n    this.inputEl.removeEventListener('keypress', this._onKeypressBound);\n    this.inputEl.removeEventListener('focus', this._onFocusBound);\n    this.placeholderEl.removeEventListener('click', this._onPlaceholderClickBound);\n\n    window.removeEventListener('blur', this._onBlurBound);\n    this.inputEl.removeEventListener('blur', this._onBlurBound);\n  };\n\n  /**\n   * Get the position of the caret in the element.\n   * @return {Number} The index\n   */\n\n\n  Typeahead.prototype._getCaretStart = function _getCaretStart() {\n\n    return this._maintainFocus(function () {\n\n      var caretPosition;\n\n      // IE support\n      if (document.selection) {\n        this.inputEl.focus();\n        var sel = document.selection.createRange();\n        sel.moveStart('character', -this.inputEl.value.length);\n        caretPosition = sel.text.length;\n      } else if (this.inputEl.selectionStart || this.inputEl.selectionStart === 0) {\n        caretPosition = this.inputEl.selectionStart;\n      }\n\n      return caretPosition;\n    });\n  };\n\n  /**\n   * Get the end position of the caret in the element.\n   * @return {Number} The index\n   */\n\n\n  Typeahead.prototype._getCaretEnd = function _getCaretEnd() {\n\n    return this._maintainFocus(function () {\n\n      var caretPosition;\n\n      // IE support\n      if (document.selection) {\n        this.inputEl.focus();\n        var sel = document.selection.createRange();\n        sel.moveStart('character', -this.inputEl.value.length);\n        caretPosition = sel.text.length;\n      } else if (this.inputEl.selectionEnd || this.inputEl.selectionEnd === 0) {\n        caretPosition = this.inputEl.selectionEnd;\n      }\n\n      return caretPosition;\n    });\n  };\n\n  /**\n   * Is the caret at the end of the input?\n   * @return {Boolean}\n   */\n\n\n  Typeahead.prototype._caretIsAtEnd = function _caretIsAtEnd() {\n    return this._getCaretStart() === this.maxLength;\n  };\n\n  /**\n   * Set the position of the caret in the element.\n   * @return {Number} The index\n   */\n\n\n  Typeahead.prototype._setCaretPosition = function _setCaretPosition(pos) {\n\n    return this._maintainFocus(function () {\n\n      // IE support\n      if (document.selection) {\n        this.inputEl.focus();\n        var sel = document.selection.createRange();\n        sel.moveStart('character', -this.inputEl.value.length);\n        sel.moveStart('character', pos);\n        sel.moveEnd('character', 0);\n        sel.select();\n      } else if (this.inputEl.selectionStart || this.inputEl.selectionStart === 0) {\n        this.inputEl.selectionStart = pos;\n        this.inputEl.selectionEnd = pos;\n      }\n    });\n  };\n\n  /**\n   * Get the position of the caret translated to the corresponding index in the\n   * characters array. This means ignoring format characters.\n   * @param {Number} pos\n   * @return {Number}\n   */\n\n\n  Typeahead.prototype._getCaretPositionTranslated = function _getCaretPositionTranslated(pos) {\n\n    var i = 0;\n    var skipCount = 0;\n\n    for (; i < pos; i++) {\n\n      // Count non-numbers as a skip.\n      // @todo: this needs to work with more than numbers.\n      if (this.format[i] !== '\\\\d') {\n        skipCount++;\n      }\n    }\n\n    return pos - skipCount;\n  };\n\n  /**\n   * Get the starting position of the caret translated.\n   * @return {Number}\n   */\n\n\n  Typeahead.prototype._getCaretStartTranslated = function _getCaretStartTranslated() {\n    return this._getCaretPositionTranslated(this._getCaretStart());\n  };\n\n  /**\n   * Get the ending position of the caret translated.\n   * @return {Number}\n   */\n\n\n  Typeahead.prototype._getCaretEndTranslated = function _getCaretEndTranslated() {\n    return this._getCaretPositionTranslated(this._getCaretEnd());\n  };\n\n  /**\n   * Set the position of the caret translated to the corresponding index in the\n   * characters array. This means ignoring format characters.\n   * @param {Number} pos\n   */\n\n\n  Typeahead.prototype._setCaretPositionTranslated = function _setCaretPositionTranslated(pos) {\n\n    var i = 0;\n    var skipCount = 0;\n\n    for (; i < pos + skipCount; i++) {\n\n      // Count non-numbers as a skip.\n      // @todo: this needs to work with more than numbers.\n      if (this.format[i] !== undefined && this.format[i] !== '\\\\d') {\n        skipCount++;\n      }\n    }\n\n    this._setCaretPosition(pos + skipCount);\n  };\n\n  /**\n   * Move the caret position\n   * @param  {String} direction The direction of the movement\n   * @return {Boolean}           Was the caret actually moved?\n   */\n\n\n  Typeahead.prototype._moveCaret = function _moveCaret(direction) {\n\n    var curPos = this._getCaretStart();\n\n    if (direction === 'left') {\n      this._setCaretPosition(curPos - 1);\n    } else if (direction === 'right') {\n      this._setCaretPosition(curPos + 1);\n    }\n\n    return curPos !== this._getCaretStart();\n  };\n\n  /**\n   * Empty the input when we only have placeholders.\n   */\n\n\n  Typeahead.prototype._emptyWhenOnlyPlaceholders = function _emptyWhenOnlyPlaceholders() {\n    if (!this.characters.length) {\n      this.clear();\n    }\n  };\n\n  /**\n   * Run a callback function that may change the focus of the document, but\n   * make sure focus goes back to where it needs to be. Also, set the state\n   * so that blur/focus events don't fire from this instance.\n   * @param {Function} callback\n   */\n\n\n  Typeahead.prototype._maintainFocus = function _maintainFocus(callback) {\n\n    this.pause();\n\n    var originalActiveElement = document.activeElement;\n\n    //For IE\n    if (!originalActiveElement) {\n      originalActiveElement = document.body;\n    }\n\n    var output = (callback || noop).call(this);\n\n    // If we didn't have focus, go back to focusing on the original\n    if (originalActiveElement !== this.inputEl) {\n      this.inputEl.blur();\n      originalActiveElement ? originalActiveElement.focus() : null;\n    }\n\n    this.resume();\n\n    return output;\n  };\n\n  /**\n   * Update the width of the typeahead. If we should be matching the width\n   * of the placeholder, do so. Otherwise, take no action.\n   */\n\n\n  Typeahead.prototype._updateWidth = function _updateWidth() {\n\n    if (this.matchPlaceholderSize) {\n      this.placeholderEl.style.width = 'auto';\n      // Add 2px to account for caret width in IE...\n      this.inputEl.style.width = 'auto';\n      this.inputEl.style.width = this.placeholderEl.offsetWidth + 2 + 'px';\n      this.placeholderEl.style.width = '';\n    }\n  };\n\n  /**\n   * Listen for delete and arrows.\n   * @param  {Object} e\n   */\n\n\n  Typeahead.prototype._onKeydown = function _onKeydown(e) {\n\n    var code = e.keyCode || e.which;\n\n    if (code === this.pasteCode && (e.metaKey || e.ctrlKey)) {\n      return;\n    }\n\n    if (code === this.actionCodes.BACKSPACE) {\n      this.removeCharacterAtCaret(-1);\n      this._onBackspace();\n      e.preventDefault();\n    } else if (code === this.actionCodes.DELETE) {\n      this.removeCharacterAtCaret(0);\n      e.preventDefault();\n    } else if (code === this.actionCodes.LEFT) {\n      if (!this._getCaretStart()) {\n        (this.onBackspace || noop)();\n      }\n    } else if (code === this.actionCodes.RIGHT) {\n      if (this._getCaretStart() === this.characters.length) {\n        (this.onEnd || noop)();\n      }\n    } else {\n      if (this.ignoreCodes.indexOf(code) === -1) {\n        e.preventDefault();\n\n        // Account for Numpad keys\n        if (code >= 96 && code <= 105) {\n          code -= 48;\n        }\n\n        this.addCharacterAtCaret(String.fromCharCode(code));\n      }\n    }\n  };\n\n  /**\n   * When the keypress event fires, validate.\n   * @param {Object} e\n   */\n\n\n  Typeahead.prototype._onKeypress = function _onKeypress(e) {\n    var code = e.keyCode || e.which;\n\n    if (this.ignoreCodes.indexOf(code) === -1) {\n      e.preventDefault();\n      this.characters = this._parseCharacters(this.inputEl.value);\n      this.run();\n      (this.onChange || noop)(this.getValue(), this);\n    }\n  };\n\n  /**\n   * When the input event fires, validate. This happens\n   * with a copy+paste.\n   * @param {Object} e\n   */\n\n\n  Typeahead.prototype._onInput = function _onInput(e) {\n    e.preventDefault();\n    this.characters = this._parseCharacters(this.inputEl.value);\n    this.run();\n    (this.onInput || noop)(this.getValue(), this);\n  };\n\n  /**\n   * When we focus, run the formatting.\n   * @param {Object} e\n   */\n\n\n  Typeahead.prototype._onFocus = function _onFocus() {\n\n    window.removeEventListener('blur', this._onBlurBound);\n    window.addEventListener('blur', this._onBlurBound, false);\n    this.inputEl.removeEventListener('blur', this._onBlurBound);\n    this.inputEl.addEventListener('blur', this._onBlurBound, false);\n\n    if (this.isFocused || this.pauseBlurFocus || this.isRunning) return;\n\n    this.run();\n    (this.onFocus || noop)(this.getValue(), this);\n    this.isFocused = true;\n    this._oldVal = this.inputEl.value;\n  };\n\n  /**\n   * When we blur, if we have no characters, remove the placeholders.\n   * @param {Object} e\n   */\n\n\n  Typeahead.prototype._onBlur = function _onBlur() {\n\n    window.removeEventListener('blur', this._onBlurBound);\n    this.inputEl.removeEventListener('blur', this._onBlurBound);\n\n    this.isFocused = false;\n\n    if (this.pauseBlurFocus || this.isRunning) return;\n\n    this._emptyWhenOnlyPlaceholders();\n\n    if (this._oldVal !== this.inputEl.value) {\n      (0, _triggerEvent2.default)(this.inputEl, 'change');\n    }\n\n    (this.onBlur || noop)(this.getValue(), this);\n  };\n\n  /**\n   * When the placeholder receives a click event, focus on the input. This happens in IE10 for some\n   * reason that I cannot fully fathom, but it has something to do with the explicit width being\n   * set on an empty element.\n   * @param {Object} e\n   */\n\n\n  Typeahead.prototype._onPlaceholderClick = function _onPlaceholderClick(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.inputEl.focus();\n  };\n\n  /**\n   * When we backspace, if we have no characters left let listeners know.\n   * @param {Object} e\n   */\n\n\n  Typeahead.prototype._onBackspace = function _onBackspace() {\n    if (!this._getCaretStart()) (this.onBackspace || noop)();\n  };\n\n  return Typeahead;\n}(_base2.default);\n\n/**\n * Whitelisted parameters which can be set on construction.\n * @type {Array}\n */\n\n\nTypeahead.prototype._whitelistedParams = ['format', 'placeholder', 'matchPlaceholderSize', 'onChange', 'onFocus', 'onBlur', 'onInput', 'onBackspace', 'onEnd'];\n\n/**\n * Default values for internal properties we will be setting.\n * These are set on each construction so we don't leak properties\n * into the prototype chain.\n * @type {Object}\n */\nTypeahead.prototype.defaults = {\n  el: null,\n  inputEl: null,\n  placeholderEl: null,\n  placeholder: null,\n  characters: null,\n  format: null,\n  ignoreCodes: [9, // Tab\n  16, // Shift\n  17, // Ctrl\n  18, // Alt\n  20, // CAPS\n  91, // Meta\n  93, // Alt\n  112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123 // F1-F12\n  ],\n  actionCodes: {\n    BACKSPACE: 8,\n    DELETE: 46,\n    LEFT: 37,\n    RIGHT: 39\n  },\n  pasteCode: 86, // v\n  pauseBlurFocus: 0,\n  matchPlaceholderSize: null,\n  maxLength: null,\n  isFocused: false,\n  isRunning: false,\n  onChange: null,\n  onFocus: null,\n  onBlur: null,\n  onInput: null,\n  onBackspace: null,\n  onEnd: null,\n  _atEnd: false,\n  _oldVal: null,\n  _onKeydownBound: null,\n  _onKeypressBound: null,\n  _onFocusBound: null,\n  _onBlurBound: null,\n  _onPlaceholderClickBound: null\n};\n\nexports.default = Typeahead;\nmodule.exports = exports['default'];\n//# sourceMappingURL=typeahead.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _outerHeight = require('../dom/outer-height');\n\nvar _outerHeight2 = _interopRequireDefault(_outerHeight);\n\nvar _addClass = require('../dom/add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('../dom/remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nvar _hasClass = require('../dom/has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _toggleClass = require('../dom/toggle-class');\n\nvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar noop = function noop() {}; /**\n                                * # Animate Height\n                                * Animate the height of an element since we can't do this w/ pure CSS. Sigh.\n                                *\n                                * @example\n                                * animateHeight({\n                                *   el: ...,\n                                *   toggleEl: ...,\n                                *   // Optional params\n                                *   action: 'collapse'|'expand',\n                                *   heightAnimationClass: 'spark-animate-height',\n                                *   opacityAnimationClass: 'spark-animate-opacity',\n                                *   toggleProperty: 'display'|'overflow'|'visibility',\n                                *   toggleValue: 'block'|'none'|'visible'|'hidden',\n                                *   animationDuration: 250\n                                * });\n                                *\n                                * @module helpers/animation/height.js\n                                */\n\nvar runningAnimations = {\n  els: [],\n  completeCallbacks: []\n};\n\n/**\n * Get the inverse toggle value\n * @param  {String} property\n * @param  {String} originalValue\n * @return {String}\n */\nfunction getInverseToggleValue(el, property, originalValue) {\n\n  // Get the value to toggle to for the given property\n  switch (property) {\n    case 'overflow':\n    case 'visibility':\n      return originalValue === 'visible' ? 'hidden' : 'visible';\n    default:\n      return originalValue === 'block' || originalValue === 'inline-block' ? 'none' : 'block';\n  }\n}\n\n/**\n * When an animation is complete, clean up and run the callback.\n * @param  {Object} params\n */\nfunction onComplete(params) {\n\n  // Reset toggle el visibility\n  if (params.toggleClassName) {\n    (0, _toggleClass2.default)(params.el, params.toggleClassName, !params.collapse);\n  } else {\n    params.toggleEl.style[params.toggleProperty] = '';\n  }\n\n  // Remove the height property\n  params.el.style.height = '';\n  params.toggleEl.style.height = '';\n  params.toggleEl.style.marginBottom = '';\n  params.toggleEl.style.marginTop = '';\n\n  // Remove the spark-animate-height class so the transitions no longer apply\n  (0, _removeClass2.default)(params.el, params.heightAnimationClass);\n  (0, _removeClass2.default)(params.toggleEl, params.heightAnimationClass);\n\n  // Run the callback\n  params.onComplete();\n\n  // Remove the element and callback from their respective arrays\n  var runningIndex = runningAnimations.els.indexOf(params.el);\n  runningAnimations.els.splice(runningIndex, 1);\n  runningAnimations.completeCallbacks.splice(runningIndex, 1);\n}\n\n/**\n * @param {Object} params\n */\nfunction animateHeight(params) {\n\n  params = params || {};\n\n  var el = params.el;\n\n  if (!el) {\n    return;\n  }\n\n  var collapse = params.action && params.action === 'collapse';\n  var heightAnimationClass = params.heightAnimationClass || 'spark-animate-height';\n\n  // Allow for elements to be passed or selector strings\n  var toggleEl = typeof params.toggleEl === 'string' ? el.querySelector(params.toggleEl) : params.toggleEl;\n\n  // No element to be switching with toggling so we can't determine the desired height to animate to.\n  if (!toggleEl || (0, _hasClass2.default)(el, 'spark-no-animate')) {\n    return;\n  }\n\n  var toggleClassName = params.toggleClass;\n\n  // The style property to use when toggling visibility\n  var toggleProperty = params.toggleProperty || 'display';\n  var toggleStyles = window.getComputedStyle(toggleEl);\n  var originalToggleValue = toggleStyles[toggleProperty];\n  var toggleValue = params.toggleValue || getInverseToggleValue(toggleProperty, originalToggleValue);\n\n  // If we are already animating, stop now.\n  var runningIndex = runningAnimations.els.indexOf(el);\n  if (runningIndex !== -1) {\n\n    var completeCallback = runningAnimations.completeCallbacks[runningIndex];\n    if (completeCallback) {\n      clearTimeout(completeCallback);\n    }\n\n    onComplete({\n      el: el,\n      toggleEl: toggleEl,\n      onComplete: params.onComplete || noop,\n      collapse: collapse,\n      toggleProperty: toggleProperty,\n      toggleClassName: toggleClassName,\n      toggleValue: toggleValue,\n      heightAnimationClass: heightAnimationClass\n    });\n  }\n\n  // Store the current height\n  var originalHeight = (0, _outerHeight2.default)(el);\n\n  // Toggle the visible property\n  if (toggleClassName) {\n    (0, _toggleClass2.default)(el, toggleClassName, !collapse);\n  } else {\n    toggleEl.style[toggleProperty] = toggleValue;\n  }\n\n  // When measuring the size for a collapse, we have to wait a tic for it to be\n  // accurate. Not sure why. Ugh.\n  if (collapse) {\n    setTimeout(runAnimation, 0);\n  } else {\n    runAnimation();\n  }\n\n  function runAnimation() {\n\n    // Now that the toggle el is taking up space, get the new height which we will be animating to\n    var targetElHeight = (0, _outerHeight2.default)(el);\n\n    // We need to store the original and target toggle element heights. They differ depending on\n    // whether we are going to expand or collapse.\n    var targetToggleElHeight = void 0;\n    var originalToggleElHeight = void 0;\n\n    // If we are collapsing, reset the toggle style and set it when we're done. Set the height so\n    // that we can animate down to 0 or up to the target height.\n    if (collapse) {\n\n      if (toggleClassName) {\n        (0, _removeClass2.default)(el, toggleClassName);\n      } else {\n        toggleEl.style[toggleProperty] = originalToggleValue;\n      }\n\n      originalToggleElHeight = (0, _outerHeight2.default)(toggleEl, toggleStyles);\n      targetToggleElHeight = 0;\n    } else {\n      targetToggleElHeight = (0, _outerHeight2.default)(toggleEl, toggleStyles);\n      originalToggleElHeight = 0;\n    }\n\n    // Set the original height\n    el.style.height = originalHeight + 'px';\n    toggleEl.style.height = originalToggleElHeight + 'px';\n    toggleEl.style.marginBottom = '0px';\n    toggleEl.style.marginTop = '0px';\n\n    // Add the spark-animate-height class which will setup the transition-property and duration\n    (0, _addClass2.default)(el, heightAnimationClass);\n    (0, _addClass2.default)(toggleEl, heightAnimationClass);\n\n    runningAnimations.els.push(el);\n\n    // We need to wait a tick to toggle the height or else the animation class won't function\n    setTimeout(function () {\n\n      // Set the height to the target height\n      el.style.height = targetElHeight + 'px';\n      toggleEl.style.height = targetToggleElHeight + 'px';\n\n      // Remove inline styles after the animation is complete\n      runningAnimations.completeCallbacks.push(setTimeout(function () {\n        onComplete({\n          el: el,\n          toggleEl: toggleEl,\n          onComplete: params.onComplete || noop,\n          collapse: collapse,\n          toggleProperty: toggleProperty,\n          toggleClassName: toggleClassName,\n          toggleValue: toggleValue,\n          heightAnimationClass: heightAnimationClass\n        });\n      }, params.animationDuration !== undefined ? params.animationDuration : 201));\n    }, 0);\n  }\n}\n\nexports.default = animateHeight;\nmodule.exports = exports['default'];\n//# sourceMappingURL=height.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _trim = require('../util/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nvar _hasClass = require('./has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * # Add Class\n * Add a class on an element.\n *\n * @param {Element|Array} el An element or array of elements to update.\n * @param {String} name\n * @return {Element}\n *\n * @module helpers/dom/add-class.js\n */\n\nvar ws = /\\s+/;\nvar cleanup = /\\s{2,}/g;\n\nfunction addClass(el, name) {\n\n  if (arguments.length === 2 && typeof name === 'string') {\n    name = (0, _trim2.default)(name).split(ws);\n  } else {\n    name = name instanceof Array ? name : Array.prototype.slice.call(arguments, 1);\n  }\n\n  // optimize for best, most common case\n  if (name.length === 1 && el.classList) {\n    if (name[0]) {\n      el.classList.add(name[0]);\n    }\n    return el;\n  }\n\n  var toAdd = [];\n  var i = 0;\n  var l = name.length;\n  var item = void 0;\n  var clsName = typeof el.className === 'string' ? el.className : el.getAttribute ? el.getAttribute('class') : '';\n\n  // see if we have anything to add\n  for (; i < l; i++) {\n    item = name[i];\n    if (item && !(0, _hasClass2.default)(clsName, item)) {\n      toAdd.push(item);\n    }\n  }\n\n  if (toAdd.length) {\n    if (typeof el.className === 'string') {\n      el.className = (0, _trim2.default)((clsName + ' ' + toAdd.join(' ')).replace(cleanup, ' '));\n    } else if (el.setAttribute) {\n      el.setAttribute('class', (0, _trim2.default)((clsName + ' ' + toAdd.join(' ')).replace(cleanup, ' ')));\n    }\n  }\n\n  return el;\n}\n\nexports.default = addClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=add-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/**\n * # Has Class\n * See if an element has a class.\n *\n * @param {Element|String} el\n * @param {String} name\n * @return {Boolean}\n *\n * @module helpers/dom/has-class.js\n */\nfunction hasClass(el, name) {\n  var cName = ((typeof el === 'undefined' ? 'undefined' : _typeof(el)) === 'object' ? el.className || el.getAttribute && el.getAttribute('class') || '' : el || '').replace(/[\\t\\r\\n\\f]/g, ' ');\n  return (' ' + cName + ' ').indexOf(' ' + name + ' ') !== -1;\n}\n\nexports.default = hasClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=has-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (html) {\n\n  if (!html) {\n    throw new Error('Cannot create element with no HTML!');\n  }\n\n  var el = document.createElement('div');\n  el.innerHTML = html;\n  var el2 = el.children[0];\n  el2.parentNode.removeChild(el2);\n  return el2;\n};\n\nmodule.exports = exports['default']; /**\n                                      * # Make Element\n                                      * Make en element using a string of HTML.\n                                      *\n                                      * @example\n                                      * makeElement('<div></div>');\n                                      *\n                                      * @module helpers/make-element.js\n                                      *\n                                      * @param {String} html\n                                      * @return {Element}\n                                      */\n//# sourceMappingURL=make-element.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _each = require('../util/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar props = ['marginTop', 'marginBottom', 'borderTop', 'borderBottom']; /**\n                                                                         * # Outer Height\n                                                                         * Get the outer height of an element (including margin and border)\n                                                                         *\n                                                                         * @param {Element} el\n                                                                         * @param {Object} styles Optional Already have computed styles? Pass them in.\n                                                                         *\n                                                                         * @example\n                                                                         * outerHeight(el, computedStyles);\n                                                                         *\n                                                                         * @module helpers/outer-height.js\n                                                                         */\n\n\nfunction outerHeight(el, styles) {\n\n  styles = styles || window.getComputedStyle(el);\n\n  var height = el.clientHeight;\n\n  (0, _each2.default)(props, function (prop) {\n    height += parseInt(styles[prop] || 0, 10);\n  });\n\n  return height;\n}\n\nexports.default = outerHeight;\nmodule.exports = exports['default'];\n//# sourceMappingURL=outer-height.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Parse DOM attributes\n * Given an element and an attribute name, parse that attribute\n * if it exists or return a default.\n *\n * @module helpers/dom/parse-attribute.js\n */\n\n/**\n * Get the boolean value of an attribute on an element,\n * falling back to the default value.\n * @param  {Element} el\n * @param  {String} name\n * @param  {Boolean} def\n * @return {Boolean}\n */\nfunction boolean(el, name, def) {\n  var val = el.getAttribute(name);\n  if (val === null) return def;\n  return val === 'true' || val === '' ? true : false;\n}\n\n/**\n * Get the numeric value of an attribute on an element,\n * falling back to the default value.\n * @param  {Element} el\n * @param  {String} name\n * @param  {Boolean} def\n * @return {Boolean}\n */\nfunction number(el, name, def) {\n  var val = el.getAttribute(name);\n  if (val === null) return def;\n  return parseInt(val, 10);\n}\n\n/**\n * Get the boolean value of an attribute on an element,\n * falling back to the default value.\n * @param  {Element} el\n * @param  {String} name\n * @param  {Boolean} def\n * @return {Boolean}\n */\nfunction string(el, name, def) {\n  var val = el.getAttribute(name);\n  if (val === null) return def;\n  return val;\n}\n\nexports.boolean = boolean;\nexports.number = number;\nexports.string = string;\n//# sourceMappingURL=parse-attribute.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _trim = require('../util/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ws = /\\s+/; /**\n                 * # Remove Class\n                 * Remove a class on an element.\n                 *\n                 * @param {Element|Array} el An element or array of elements to update.\n                 * @param {String} name\n                 * @return {Element}\n                 *\n                 * @module helpers/dom/remove-class.js\n                 */\n\nvar cleanup = /\\s{2,}/g;\n\nfunction removeClass(el, name) {\n\n  if (arguments.length === 2 && typeof name === 'string') {\n    name = (0, _trim2.default)(name).split(ws);\n  } else {\n    name = name instanceof Array ? name : Array.prototype.slice.call(arguments, 1);\n  }\n\n  // optimize for best, most common case\n  if (name.length === 1 && el.classList) {\n    if (name[0]) el.classList.remove(name[0]);\n    return el;\n  }\n\n  // store two copies\n  var clsName = ' ' + (typeof el.className === 'string' ? el.className : el.getAttribute ? el.getAttribute('class') : '') + ' ';\n  var result = clsName;\n  var current = void 0;\n  var start = void 0;\n  for (var i = 0, l = name.length; i < l; i++) {\n    current = name[i];\n    start = current ? result.indexOf(' ' + current + ' ') : -1;\n    if (start !== -1) {\n      start += 1;\n      result = result.slice(0, start) + result.slice(start + current.length);\n    }\n  }\n\n  // only write if modified\n  if (clsName !== result) {\n    if (typeof el.className === 'string') {\n      el.className = (0, _trim2.default)(result.replace(cleanup, ' '));\n    } else if (el.setAttribute) {\n      el.setAttribute('class', (0, _trim2.default)(result.replace(cleanup, ' ')));\n    }\n  }\n\n  return el;\n}\n\nexports.default = removeClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=remove-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _hasClass = require('./has-class');\n\nvar _hasClass2 = _interopRequireDefault(_hasClass);\n\nvar _addClass = require('./add-class');\n\nvar _addClass2 = _interopRequireDefault(_addClass);\n\nvar _removeClass = require('./remove-class');\n\nvar _removeClass2 = _interopRequireDefault(_removeClass);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction toggleClass(el, name, enable) {\n\n  if (!el) {\n    return;\n  }\n\n  // If we're passed an array, toggle the class on each.\n  if (el instanceof NodeList || el instanceof Array) {\n\n    for (var i = 0, len = el.length; i < len; i++) {\n      toggleClass(el[i], name, enable);\n    }\n\n    return;\n  }\n\n  var action = void 0;\n  if (enable !== undefined) {\n    enable = typeof enable === 'function' ? enable.call(null, el) : enable;\n    action = enable ? 'add' : 'remove';\n  } else {\n    action = (0, _hasClass2.default)(el, name) ? 'remove' : 'add';\n  }\n\n  return (action === 'add' ? _addClass2.default : _removeClass2.default)(el, name);\n} /**\n   * # Toggle Class\n   * Toggle a class on an element given a condition.\n   *\n   * @param {Element|Array} el An element or array of elements to update.\n   * @param {String} name\n   * @param {Boolean} enable\n   * @return {Element}\n   *\n   * @module  helpers/dom/toggle-class.js\n   */\n\nexports.default = toggleClass;\nmodule.exports = exports['default'];\n//# sourceMappingURL=toggle-class.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Trigger Event\n * Trigger a DOM event on an element.\n *\n * @param {Element} el\n * @param {String} name\n *\n * @module helpers/dom/trigger-event.js\n */\nfunction triggerEvent(el, name) {\n\n  var event = void 0;\n\n  if (document.createEvent) {\n    event = document.createEvent('HTMLEvents');\n    event.initEvent(name, true, true);\n    event.eventName = name;\n    el.dispatchEvent(event);\n  } else {\n    event = document.createEventObject();\n    event.eventType = name;\n    event.eventName = name;\n    el.fireEvent('on' + event.eventType, event);\n  }\n}\n\nexports.default = triggerEvent;\nmodule.exports = exports['default'];\n//# sourceMappingURL=trigger-event.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Each\n * Apply a callback function to a list of any kind: Array, NodeList, HTMLCollection or Object.\n *\n * @param {Array|NodeList|HTMLCollection|Object} list\n * @param {Function} cb\n *\n * @example\n * each([], callback);\n * each(el.children, callback);\n * each(el.childNodes, callback);\n * each({}, callback);\n *\n * @module helpers/util/each.js\n */\nfunction each(list, cb) {\n\n  if (!list) {\n    return;\n  }\n\n  if (typeof cb !== 'function') {\n    throw new Error('Cannot invoke `each` without a callback!');\n  }\n\n  var i = 0;\n  var len = list.length;\n\n  // Object\n  if (len === undefined) {\n    for (i in list) {\n      if (i !== 'prototype' && list.hasOwnProperty(i)) {\n        cb(i, list[i]);\n      }\n    }\n  }\n  // Array-like\n  else {\n      for (; i < len; i++) {\n        cb(list[i]);\n      }\n    }\n}\n\nexports.default = each;\nmodule.exports = exports['default'];\n//# sourceMappingURL=each.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (proto) {\n  for (var _len = arguments.length, mixins = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    mixins[_key - 1] = arguments[_key];\n  }\n\n  (0, _each2.default)(mixins, function (mixin) {\n    for (var i in mixin) {\n      if (mixin.hasOwnProperty(i) && !proto[i]) proto[i] = mixin[i];\n    }\n  });\n};\n\nvar _each = require('./each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * # Mixin\n * Apply a mixin, or mixins, to an Object\n *\n * @example\n * mixin(proto, mix, mix2)\n *\n * @module helpers/util/mixin.js\n */\nmodule.exports = exports['default'];\n//# sourceMappingURL=mixin.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Trim\n * Trim whitespace on a string.\n *\n * @param {String} str\n *\n * @module helpers/util/trim.js\n */\n\nvar trimRE = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;\n\nfunction trim(str) {\n  return str.replace(trimRE, '');\n}\n\nexports.default = trim;\nmodule.exports = exports['default'];\n//# sourceMappingURL=trim.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _height = require('../helpers/animation/height');\n\nvar _height2 = _interopRequireDefault(_height);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n\n  /**\n   * Set the error state.\n   * @param {String} message Optional\n   */\n  setError: function setError(message) {\n\n    // Animate down\n    if (!this._isMessageVisible()) {\n      this._showMessage();\n    }\n\n    this.clearWarning();\n    this.clearSuccess();\n\n    this.el.setAttribute('data-error', true);\n\n    if (message) {\n      this.setMessage(message);\n    }\n\n    return this;\n  },\n\n\n  /**\n   * Set the error state.\n   */\n  clearError: function clearError() {\n    this.el.removeAttribute('data-error', true);\n    return this;\n  },\n\n\n  /**\n   * Set the warning state.\n   * @param {String} message Optional\n   */\n  setWarning: function setWarning(message) {\n\n    // Animate down\n    if (!this._isMessageVisible()) {\n      this._showMessage();\n    }\n\n    this.clearError();\n    this.clearSuccess();\n\n    this.el.setAttribute('data-warning', true);\n\n    if (message) {\n      this.setMessage(message);\n    }\n\n    return this;\n  },\n\n\n  /**\n   * Set the error state.\n   */\n  clearWarning: function clearWarning() {\n    this.el.removeAttribute('data-warning', true);\n    return this;\n  },\n\n\n  /**\n   * Set the success state.\n   * @param {String} message Optional\n   */\n  setSuccess: function setSuccess(message) {\n\n    // Animate down\n    if (!this._isMessageVisible()) {\n      this._showMessage();\n    }\n\n    this.clearError();\n    this.clearWarning();\n\n    this.el.setAttribute('data-success', true);\n\n    if (message) {\n      this.setMessage(message);\n    }\n\n    return this;\n  },\n\n\n  /**\n   * Set the success state.\n   */\n  clearSuccess: function clearSuccess() {\n    this.el.removeAttribute('data-success', true);\n    return this;\n  },\n\n\n  /**\n   * Clear all messages.\n   */\n  clearMessages: function clearMessages() {\n    this._hideMessage(function () {\n      this.clearError();\n      this.clearWarning();\n      this.clearSuccess();\n    }.bind(this));\n    return this;\n  },\n\n\n  /**\n   * Set the message text.\n   * @param {String} message\n   */\n  setMessage: function setMessage(message) {\n    this.messageEl.innerHTML = message;\n    return this;\n  },\n\n\n  /**\n   * Show the message\n   */\n  _showMessage: function _showMessage() {\n\n    if (!this.messageEl.parentNode) {\n      this.el.appendChild(this.messageEl);\n    }\n\n    (0, _height2.default)({\n      el: this.el,\n      toggleEl: this.messageEl\n    });\n  },\n\n\n  /**\n   * Hide the message.\n   * @param {Function} callback\n   */\n  _hideMessage: function _hideMessage(callback) {\n\n    (0, _height2.default)({\n      el: this.el,\n      toggleEl: this.messageEl,\n      toggleValue: 'none',\n      action: 'collapse',\n      onComplete: callback\n    });\n  },\n\n\n  /**\n   * Is the message currently visible?\n   * @return {Boolean}\n   */\n  _isMessageVisible: function _isMessageVisible() {\n    return this.el.getAttribute('data-error') || this.el.getAttribute('data-warning') || this.el.getAttribute('data-success');\n  }\n}; /**\n    * # Messaging Mixin\n    * Add functionality for showing messages related to a form field.\n    *\n    * @example\n    * mixin(Component, messaging);\n    *\n    * @module mixin/messaging.js\n    */\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=messaging.js.map\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * # Validation Mixin\n * Add functionality for validating a form field's value.\n *\n * @example\n * mixin(Component, validation);\n *\n * @module mixin/validation.js\n */\n\nexports.default = {\n\n  /**\n   * Default validate function. This can be overridden by passing a\n   * custom validate method as a parameter. This really only helps out\n   * of the box for text inputs.\n   */\n  validate: function validate() {\n\n    var validate = this.validatePattern;\n\n    // Nothing to validate.\n    if (!this.onValidate || !validate) {\n      return this;\n    }\n\n    var re = new RegExp(validate);\n\n    this.onValidate(re.test(this.getValue()), this.getValue(), this);\n\n    return this;\n  }\n};\nmodule.exports = exports[\"default\"];\n//# sourceMappingURL=validation.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}