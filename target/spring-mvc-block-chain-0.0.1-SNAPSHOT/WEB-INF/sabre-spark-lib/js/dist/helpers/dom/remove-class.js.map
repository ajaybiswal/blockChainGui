{"version":3,"sources":["helpers/dom/remove-class.js"],"names":["ws","cleanup","removeClass","el","name","arguments","length","split","Array","prototype","slice","call","classList","remove","clsName","className","getAttribute","result","current","start","i","l","indexOf","replace","setAttribute"],"mappings":";;;;;;AAWA;;;;;;AAEA,IAAMA,KAAK,KAAX,C,CAbA;;;;;;;;;;;AAcA,IAAMC,UAAU,SAAhB;;AAEA,SAASC,WAAT,CAAqBC,EAArB,EAAyBC,IAAzB,EAA+B;;AAE7B,MAAIC,UAAUC,MAAV,KAAqB,CAArB,IAA0B,OAAOF,IAAP,KAAgB,QAA9C,EAAwD;AACtDA,WAAO,oBAAKA,IAAL,EAAWG,KAAX,CAAiBP,EAAjB,CAAP;AACD,GAFD,MAGK;AACHI,WAAOA,gBAAgBI,KAAhB,GAAwBJ,IAAxB,GAA+BI,MAAMC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BN,SAA3B,EAAsC,CAAtC,CAAtC;AACD;;AAED;AACA,MAAID,KAAKE,MAAL,KAAgB,CAAhB,IAAqBH,GAAGS,SAA5B,EAAuC;AACrC,QAAIR,KAAK,CAAL,CAAJ,EAAaD,GAAGS,SAAH,CAAaC,MAAb,CAAoBT,KAAK,CAAL,CAApB;AACb,WAAOD,EAAP;AACD;;AAED;AACA,MAAIW,UAAU,OAAO,OAAOX,GAAGY,SAAV,KAAwB,QAAxB,GAAmCZ,GAAGY,SAAtC,GAAmDZ,GAAGa,YAAH,GAAkBb,GAAGa,YAAH,CAAgB,OAAhB,CAAlB,GAA6C,EAAvG,IAA8G,GAA5H;AACA,MAAIC,SAASH,OAAb;AACA,MAAII,gBAAJ;AACA,MAAIC,cAAJ;AACA,OAAK,IAAIC,IAAI,CAAR,EAAWC,IAAIjB,KAAKE,MAAzB,EAAiCc,IAAIC,CAArC,EAAwCD,GAAxC,EAA6C;AAC3CF,cAAUd,KAAKgB,CAAL,CAAV;AACAD,YAAQD,UAAUD,OAAOK,OAAP,CAAe,MAAMJ,OAAN,GAAgB,GAA/B,CAAV,GAAgD,CAAC,CAAzD;AACA,QAAIC,UAAU,CAAC,CAAf,EAAkB;AAChBA,eAAS,CAAT;AACAF,eAASA,OAAOP,KAAP,CAAa,CAAb,EAAgBS,KAAhB,IAAyBF,OAAOP,KAAP,CAAaS,QAAQD,QAAQZ,MAA7B,CAAlC;AACD;AACF;;AAED;AACA,MAAIQ,YAAYG,MAAhB,EAAwB;AACtB,QAAI,OAAOd,GAAGY,SAAV,KAAwB,QAA5B,EAAsC;AACpCZ,SAAGY,SAAH,GAAe,oBAAKE,OAAOM,OAAP,CAAetB,OAAf,EAAwB,GAAxB,CAAL,CAAf;AACD,KAFD,MAGK,IAAIE,GAAGqB,YAAP,EAAqB;AACxBrB,SAAGqB,YAAH,CAAgB,OAAhB,EAAyB,oBAAKP,OAAOM,OAAP,CAAetB,OAAf,EAAwB,GAAxB,CAAL,CAAzB;AACD;AACF;;AAED,SAAOE,EAAP;AACD;;kBAEcD,W","file":"remove-class.js","sourcesContent":["/**\n * # Remove Class\n * Remove a class on an element.\n *\n * @param {Element|Array} el An element or array of elements to update.\n * @param {String} name\n * @return {Element}\n *\n * @module helpers/dom/remove-class.js\n */\n\nimport trim from '../util/trim';\n\nconst ws = /\\s+/;\nconst cleanup = /\\s{2,}/g;\n\nfunction removeClass(el, name) {\n\n  if (arguments.length === 2 && typeof name === 'string') {\n    name = trim(name).split(ws);\n  }\n  else {\n    name = name instanceof Array ? name : Array.prototype.slice.call(arguments, 1);\n  }\n\n  // optimize for best, most common case\n  if (name.length === 1 && el.classList) {\n    if (name[0]) el.classList.remove(name[0]);\n    return el;\n  }\n\n  // store two copies\n  let clsName = ' ' + (typeof el.className === 'string' ? el.className : (el.getAttribute ? el.getAttribute('class') : '')) + ' ';\n  let result = clsName;\n  let current;\n  let start;\n  for (let i = 0, l = name.length; i < l; i++) {\n    current = name[i];\n    start = current ? result.indexOf(' ' + current + ' ') : -1;\n    if (start !== -1) {\n      start += 1;\n      result = result.slice(0, start) + result.slice(start + current.length);\n    }\n  }\n\n  // only write if modified\n  if (clsName !== result) {\n    if (typeof el.className === 'string') {\n      el.className = trim(result.replace(cleanup, ' '));\n    }\n    else if (el.setAttribute) {\n      el.setAttribute('class', trim(result.replace(cleanup, ' ')));\n    }\n  }\n\n  return el;\n}\n\nexport default removeClass;\n"]}